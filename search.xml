<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>完美倒立</title>
      <link href="/2022/01/02/dream-tide/"/>
      <url>/2022/01/02/dream-tide/</url>
      
        <content type="html"><![CDATA[<p>我随着节奏摇头，揣摩着台上的人是真唱还是假唱，心情在注意到前面有俩女孩正欢乐地蹦蹦跳跳时也愉悦起来。身旁哈哥收起他的相机「这种场合光站着好像有点尴尬。」我笑着说确实，然后狠狠地踩着鼓点晃了两下脑袋。</p><p>一个月前哈哥联系我说去看一出乐队现场，他运气爆表，在两个平台同时抽中了门票。我假意婉拒，说你还是约个女孩吧。他说 No。两天后他发了支 vlog，不无遗憾地表示如果有的话，谁不想和可爱的女孩一起看演出呢。</p><p>嗐。视频里的他一如既往地热情、真诚。我评论说「20 多岁、会剪视频、勇于表达、看见可爱的女孩会痴笑，未来可期。」</p><p>热情、真诚是我对哈哥的主要印象，也是我觉得对人最高的评价。</p><p>念书时，有次和哈哥在晚自习后的楼道捡到一张大概被人落下的试卷，哈哥当即做出决定「我们把它还回去吧。」他寻着卷子上的信息找到教室然后把试卷放到讲桌——一脸满足。我很不耐烦，催促着「好了么？快走吧。」</p><p>这种行为有什么意义？别人会知道你帮助过他吗？</p><p>后来我把这件事讲给哈哥，他说已经不记得了。当时哈哥也正发挥着类似的热情。他来到我的住处，不满这的杂乱，一脸兴奋地撸起袖子「咱们来做个大扫除吧。」好家伙，哪有人跑到别人屋子来做大扫除的。</p><p>我一直很反感那些一时兴起和自我感动，像是对故事里热血主角盲目且肤浅的模仿。记忆里，每次我认真对待别人的提议并投入进去后都会发现，对方其实无意分享或做点什么，只是分分钟热度或彰显品味。</p><p>我一开始对哈哥也很怀疑，觉得他中二、「假」。无数个细节的堆叠才让我意识到他真的就是这样纯粹的一个人——于是通过否定他来合理我自己这招就行不通了。负面情绪缺少创口贴源源不断地宣泄，即便我知道这是很不对的。可，为什么呢？为什么我明明很反感，那些糟糕的念头还是不断在脑海晃荡？一定有什么地方不对劲，由此我才开始反思自己。</p><p>偶尔会想起以前，然后感叹自己当时是个多么愚蠢又笨拙的胆小鬼。我觉得自己每个阶段都在积极的方面改变了不少，而他对我的影响尤其值得一提——我做过很多练习都是希望能配得上这世界还有他这样的真诚。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>城市正在消失</title>
      <link href="/2021/11/21/undefined/"/>
      <url>/2021/11/21/undefined/</url>
      
        <content type="html"><![CDATA[<p>天空唤醒影子<br>悬铃木藏起叶子<br>人海被懦弱撕碎 扔进盒子<br>别往外看 城市正在消失</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>试着谈谈信息消费</title>
      <link href="/2021/11/01/consume/"/>
      <url>/2021/11/01/consume/</url>
      
        <content type="html"><![CDATA[<p>「信息」是一个很大的词，取「信息」在载体上的概念，即指文字、图像、声音、视频，「信息消费」便是对这四类内容的<strong>过滤、消费、整理、利用</strong>。我在此提出自己由经验得出的暴论——大部分讲我们如何对待信息的内容，都是取这几个步骤中的一个或多个，在方法论或工具使用上讨论，且多只给出一些不见论证的答案或工具主义的折腾，主要分布在「数字极简」及「『知识』管理」。我试图以「目的」出发，将「信息消费」的讨论限制于信息在当前时间点的过滤、消费、整理、利用这四个流程内，然后谈谈我对「信息消费」的理解以及对「信息消费」在网络上流行的一些现状的看法。</p><h2 id="目的"><a class="markdownIt-Anchor" href="#目的"></a> 目的</h2><p>我的讨论从「我们为什么要消费信息」开始，假如我们承认机会成本的概念对此适用，那这个问题也可以不那么严谨地转换为「我们为什么要把时间花在处理与信息之间的关系？而不是拿去学习、陪伴家人、约会女孩？」</p><p>由此我认为消费信息一定有这样那样的目的存在，背后有着理性或人性的判断。弃目的谈信息消费如建空中楼阁，目的不同，策略自然不同。若是有人没有约束地直言「我们应当如何如何」，在我看来是狭隘的。我在此将「信息消费」限定在直觉的范畴并举几个例子：娱乐消遣、了解新闻、维护人际关系、获取情报、积累知识……</p><p>这些目的是否有高低之分并不影响分析，基于怎样的目的去处理与信息的关系正好引出基于怎样的价值观去对信息进行「过滤」。</p><h2 id="过滤"><a class="markdownIt-Anchor" href="#过滤"></a> 过滤</h2><p>如果信息量很少，那就谈不上过滤了，最多算是挑选。我觉得「过滤」较为准确地表达出了信息爆炸年代，所有不想被信息洪流裹挟的人面对信息的态度。</p><p>我将「过滤」定义为从媒介、形式、质量等多个维度构建信息入口，在各种主观客观的条件下（目的不同、能力有限、环境各异……）通过入口的信息或多或少，信息熵或大或小，可能是主动获取的、也可能是被动推送的，可能可信、也可能是假的……</p><p>对此，部分文章作出（我认为是）偏见的表达——比如「只读长文」、「不看新闻」、「屏蔽朋友圈」……这种答案虽然忽略了很多东西，但它有效，对大部分人有效。我们假定提出这种论断的人不是人云亦云，而是有意忽略掉细节，那么这种说法其实是以俯视的姿态告诉观众「你不需要思考，照着做就能获得解脱」，某种程度上它在抑制大家的理性。我有证据——想象一个每个人表达观点时都只是在重复某个权威的世界。</p><p>思考目的来对信息过滤并不能解决所有问题，比如如何从信息汪洋中过滤出有效信息、如何过滤又不至于形成信息茧房、以及过滤带来的另一个问题——对信息的<a href="https://www.wikiwand.com/zh-hans/%E9%94%99%E5%A4%B1%E6%81%90%E6%83%A7%E7%97%87" target="_blank" rel="noopener">错失恐惧</a>。我尝试聊聊后者——如果我们带有目的，那如何才能保证为了达到这个目的的所有有效信息都能被我们接收到呢？</p><p>这个问题无疑是对「信息戒断」的一大挑战。我们可以说如今我们社交媒体成瘾、信息成瘾，所以我们要远离它们，回到生活。「卸载 App」、「把手机放远点」……可「那些本可以让我们更好完成目的的信息就这样流失了」怎么办呢？</p><p>抛开消遣这样的人性弱点不提，我觉得「<a href="https://www.wikiwand.com/zh-hans/%E5%B8%95%E7%B4%AF%E6%89%98%E6%B3%95%E5%88%99" target="_blank" rel="noopener">关键少数法则</a>」是一个很好的应对方法——只有一样东西带来的实际益处大于实际害处时才选择它。比如那些「有可能让我们更好」的信息，为了这种可能性花费的成本远大于我们接收到它的收获，那我们就应当毫无顾忌地扔掉它。所以前文提到的「只读长文」、「不看新闻」等操作也并不是一个宗教式的答案，而是针对某个目的进行成本考量后作出的策略，而这种成本的基础是「信息密度更高的内容更有价值」。</p><p>与之相关的是我们对碎片化信息的沉迷，除了「我在利用碎片时间」这种错觉，它还满足了人类「弯道超车」的心态——如今任何人都可以不费力了解事物而对之侃侃而谈。这并不是现代人才有的心态，纸媒时代的销量也并非都用于公众对理性的追崇，大部分都只为饭前饭后加点谈资而已。</p><p>还有一个不错的答案则是基于对人生哲学的理解——把自己寄托于信息不如用生活最大限度地充实自己。怎样生活呢？那就不在这篇文章的讨论范围内了。</p><p>有许多工具帮助我们获取信息、过滤信息，但我们也常被工具和媒介打扰。工具会影响我们对信息的感知。我认为对入口工具的使用应该建立在思考我们与信息的关系之上。比如「我消费信息的目的是什么」、「什么信息对我来说是最优的」……通过思考形成自己的体系，用什么工具、如何使用工具应该会自然而然构造起来。当然，强大的工具总带着自己的哲学，在达到这种六经皆我注脚的程度之前，通过学习工具的使用来完善自己的体系也是可取的。</p><h2 id="消费"><a class="markdownIt-Anchor" href="#消费"></a> 消费</h2><p>我不厌其烦再说一遍，信息载体不一、媒介各异，面对信息时我们也各有目的……各种细节实在是太多了。关于如何读书，书店里就有无数的书籍对此作出严谨的论述。</p><p>有观点<a href="https://book.douban.com/subject/25864057/" target="_blank" rel="noopener">拿饮食做比喻</a>，我们也许可以如吃饭般指定特定的场所与时间来消费信息。尚且不谈这种形式上的「信息消费」，我在此非常局限地表达出自己期望的一种理想情况：过滤出那些在我们经验之外，但与我们经验又有所链接的信息，不断反思，重塑我们的认知，扩展我们的边界。</p><p>信息的能力太大了，它是思考的养料，足以让人把想象当作现实。我们对信息的执着大概就源于演化过程中因此产生的路径依赖。</p><h2 id="整理"><a class="markdownIt-Anchor" href="#整理"></a> 整理</h2><p>信息的整理也是一个超超级大的话题，在「『知识』管理」领域有太多的方法论和最佳实践。我无意也无力讨论这类内容，仅立足于「目的」聊聊「为什么要整理信息」。</p><p>当我们有了新的信息（这个信息可能来自外界也可能来自自己的灵感），多半都会有把它记录下来的冲动，记录时便涉及到这条新信息与已有信息的关系。如果我们的目的仅仅是将信息收集下来，那就并不需要考虑信息之间的关系——可这样的收集也就毫无意义。如果不需要使用它，为什么还要保存它呢？</p><p>考虑到信息之间的关系，也就涉及到信息的整理。整理这个行为可以于当下，也可以在未来。我可以在记录下某条信息时将之分门别类、打上标签，也可以先将之存放，后面再来处理。在我看来，各类「『知识』管理」应用首先处理的便是整理这一行为本身的摩擦，使之流畅、无感。比方说剪藏功能可以快速地将文章收集保存，打开就是写作界面可以让人快速记录想法……为了满足整理这一行为，才发展出各种管理的形式：比如从现实抽象出来的文件夹，标签组织，链接组织……组织信息自然涉及到信息的粒度，页面、段落、节点……</p><p>可信息整理之后呢？我认为信息的整理基于承前启后的目的，往前回顾已有的信息，往后方便未来检索利用。我将信息整理在你这个应用里，你怎么帮助我丝滑地实现这两个目的？</p><p>比如如果你试图通过类备忘录 App 来记录信息，回顾的时候在一篇备忘录内必须先返回再点击进入下一篇备忘录，这种摩擦对于信息的回顾来说完全没有必要呀。同理，部分提供了「Daily Notes」的应用，每次回顾记录在 「Daily Notes」上的碎片信息（我假定 Daily Notes 记录的是碎片灵感而非日记），还需要先点击某个日期才能看到我记录的某个信息——如果我试图整理之前记下的一个想法，得花多长时间才能定位到它呀！</p><p>至于检索利用，一方面涉及到工具本身的能力——至少要有全局搜索吧（但很多工具都没有全局替换），一方面也涉及到我们对信息的处理方式。比方说现在流行的「将信息以自己的话表述再记录下来」，或者「高亮标记关键词句再保存」……我认同这种形式，前者面向当下，促使我们理解接受到的信息，两者都面向未来——当我们需要利用它们时，是否还能精确地 Get 到当时的感受。</p><h2 id="利用"><a class="markdownIt-Anchor" href="#利用"></a> 利用</h2><p>积累、整理信息，一大用处是为了未来某个时刻需要时能迅速找到它。如果在整理阶段做的不到位，即便存了一条有用的信息，下一次需要时还是会通过「搜索引擎」去寻找。当然，由于互联网的发展，此处的「搜索引擎」应当定义为各个赛博应用内的搜索入口。</p><p>利用仍然是个大话题，比如我们可以通过已有的信息做决策……我主要聊一聊通过积累信息来输出，将吸收的信息反哺进信息汪洋——创作者经济的概念很是鼓励人写作，鼓励人整理信息（做笔记）后写作，鼓励人将笔记剪裁成「新」文章发表。这种风向不大好。</p><p>我们被别人说服了，然后用自己的话再把这个观点传递下去——这没啥不好。但在浮躁的流量氛围下，最抓人眼球的永远是观点，于是逻辑一层一层缺席。太卷了，太卷了。观点被换着花样表达，甚至造词造句表达。这种浮夸的风气各处弥漫，任谁都能于空气中作出论断，比喻精妙。世界充斥着鸡同鸭讲，但大家都觉得自己掌握真理。</p><p>以为被比喻包装的经验见解似乎表达出什么不得了的东西——我承认我在这写着这些也是如此。</p><p>太阳底下无新事。唯一新鲜的是我们对它的思考、尝试，以及由此产生的种种细节。即便是因为表达失真导致读者产生的隐喻，那也比独断要更有力量。——我把这当作即便如此也要写出这篇文章的辩解，如果我错了，那也比不可言说的正确有趣一点。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冬天</title>
      <link href="/2021/10/31/bird/"/>
      <url>/2021/10/31/bird/</url>
      
        <content type="html"><![CDATA[<p>迁徙的鸟儿 又一次回头<br>栖息过的枝桠啊<br>我们都要活过 这个冬天</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个脚注</title>
      <link href="/2021/09/12/word/"/>
      <url>/2021/09/12/word/</url>
      
        <content type="html"><![CDATA[<p>难得在下班路上遇到太阳一直晃眼，我才意识到这条走了一个多月的路原来自东向西。视线的最远处有一座亮着灯的电视塔插在高楼蚕食过的地平线上，我就租住在那附近。经行道树荫，加速穿过白天，迈上阶梯，回到生活，带上房门就像死者拉上自己的棺材盖。烧水、瘫坐、打扫、上网，骄傲、怀疑、嫉妒、生闷气。给家人打电话，好像对方有安慰自己的义务；向女孩发消息，觉得对方也该回礼般应答；第三次读某本书，惊讶地发现这段时间自以为摸打滚爬得到的感悟还不如书上前两遍都被自己忽略了的一个脚注。——但我喜欢这种感觉（虽然总有延迟），一直觉得自己是「正确」的才反倒让我感到害怕。但随着又一次否定自己，我才意识到否定和成长并没有必然的关联。我没有变得更好，只是优越感变了，我有了新的理由鄙视以前的自己、鄙视和以前的自己处于同温层的人、鄙视「鄙视」这种行为本身。</p><p>在学校里报复性阅读的那阵子，我曾想过的、感兴趣的、怀疑的东西全都能很快从某本书上找到，彼此联系、细流汇聚又载着我通往许多未知。和许多同龄人一样，第一次，我知道了自己不知道。虽然让人兴奋，却也有点拔苗助长。我发现我的好奇心在消逝，不愿意去理解，排斥许多东西——以一种把它们纳入自己熟悉领域来思考的方式。我通过自己刚记住的几个结论来反推面前东西的对错，想当然地质疑一切，以讨厌别的什么事物来显得自己聪明。</p><p>但我知道「我不知道自己在说什么」。我相信我有可能是错的，并且很乐意去寻找能告诉我为什么错了的东西。我遗憾自己之前做的功课不足，但绝不因错误而懊恼。于是我将「求知」理解成观点遍历，试图在理念的碰撞、颠覆中获取快感，但往往只是在用固有认知来指点江山。唯一值得庆幸的是，我的自尊心还没有自大到觉得自己有能力去教育别人。</p><p>最近开始翻阅以前立了 Flag 要重读但一直被追求新鲜感打断的书，发现一些惊喜但早就被勾划过的段落。嗐，当时完全没用心嘛。更糟的是，某些埋在脑海里常被我引用做判断的一些概念，竟然完全记反了。这就是闭门造车呀。我还是不赞同死磕晦涩的经典，但有点明白经典的意义了。读者只能读出已然存在内心的东西，所以挑选书的标准只有一个——总能和内心共鸣。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>艺术家是人类的感官</title>
      <link href="/2021/08/05/august/"/>
      <url>/2021/08/05/august/</url>
      
        <content type="html"><![CDATA[<p>靠着打工处的商场六楼开着一间书店，借着「快要换办公场地了，何不逛逛」的名义和同事溜达了一圈。倒是奢侈，租了大半栋楼只零散摆了估摸着两三个架子的畅销书……你知道这类地方店名仅供参考，但还是觉得有点失望。</p><p>匆匆晃过，提及几个名字。对方意在言外，我也就老实地坦白无知。想到也读过不少完全不解其意的小说——在很长的一段时间里，读书于我就是读小说、读小说便是读故事，那些文学名著啊什么的，大部分都是些好简单、了无趣味的故事。偶尔运气好，我能记下一些抽象的大道理和戏谑的句子，作为翻阅过它们的证据。哎，我的经历太狭窄了，能读出来的东西少得可怜。</p><p>中学午休时室长偶尔翻我柜子找些文字解闷，因为两三本有着麦黄色的封面，便开玩笑说我又在看黄书了。当时觉得对方冒昧，后来自己被人揶揄时也常打趣说在看小黄书，反倒有点怀念那阵子有人愿意读你感兴趣的东西。当时大家忙于一些重要的东西，精神贫瘠得一致，很容易聊得来。</p><p>《挪威的森林》是一本作者被室长戏称为「村上春花」，也有着黄色封面的盗版书。有人批评这本书肤浅（性幻想读物），责备它肤浅（地摊文学）。我在注意到这些负面评价时才意识到与它的缘分。斟酌一番后我选择坦然承认自己对它的偏爱，我想，你只有在那个年纪、那个状态才能感受到村上表达的一些东西，而且不觉得它无趣、也不觉得腻味。运气好的话，还可以把它当作某些困境的指南，很难说那有多高明，但确实能给人慰藉。</p><p>这算是与过去的和解吗？也并不是。早先接触到的那些晦涩抽象的东西，总需要后面摸打滚爬才能豁然开朗。顿悟把往昔凝固成符号，但曾今的自己并非愚蠢、更不是错误，只是有限。</p><p>我们真的不是错误的吗，还是只是不愿意否定自己呢？我虽不知道答案，但怀疑人即便常说「否定过去」，也没有否定过去的自己。人会合理化自己，而把那些否定归咎于身不由己，将矛盾寄托于他物。——按现在流行的对阿德勒个体心理学的认知来说，你只是选择了这么做。在过往中寻找原因没有任何意义。把人生看作选择确实是一个自由主义色彩浓厚的想法，以此推论也能解释一些大问题（当然我不知道是不是那么一回事）。很难说这是阿德勒本来的想法，现代哲人挖出前人的思想，拭去灰尘、添置自由意志的羽翼——如果企图仅仅靠原因去解释事物，就会陷入决定论的虚无。</p><p>《被讨厌的勇气》说「人的烦恼皆源于人际关系」是阿德勒心理学的一个基本概念，这大概是作者自己的提炼。一些批评的观点认为这是一种自欺欺人的诡计，而且太过消极，很容易被解读为犬儒。一些人把这当作「即便被人讨厌也要活得自由」。不如这样理解：外界的一切都只是「规则」。法律是规则，道德也是规则；你可以活在规则内，也可以活在规则外——但规则总是存在。这世上的大部分规则，确实已经安排好了一个麻醉的人生，足以让人忘记其实我们只活一次。不过这并非在悲观地鼓励大家安稳赴死，如果认识到规则，你完全可以利用规则！呵，这世间就是充满了利用规则的聪明人。当然，你可以打破规则，也可以创造规则。哎，对这个世界的诠释方式实在太多了。</p><p>《挪威的森林》里的角色小林绿子是我最喜欢的虚构人物之一，她大概也不是第一个这样描绘出来的个性，但我总忍不住拿后面从各种作品里接触到的人物去和她比较。「没有人喜欢孤独。只是不愿失望。」这句话就出自绿子第一次和主角渡边打招呼的场景。后来我想，渡边这个假正经，像绿子这么聪明的女孩，他心里的那点东西，人家应该早就知道了吧。不过世界终究是太大了，大到任何自以为的独特都有一个很大的基数，大到任何欲望都早被标好了价钱，大到即便我活得并不长，也曾遇到那么一两个这样的人类。他们活得轻松、坦率。与之相处时总是忍不住想，他们是真的如此天真，还是城府太深？</p><p>天真其实并不讨喜，我在故事里爱上的其实是人物历经千帆后的热诚。因此他们才总能把握住热情的度量——失望过的人才懂得如何制造惊喜。</p><p>但问题在于「认清生活的真相后」为什么还要「爱它」？有人觉得这是一种反抗，有人说是我们赋予了这个过程意义，有人把「忘我」当作目的。也有这样的观点——「爱」是与生俱来的。这样的观点从生物进化的角度解释，说爱是一种态度、能力、是一种个性上的偏好。就像人类进化出恐惧以避险，爱也保留在我们的基因里，好有机会将基因延续下去。我仍然保留也有人不能继承爱的能力这一可能性，但赞同这个观点，如此讨论这些问题才有立足点。</p><p>既然理论上人人都有爱的渴望，艾·弗洛姆在《爱的艺术》里便把问题转向讨论现代资本主义对爱的消解。</p><p>爱不是一种关系，不存在义务。「认清生活的真相」的意思是不对生活抱有期待（有人把这种观点的产生归咎于童年时期父母关怀的缺失），你非得要意识到这点，不然后面的「爱它」就只是空中楼阁。大部分鸡汤讨论的并不是爱，而是被爱，不厌其烦地安慰读者值得被爱。畅销书们长篇累牍地教育大家如何做一个值得被爱的人。</p><p>如果我们把「爱」理解为「被爱」，那么现在这个年代完全不需要「爱」了。「爱」已经被原子化拆分进电影、小说、音乐，甚至一些聊天、陪伴服务。（让我们对机器人技术的发展保持乐观期待）然后会有人拉出原教旨主义的旗帜，说只有在与人的羁绊里产生的爱才是真正的爱——但你得花更多的钱。</p><p>不过，有何不可呢？既然爱是进化而来的，随着进化而去又有何妨？消费社会只是一个过渡的麻醉阶段，最终人类会达到佛教里放下爱欲的境界。《星际穿越》里将爱当作超越维度的能量，大概只是艺术家的乐观想像。</p><p>资本不关心爱，但它很懂得消费者的需要。政府也不关心爱，但它很在乎婚姻。它觉得离婚前应该先冷静冷静。那些科幻小说早就描绘了这样的图景——如果不是因为需要劳动力且若是没有婚姻带来的义务，抚养一个小孩到能够劳动会给政府增加很多负担，政治家们也懒得理睬那些琐碎。</p><p>这个世界其实并不鼓励多样，比如社会和资本有时候还会以一种抹去女性特征的方式来鼓励平权——放弃生育、妳得像个男人一样干活。有人觉得实践自由主义的政府管理下的社会就多样了，大概也是一种偷懒的二元划分。资本主义社会的运转机制鼓励人消费，数字化的年代还鼓励你贴标签，这样他们就可以更精确地给你推送广告。我们完全有选择的权利，选择消费哪种食品、电影、来展示个性。艺术需要资本来体现价值，资本需要艺术来保值。它们互相成全。于是，我们的需求越来越高，我们的口味竟然有了标准，既方便被控制，又容易预测。好耶！</p><p>对，不能免俗。我也会在黑暗的屋子里当键盘侠，用一些宏大的问题逃离现实。听说「人都会慢慢成为自己想成为的人」，我开足了马力狂奔，追逐的脸庞却越来越模糊。我想起伍迪艾伦在电影里唠叨「只有我关心宇宙将会毁灭吗？」人确实很难关注到太长尺度的时间。但即便活在当下，明明是短暂的一生，却往往也如宇宙的毁灭一样离之太远。从世俗意义看，死亡是一个审视自己的好工具，可以让人改变对生命的看法，更恰当地投入生活，但也可能成为焦虑的来源。虽然如果认为死亡是唯一目的，虚无好像也就顺理成章了……</p><p>说了这么多并没有表达啥自己的观点，因为我对生活的看法异常幼稚或者说简单……虽然我觉得了解这些东西很有趣，而且能缓解焦虑，但我并不认同普通人一定要找到一个让自己好好生活的非常有逻辑的、纯粹的理由。人生的意义在于体验、在于创造……甚至说思考这个问题本身就是意义，都是非常好的说法，还带有一种现世关怀。一些流行哲学说「世间万物本质上不分彼此，都在走向宇宙的热死亡，我们可以致力于局部墒减与之对抗（虽然这毫无意义），或者加速它达到这种状态。」这种说法似乎和信仰别无二致，都是把存在当作某种更宏大的、外在的设计的一部分。</p><p>社会需要维护一些普遍意义才能运转，个人如果不能恰当地把自身的世俗意义融入进去，找到自己在这个系统里的位置，自然会产生许多负面的情绪，更何况这世界大大小小的组织都充满了不能顺应变化的教条。我觉得所谓「精致的利己主义者」正是一些聪明人在这种不契合中试图合理化自身的存在而产生的，这样他们才能快乐地生活而且不觉得自己是比喻里的「猪」。甚至还可以在犬儒精神里鄙视别人。但至少，做出选择也许不是真的自由，可「不言自明」的那些东西不审视一下总让我有被控制的感觉。</p><p>苏格拉底认为人性的本质在于理性，追求真理就会自动通往善。有人认为技术的发展会解决社会的不公不义。有观点说搞明白问题并不能解决问题，「为什么」下面总是还有「为什么」（试图解决问题，就不得不忽略一些问题），一直归因又回到了决定论。</p><p>一个年轻人，第一次感觉到整个世界和它的各个部分似乎都一致，互相结合，仿佛觉得自己有了什么真知灼见——倘若我在这胡说八道持有丝毫的这种想法，我也会原谅自己，哎，无知嘛。只是我还是做不到讨论一些细节，挥斥方裘、推演人性，那太自恋了。但也许我是在害怕暴露自己的缺陷吧。知道和行动始终是两回事，我们终将改变，但改变不会来得太快。</p><p>嗐，表达欲收不回手，文不对题、结构诡异。实际上是这段时间的一些读后感。说是「感」，搞不好也是误读。如果有什么值得一提的地方，那肯定是我抄的。如果哪里不对劲，那一定是因为我自己也没搞懂就在胡说。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>她</title>
      <link href="/2021/06/07/summer/"/>
      <url>/2021/06/07/summer/</url>
      
        <content type="html"><![CDATA[<p>她看到了夏天。一些六月，西瓜、汽水，还有关于日历和诗歌的比喻。连续三个夜的雨飘打着窗，直到昨天才放过她的耳朵。出租房的隔音效果并不好。去年这个季节她被疫情困在房子里，四肢舒展在凉席上，偶尔一次午休时总有蝉鸣把童年带进她的梦。她站在一处园子里，右手握着一把小镰刀，头上顶着奶奶给她戴的草帽。一只猫从豆角架间跳了出来，她嬉笑着追了上去。猫总是在她追不动的时候停下来。她蹲着呼唤它，过来呀，过来。猫警惕地望望她又转向天空，随即眼神变得慵懒，坐在地上用舌整理自己的毛。她屏息缓缓朝着猫移动。身后突然传来奶奶的声音「我们要出去了噢。」</p><p>她转过身，然后奔了过去。她看见奶奶提起一个竹篮，猫从生菜里窜出来，匍匐着试图抓一只摇头晃脑的麻雀。她小跑着从菜园进了竹林。镰刀在她的手里变成了捕虫网，裙摆下的凉鞋也消失了。轻风充溢，带出沙沙的响。山泉从她脚趾间流过，她的脚掌粉红，沾着点泥，些许碎石挤在她掌心的皮肤传来一阵令人安心的痒。</p><p>她睁开眼，窗外的阳光裹着一层暮色。夏日的白天最后的光景，夜和昼的分隔总是不够干脆，这暧昧的黄昏。床尾是她的猫，有节奏的呼噜声和起伏挠她脚掌的绒毛。她坐起来，头发散在肩头背后。面上还保持着倦意，这是脸颊上的肌肉最轻松的状态。</p><p>她唤了声「咪咪」，我就醒了。我站起来，弓背释放疲劳。抬头，一声不吭地望了她一眼。我看见她眼眶边的泪痕，这一次来自梦里还是梦外呢？我朝她移过去，每一步都小心着不让爪子碰到她的腿。我用头蹭她的手臂，她便用手掌抚摸我的背做回报。她身上阳光的味道如此浓郁，在她身边，我变得活力又嗜睡，兴奋且沉默。</p><p>我从不询问，她总会主动给我讲起她刚经历的事。我能理解她的情绪，就像她来了我会高兴，她走了我会失望。她的梦啊、生活啊大概也是这样。我喜欢听她聊些开心的东西，因为除了摇尾巴，我不知道怎么做才可以安慰她的悲伤。她的身上，好像有很多走了就不会再回来的东西。</p><p>光线在消逝，窗子的轮廓在她的眼里模糊。我喵喵着唤了几声，她语气温柔，毫无顾忌地随着日落坠入我的心脏。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>近虑</title>
      <link href="/2021/04/24/recently/"/>
      <url>/2021/04/24/recently/</url>
      
        <content type="html"><![CDATA[<p>一直不肯写点更锋利的东西，因为就自己经历而言，总觉得直言某事如何如何，应当如何如何，这种行为要么太幼稚，要么容易惹人讨厌。而我确实是个糊涂且不愿意被人讨厌的人，非要为了表现得明白而去做一些明白的表达，这种行为本身让我感觉很谄媚。我现在也确实没有必要去做一些迎合世界的事情——这种说法其实有点讨巧，因为我本身也没有迎合世界的能力。我觉得我得多加练习，但懒惰、自身的糊涂等各种外部条件给了我逃避的机会。于是我选择逃避。</p><p>逃避吗？不，「逃避」这个说法本身也是一个暗喻。我不是「我本可以」男孩，我不会拿过去的无数个可能性搪塞现在，我摊牌了，我其实是害怕失败。等等，我害怕失败吗？</p><p>有一丢丢。但更多的其实是害怕竞争。</p><p>在必要的时候，我可以把这个答案交给别人，表现得坦诚且做好了那早已是过去式的准备。可内心那「这些竞争毫无意义」幼苗，仍然在不断生长，挠我的心脏。</p><p>我相信自己并不虚无。我曾对「断舍离」这种行为感到困惑，因为我一直是从无到有，并没有一个机会让我懵懂地拥有很多，然后猛然意识到，啊，我应该抛弃点什么了。我想我也天生是个佛陀的信徒，因为我也一直没有什么欲望。念书的时候，我把自己所有想要完成的事物列了出来，唯一需要的外界帮助是 2 到 3 万块钱。里面实际上没什么非要不可的东西，而且到了现在，里面有些项目我其实也已经没了兴趣。</p><p>我还曾假装成大人，说「现在这个时代，如果你不精致地利己，很难真正地过得快乐。」我在犬儒和实用里汲取到养分，准备大干一场。但我做不到。可以说，我觉得这太麻烦了。也可以说，我并不擅长这回事。对呀，这不就是逃避嘛。这世上有千言万语来批判、来讽刺这种行为，可我居然不觉得这无耻。我究竟是怎么了呢？</p><p>我是假的吗？在大多数愿意注意到我的人眼里，我是假的。也许有那丝毫的可能性——我就是真的呢？但问题在于——我其实不确定自己是不是真的。对于大部分我不理解的事物，我都可以把它当作黑箱。唯独对于我自己，关于那些我不理解的东西，我很难表示认同。</p><p>我有答案，我有很多个答案。其中几个漏洞较少的答案是我最近的依靠。寻找答案也确实是件有趣的事情。今年立了一个想要和别人多交流的 Flag，也是想要以这种途径去得到一些指教。互联网还是一个很好的渠道，但我已经很久没有善加利用了。之前为了追漫画打开了贴吧，回顾并删除了许多以前的帖子。我想，那时我多么年轻啊，却总是说着一些老气横秋的话——直到最近还有人点赞呢。如果不是看到自己的昵称，我搞不好会觉得这肯定是个很了不得的人吧。互联网又是多么虚假啊。我无法回到那种精神状态了，却又在尝试着捡起当初拥有的一些东西。</p><p>私聊别人要游戏的存档、求大佬带、复制粘贴水贴水经验……都是些冒犯别人的事情。但羁绊，可能就是需要从冒犯才能开始建立？我还不大明白，先从包装冒犯开始学习吧。</p><p>之前遇到了一个看完《缘之空》去了解伦理的家伙，想到自己总是逃避这些问题——意识到了这点，我便试着去面对。我觉得我内心其实是认同「道德相对主义」的，但是我并不会用它武装自己。我觉得它冷漠、无趣，我觉得在谈论道德时就应该谈论「我们应该如何如何」。在一个读者群看到这样的见解，大意是因为法律的有限，所有才有人们对侠义的痴迷。我也见到过相反的说法，说侠，是对法律的漠视。</p><p>「程序正义是对我们无能的安慰」我觉得这是一个非常有鼓动性且很虚无的观点。我们是无能的，接受这一点。保持敬畏地去完善这个流程，让我们接近正义。妄图通过某些手段（比如侠，比如暧昧的条文）去网罗一切，是无知且自大的。</p><p>我对相对主义的不喜欢就在于它对我在乎的许多事物的破坏，但我现在的水平并不能说出太多所以然。正义是没意义的吗？科学是没意义的吗？它产生了好多不可证伪的东西，好虚无，我不喜欢。我也接触了许多批评相对主义的内容，大多读不懂，我只能停留在这一步——我不喜欢这样的世界。</p><p>事物的复杂性总是打消我讨论的热情。我不会因为某件事物非主流或过于主流而否认自己对它的热爱，但问题在于，我热爱的作品大多都在这个社会的红线以内。因为自己的口味、自己的道德感恰好和所处的社会需要达成一致便沾沾自喜，我不喜欢这样。我讨厌「反正我也不 XX」这样的说法。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>评价外貌不礼貌</title>
      <link href="/2021/03/14/nothing/"/>
      <url>/2021/03/14/nothing/</url>
      
        <content type="html"><![CDATA[<p>接触到的大部分同龄人都认同「随意评价别人的外貌是很不礼貌的行为」，但少有人觉得评价一个人的身体素质不礼貌，几乎没有人认为评价一个人的性格不礼貌。女孩男孩们拒绝外貌歧视时表现得独立又绅士，转头批评一个男人娘、评价别人无趣不免让人失望。</p><p>把视线拉进一所学校，身材相貌、不及格的体育成绩、阴郁不合群是嘲笑与霸凌的频发地。然后步入社会，似乎在一定程度上评价外貌变得有点危险了（但当然完全没杜绝），可抬不起水桶的男孩、不喜欢说话的女孩仍然是能让大家放心嬉笑的绝佳话题。</p><p>可能在一定程度上，社会已经不再像校园这种充满了荷尔蒙的地方一样需要俊男靓女了，但它仍保持着野性，需要劳动力、需要集体主义。</p><p>一个人格的塑造不仅要花费漫长的时间尝试与自己和解，还要不断地接受外界的碰撞。想起了那个人参和萝卜的漫画，如果你是人参就为自己是人参而快乐，如果你是萝卜就为自己是萝卜而快乐。会有傲慢的人说他们不是在评价你，只是指出了事实，你大可以宽心地接受这些事实。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好好生活</title>
      <link href="/2021/02/27/life/"/>
      <url>/2021/02/27/life/</url>
      
        <content type="html"><![CDATA[<p>去年下半年，就像在这数年间反复做的那样，我又投入到一个新环境，与一群性格迥异的陌生人相识。我一直觉得「性格」不过是从你为人处事的方式中提取出来的标签，我抱着这种想法看待别人，也一直以这样的心态做我自己。从某种意义来说，新环境其实是一个非常好的与外界打交道的练习场所。持以「我们只活一次，我们永远年轻」这样的想法，任何一个举动都可以看作是为了丰富决策库以备将来。不管从哪方面来说，旧世界里的任何改变都会显得刻意、浮躁。而聚焦于人——人们总是更习惯于从一而终的人设。</p><p>这段日子里我在干嘛呢？排除两点一线的琐碎，大部分时间都在漫无目的地冲浪。于我而言，网络从一个孤僻小孩的避风港变成了很多其它的东西，好在它也始终是一个有趣的玩具。有一阵子我惊讶地发现自己似乎没什么真正的爱好——真正的爱好。啥也不想干，觉得一切都没意思的紧。只有下班走路回住处的那十多二十分钟，戴着耳机听些音乐，才感觉到些许惬意。高架桥的电梯晚上八点就下班了，黄昏时某个地方常有人拍照，卖烤红薯和煮花生的地方摆起了烤鱿鱼的摊子……日常反复，我总在路上看到熟悉的场景，心底冒出昨天也冒过的念头。</p><p>爱好这种东西也有倦怠期吗？也许我自以为是的爱好就像大多数中学时的恋爱一样，它产生并维持于占有欲和优越感，而不是真正的爱。记忆也相当配合且熟练地清扫了我脑子里的各种书袋，于是那一个个名字、一段段故事都消失了，就像我也曾反复练习过的数学公式。</p><p>和林酱在元旦看了电影《心灵奇旅》，我戴着两幅眼镜坐在第一排，只有把头斜仰成一个怪异的姿势才能舒服地看清楚画面，然后保持着这个别扭但缓解脖子酸痛的姿势泪流不止。在电影院门口，林酱又重复一次之前也提过的话，「好好生活」。上一次说这句话时，其实暗含着苦中作乐之意。我想这不合语境，然后猛然地，一些不适合我的呢喃又不断浮上心头。如果这就是解答的话——嗐，如果这就是解答的话，那些绝境里的人又是怎么活出意义来的呢？就算是健康，也不是理所当然的啊。</p><p>我仍然双标，经常拒绝相信我看不见的东西。就像不加训练的人都倾向于惰性，似乎一个家伙如果想要过得真正开心，现实总是裹挟他朝精致利己的方向狂奔。</p><p>我说我花了这么大的力气才接受自己，怎么可能随随便便就改变。也许我是真的接受了自己，也许我只是不想让自己之前的投入显得廉价从而拒绝改变？一切都有可能，而且后者听起来反倒合理些。</p><p>老谭说尝试在爱情上建立并维护一段关系麻烦的地方就在这——往往需要你做出更多的改变。当然，两个人都会改变。但在大部分情况下，彼此都觉得一个人需要承担两个人的负面情绪和疲惫，生活变得更复杂了。而社会总是宣扬无私与付出——那种一件麻烦事由两个人来承担的健康关系似乎总是少有的。老谭倾心于独立的灵魂，但这样的灵魂往往看不上，也不需要他。</p><p>老谭给我讲了一个笑话，他说是自己编的，但模仿了伍迪艾伦。大意是这样的「时间是相对的。比如婚姻会使时间因为彼此忍受而显得更长，这样双方都有了更多的时间来玩耍。一个人的时候最多只会感到寂寞，而再完美的爱情都会让人体会到哀愁、失望等情感。综上，婚姻的性价比更高。如果可以的话，结婚，但不要恋爱。」</p><p>上周和一神交已久的大学同学见面，有种网友面基的感觉。聊到他说看完《缘之空》后找了很多谈伦理的书来读，我着实吃了一惊，觉得这家伙实在太有意思了。然后想到我总是下意识地拒绝去考虑这些问题，我不能接受这些东西，我认为这是不道德的，但我没有也不会去研究这些东西。比如关于伍迪艾伦的负面新闻。我本可以就作品聊作品，就人品聊人品。可我总是拒绝去看那些负面报道，心里隐隐期待他不是那样的人。很多东西都是这样，房间里有大象，但我不去看它，仿佛它就不存在。</p><p>嗐。就在我一边写着这些有的没的一边浏览网页的时候，突然看到了吴孟达先生去世的消息。长大的过程总是伴随着一边看着比自己年轻的人功成名就，一边目送自己熟悉的人离开。父亲对我说了些生老病死的事，我不大喜欢他讲得那么赤裸，但也无言以对。之前我说所谓成长不再是假装很喜欢喝啤酒，而是不得不独立做出很多抉择，并且承担它们带来的任何后果。而现在，虽然我一直想要逃避，却也不得不接受，成长还意味着去接受各种各样的期望和许许多多的责任。</p><p>唉，太过私人化的事儿我总是不想表达得太清晰，我又开始暗喻，开始拧吧。我借用各种意象表达自己的情绪，我看到你说自己在海边观月，便急忙打开窗，似乎能闻到月亮带来海风的咸味。而你一定性感得像是图书馆里被人打开但忘记归还的书籍，随意而神秘。我则俯视着我，他是个假装热情的性冷淡，和我正好相反。我咚咚咚地敲门，他连眼皮也不抬一下。他想虚度，那就让他虚度吧。</p><p>可我还不能允许自己以俯视的眼光看待这个世界，我只能悲悯我自己。不如把一切都降维到「孤独」这一层次，表现得自己似乎在智识上占据高位。「孤独」多普遍啊，足以囊括所有人所有事。然后我就像所有刻板印象以及故事里提到的那个人一样，参加聚会却远离人群，重复默念着「他们根本不懂我有多擅长玩摸乌龟」。我有多长时间没做过那种英雄式的美梦了呢？梦中的我拯救了世界，悄然离去，深藏功与名。美梦和梦想两个词没多大关系但消失的时机倒是出奇地一致。有点伤感，在这世间的快乐又少了一大块，嗐，早就少了一大块。有点陈词烂调，但世事确实大多如此——当你意识到的时候，早就已经晚了。</p><p>我狭隘、偏激，总是自以为是地理解大人，每当现实和猜测吻合时，我就不动声色地雀跃。我想学着像他们一样表达同情，但什么也不做。可我做不到。一想到将什么都不做，我甚至连同情都不好意思表达。而不够生活的用词，突然的热情，总让我觉得谄媚。「会有更高级的快乐」这种说法我能接受吗？「快乐本身是无知才有的特权」这种说法我能接受吗？</p><p>这篇胡扯没啥主题，大概算是对这阵子一些片段的总结。标题取林酱说的「好好生活」，那我意识到自己的生活方式了吗？有审视过自己的生活方式吗？嗐。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强行聊聊阅读</title>
      <link href="/2021/01/10/start/"/>
      <url>/2021/01/10/start/</url>
      
        <content type="html"><![CDATA[<p>我又回到下不了笔的状态了。以前我会说只要我真诚，写下当前的状态，那就是有意义的，可最近我总是误觉得自己能够看到一些事物更里面的东西——但越来越觉得这一切都太复杂，我做不到毫无顾忌就能轻松地得出结论。</p><p>但我还是有好奇心，有表达欲。那让我抛开什么什么主义，立足于一个小点聊些东西吧。</p><p>聊读书吧，可能是我最近才开始注意，身边频繁阅读的人越来越多了。</p><p>之前我其实一直不大清楚为什么那么多人鼓励读书，我不知道阅读的「意义」是啥。「意义」这个词可能有点暧昧，他们会说「没有意义就是意义」，「思考意义本身就是意义」——这不是我想说的。</p><p>我不知道别人是抱着怎样的心态来鼓励别人读书的。他们说读书有用，是指那些技能方面的书籍吗？</p><p>我稍微谈谈。</p><p>我现在不大能赞同「读书最重要的是大部分内容都忘记了，最后留在你心里的东西」这类说法，我觉得它们太模糊。<strong>这种说法的唯一用途在于鼓励大家阅读，培养大家的阅读习惯，给予慰藉。</strong> 不要管意义，你只要去做。</p><p>而「通过阅读来提高修养」这种说法背后则蕴含着一种道德歧视。「阅读」这个动作或行为本身并没有什么深刻的含义，但文字是信息密度相对高的载体，它还拥有其它信息载体没有的一些优势。当我们讨论「阅读」时，如果只愿意沉醉在原教旨主义的优越感而不去分析优势与不足，那一定是有问题的。</p><p>批评小视频，批评网络——批评媒介，反思是必要的，但是：柏拉图批评过「书写」，叔本华批评过「阅读」……而且我觉得他们批评得有道理。可我们大多数人都只是普通人，达不到这样的程度。我又想起许多的主义、各种教旨，我从不觉得自己信奉它们——但我会向它们的一些说法靠拢。我还想起伍迪艾伦的电影里有一个老笑话，大意如下：</p><p>「『大夫，我兄弟疯了，他以为他自己是一只鸡。』然后医生说：『那你怎么不把他带来？』那家伙说：『我是想带他来着， 可是我需要鸡蛋啊。』」</p><p>尽管世界偶尔会表现得疯狂甚至荒谬，但我们还是不得不经历这一切，因为我们大多数人都需要鸡蛋。</p><p>说回阅读吧。存在是有原因的——我认为阅读是有目的（动机）的，即便一个人不觉得，下意识里也一定有。这是我的观点。这里的目的并不带功利色彩，它只是一个立足点。有个朋友说他觉得「目的」在中文里的意思并不比「意义」这样的词更明确。我觉得他说的有道理。我想表达的是我们阅读的深层次动机——人为什么想要去阅读呢，总有个基础吧？</p><p>对于那些尚未意识到的目的（动机）来说，阅读可能是抚慰孤独的方式，逃离现实的途径，或仅仅为了填补内心的优越感等等。</p><p>而能意识到的目的（动机），我觉得分为三类。一，消遣。打发时间，满足求知欲、好奇心都算消遣。二，用于生活。技能提升，厚黑啥的都算读以为用。三，解决人内心的焦虑。</p><p>这里不展开了。然后最后我不赞同「书读百遍，其意自现」这种说法，我觉得只有经历和道理相互应证才能丰富我们自身。</p><p>还有两个说法，一个是把书读厚，一个是把书读薄。中学时我以为的把书读厚，就是在一本书上写上自己的想法，做上许多的笔记。我现在的一点浅薄看法是，一本好书总是从抽象的高度论证出道理，而那个道理下有着许许多多的例子，这就需要读者自己的经历或者收集资料去比对佐证。这样，一本书就读厚了。</p><p>而把书读薄，则是读者经历得多了，知道的多了，就反而越能理解书里的许多想法，这样读上几遍，就能把一本书的内容吸收掉。这样，书就读薄了。</p><p>我觉得一本好书不是给人认同的，最好是给人启发。其它很多事物也同理。现在的意见领袖太多了，他们生产各种大家能认同的东西。我们消费他们的内容的同时，我们也是他们的商品。算法，算法更甚。</p><p>如果没有接触一手信息的能力，尽量消费那些能告诉我们信息来源的二手商。</p><p>很多搬运工不愿意告诉大家内容来源。比如转载小视频的、搬运公众号的，甚至明明别人允许转载还要把人家作品的水印打码——因为他们害怕你越过它去来源。抛开法律和道德的评判，<strong>他们赚钱的基础是信息壁垒，这层壁垒是很容易打破的。</strong>——只需要一丢丢好奇心。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外星人的思维是透明的</title>
      <link href="/2020/11/08/robot/"/>
      <url>/2020/11/08/robot/</url>
      
        <content type="html"><![CDATA[<p>「一定有很多后知后觉的事，比如中学时对女孩的好感和当时自以为读懂了的名著。」她这样对我说。</p><p>能遇到一个见面后可以坦诚地询问「你最近有在读什么吗」的家伙是很难得的，特别还是一位异性。我当时心里盘算着很多不符合当时气氛的想法，而且说真的，没太懂她话里的意思，但还是认真地盯着她，用期待的眼神做出鼓励她接着说下去的样子。</p><p>可是我被她看穿了。</p><p>她说「别来这一套，你可能觉得倾听是一种聪明的方式……别偷懒，告诉我你自己的想法，真实的想法，经过思考的想法。」</p><p>相比尴尬，我当时庆幸的感觉要更浓烈些。想着还好对方误以为我在使用某些小诡计，而没有看出我其实一无所知。</p><p>我先承认说自己对这玩意了解不深，然后靠着自己在书籍和网络里了解到的东西纸上谈兵了一翻。她摇了摇头，像是有点生气了：「说你自己的想法！」</p><p>我后来懂她的意思了。把她送走后我去过一个人人都热衷讨论历史和政治的星球，人人都在谈论以确认自己确实可以谈论。身处其中时我冒昧地觉得他们都很肤浅，每个人都在重复新闻里说的话。我一如既往地沉默，有点怀念她当时板着脸的样子。恍然间，看见她站了出来，干脆利落地堵住了我的表达欲。「你要先思考，说出你自己的想法！」</p><p>宏大的话题犹如春药，我又差点迷失在这场跨种族精神群交里。</p><p>和她相处的那阵子，我曾草草翻过的名著一部也没派上用场。有一次和她聊起一个话题，好不容易动了脑筋，说出一句自认为非常有道理的话。她却冰冷地指出这个观点是由谁在哪个年代提出来的，然后还举出了几个对于这个观点非常尖锐的例子。直到我再三保证这确实是自己思考后的产物，然后给她细叙了自己的思维逻辑，她才缓和了脸色。</p><p>她呼了口气，肯定了我，然后说道：「确实，现在这些东西都不重要。文学领域一百年前就没有人类的参与了。即便是当初那个人力创作的年代，你能想到的也早就被无数人描绘过千百遍。可是你不觉得，这很有趣吗？我是说，思考。」</p><p>我知道她的意思，最近有个领袖是机器人的文艺复兴党派，崇尚人力年代的「思考」，宣传口号是「思想自由」，针对现在这个概率社会提出了「不要黑箱政治」的口号。这个党派不仅吸引了许多运算能力弱的机器人，也吸引了不少年轻的自然人。机器人渴望平等，希望能通过「思考」弯道超车；年轻的孩子看到那些人类原来也很厉害的信息便激动不已，产生了强烈的共鸣。</p><p>我终于松了口气，却有点失望。眼前的女孩被符号化为一个追求流行的标签，进入到我熟悉的领域。于是我装作坦然地问她：「你是什么时候实现二次启蒙的？」</p><p>她反问：「二次启蒙？」</p><p>她当然不知道这个词，因为这是我刚生造的。</p><p>我说「就是什么时候自我意识觉醒，意识到这些的……比如思考很重要这类。」</p><p>她说「当然是从我了解『思考党』后，我第一次认识到围绕着我们这个社会的东西。比如说人类和机器人一起生活……你知道吗？听说人力社会是没有机器人的哦，而且那个时候他们还会担心有一天机器人会毁灭人类。」</p><p>我知道，其实人力时代也是有机器人的，只是没有进化到现代社会里这么高级的程度。</p><p>「不是所有东西都是理所当然的，比如我们现在的社会是由一台超级计算机和一个普选出来的代表团共同治理的，难道这就是最好的方案了吗？超级计算机仅仅诞生了一百多年 —— 地球上的智力活动就停止得差不多了。搞笑的是，计算机认为研究算法优化的对社会的贡献太低，应该停止，代表团就真的停止了。</p><p>我怀疑它做出这个判断是因为程序出了 Bug，导致它伦理判断模块失效。仔细想想，人类不才是阻止现在这个社会进步的唯一障碍吗？这样下去人类说不定真的会被计算机消灭。如果我们当时选择了另一条路，可能我们现在已经住在外星了吧？可现实呢？人类越来越蠢，贪图享受……」</p><p>这种说法我太熟悉了，「人类越来越蠢」、「网民不会独立思考」、「没有同情心」……她也是一个有着知识分子的骄傲，却没有知识分子的怜悯的家伙。这么说的时候，也一定不包括她自己吧。</p><p>够了够了，我改了一下参数，重新点击编译的按钮。她的双眼一闪，开始热加载代码。</p><p>「我觉得这是二次启蒙，是自我意识的再次觉醒。每个人都应该经历这么一次，去质疑所有的理所应当，然后选择抛弃或者接受它们中的某些部分，继续活下去。」她这样对我说。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1024</title>
      <link href="/2020/10/26/1024/"/>
      <url>/2020/10/26/1024/</url>
      
        <content type="html"><![CDATA[<p>痔疮因路途颠簸被自行车坐垫磨破的夜晚，凸起的颈椎在围巾上顶出一个不大不小的凹点。强风拂面，犹如重力拉扯身体。孩子入眠，星星睁眼。别读我，理解我就是杀我。裹着被，抱着夜。双腿在夜里依偎，手指总婆娑键盘。没有人应该过劳死在周六的白天。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈应届生与社保卡办理（以成都为例）</title>
      <link href="/2020/10/15/uebcka/"/>
      <url>/2020/10/15/uebcka/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>这篇文章主要谈了以下几个问题：</p><ol><li>怎么办理社保卡（主要困惑处在于之前办过社保卡现在该怎么做）</li><li>归属地转移与参保关系转移</li><li>老家缴的医保费用，算是缴纳社保吗？</li><li>社保卡和医保卡有啥区别？</li></ol><p>本文源于自己网上了解到的消息与经验总结，难免疏漏或错误，还望朋友们不吝指正。希望能对看到此文的朋友有所帮助。</p><h2 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h2><p>主要简单聊几个我在社保卡办理过程中感到困惑的概念，建议有尝试过了解社保卡办理以及感到过困惑的朋友往下看看。</p><p>不管是啥原因，反正毕业了，工作了，现在你决定自己办理社保卡。</p><p>办理社保卡的前置条件有两个：以前办理过，以前没办理过。</p><p>以前没办理过那就好整了，通过线上或者到能办理社保卡的银行去柜台直接办理即可。</p><blockquote><p>成都可以关注微信公众号 <strong>成都市 12333</strong> 申办社保卡。</p></blockquote><p>那以前办理过呢？</p><p>不少人以为自己没办理过社保卡，结果去申请时却被告知办理过了……对应届生来说，以前办理过社保卡大概就这两种情况：<strong>1、学校办的；2、老家办的。</strong></p><p><strong>怎么确认自己办没办理过呢？</strong></p><p>1、直接去银行柜台查询。</p><p>2、通过线上查询。（成都可以关注微信公众号 <strong>成都市 12333</strong> 查询。）</p><p>要是办理过社保卡，也有两种情况：1、社保卡未激活；2、社保卡已激活。</p><p>激没激活我们先放到一边，关注另一件事：<strong>社保卡的归属地与你现在缴纳社保的地区。</strong></p><p>如果你现在拥有的<strong>社保卡的归属地和你现在缴纳社保的地区在同一个省市</strong>，那么直接激活现在的社保卡就 OK 了。</p><p>如果你现在拥有的<strong>社保卡的归属地和你现在缴纳社保的地区在同一个省，不同的市</strong>，你可以把卡激活后，办理<strong>归属地转移</strong>至缴纳社保的市。如果你的卡尚未激活，也可以把卡注销了，在缴纳社保的市重新办理。</p><blockquote><p>成都可以关注微信公众号 <strong>成都市 12333</strong> 办理社保卡归属地转移。</p></blockquote><p>如果你现在拥有的<strong>社保卡的归属地和你现在缴纳社保的地区在不同的省份</strong>，你可以直接在缴纳社保的省市直接办理社保卡。</p><blockquote><p>因为现在可能同一个省社保系统已经联网了，但不同省份之间仍不互通。</p></blockquote><hr><p>对于大部分应届生来说，对社保卡的了解到此就差不多了。但是还有一个概念 —— 参保关系转入。</p><p>由于现在的社保政策，倘若你在 A 省的 W 市缴纳了几年社保，现在你又到了 A 省的 Q 市开始缴纳社保。按上文的说法，你可以通过 <strong>社保卡归属地转入</strong> 在 A 省的 Q 市使用之前的社保卡。但是 —— 仅办理归属地转入，之前在 A 省 W 市的参保缴费记录是不会同步过来的。</p><p>如果你想将之前的 <strong>参保关系（包含缴费年限和余额）</strong> 也弄过来，就得办理 <strong>参保关系转入</strong>。</p><p>同样，参保关系转入可以去柜台，某些地区也可以线上办理。（成都可以下载 12333 APP 线上办理）</p><p>参保关系这玩意涉及到社保政策 —— 养老金的发放。比如你可以领养老金了，但是你之前在多个地方缴纳过社保。政府会<strong>以你缴纳年限最后达到十年的那个城市的平均工资水平为参考</strong>来给你发放养老金。如果你每个地方都没达到十年，会把你的养老保险关系和资金转到你的户籍所在地按规定给你发放养老保险。</p><hr><p>因为应届生一般之前都没缴纳过社保，所以大多数朋友不涉及这一块。</p><hr><p>谈到应届生缴纳社保的话，还有一个常令人感到困惑的地方在于：<strong>我在老家缴的医保费用，算是缴纳社保吗？</strong></p><p>在老家或者学校里缴纳的医保费用是不算缴纳社保的。在老家缴纳的一般是「农村合作医疗保险」或者「城镇居民医疗保险」，这个缴纳一次只管一年，也不会涉及到参保年限。学校缴纳的一般是「大病保险」，同上。</p><p>大致来讲，<strong>缴的医保费用只激活了部分医保属性，并不涉及社保。</strong></p><hr><p>还有一个问题：社保卡和医保卡有啥区别？</p><p>大多数时候这两个说法都指的<strong>社保卡</strong>。因为现在社保卡已经包含了医保的功能。即便硬要从概念上区分，实际上社保卡也可以当作医保卡来用。</p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 自己浅见 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>而秋</title>
      <link href="/2020/10/08/autumn/"/>
      <url>/2020/10/08/autumn/</url>
      
        <content type="html"><![CDATA[<p>长满了石苔的巷子<br>白昼越来越短的秋季<br>装过猫和毒药的车厢<br>途径能看得见星星的夜<br>枕着诗集的乘客<br>逃往清晨<br>滑倒在石板路上的土狗<br>没有梦见乡愁的人</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蝉鸣将梦涂满儿时的夏天</title>
      <link href="/2020/08/15/summer/"/>
      <url>/2020/08/15/summer/</url>
      
        <content type="html"><![CDATA[<p>他把早餐定义为醒来后的第一顿饭<br>他大块的时间被挥霍在想像里面<br>他有妄想、有计划、有梦<br>却从未付诸实践<br>他喋喋不休 以掩饰孤独感<br>他思考、写作 是应对焦虑的手段<br>他七岁时蹲在地上瞅蚂蚁<br>觉得做着不亚于拯救世界的工作<br>他十六岁时伏在课桌做卷子<br>想像着未来的三点一线<br>他如今将一天七三分<br>忙于生存<br>他有时候感觉忙得毫无意义<br>生存也毫无意义<br>他没有悲伤、没有喜悦、没有心安理得<br>他邀请书上的名字来脑海里相见<br>他感受到许多双或冰冷或温暖的手<br>带来穿越了时间的抚慰<br>他的第一个问题还没结束<br>无数的困惑接着涌现<br>他的优越感燃起了 又很快熄灭了<br>他的表达欲燃起了 又很快燃尽了<br>他明白了 他总是误以为明白了<br>他忘记了 他总是想起于不经意间<br>他以为自己从来不曾被理解<br>他以为周围的人全是笨蛋<br>他因此觉得自己独特<br>他因此认识到自己的平凡<br>他害怕自己并非明珠而不敢刻苦琢磨<br>他又有所期冀 遂疏拒人群 甚至想要远离人间<br>他也曾用「如果」来搪塞现在<br>他也曾立志与「要是」一刀两段<br>他想起了靠着墙自省的夜晚<br>他想起了耳机里的无人声环<br>他已经三年没有得过感冒<br>他自喻喜欢读书 其实书页没翻过几篇</p><p>这才是你啊朋友<br>只有你知道的你<br>你终于感受到你<br>你尝试着认识你<br>你不再问为什么 却没有停止思索<br>你说 用生活充实自己<br>你不能下定决心<br>你的怀疑多过问题<br>你质疑 质疑一切 质疑「质疑」本身<br>你看着你 又看向外面<br>你没有继续向外看<br>你说 哦对 这是「你」<br>「那我在哪里呢？」</p><p>他来到三伏天 连手心也开始冒汗<br>人流像是齿轮在带动城市旋转<br>高楼 挡住云彩约会视线<br>也阻止了他抬头的打算<br>却没能止住 天空被梦涂满童年</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对 React 的初步理解</title>
      <link href="/2020/07/25/start-react/"/>
      <url>/2020/07/25/start-react/</url>
      
        <content type="html"><![CDATA[<h2 id="通过-javascript-写页面"><a class="markdownIt-Anchor" href="#通过-javascript-写页面"></a> 通过 JavaScript 写页面</h2><p>在 React 中，页面的编写被融入进 JavaScript 代码。</p><p>比如在一个 HTML 网页，写一个如下的简单界面元素（标签）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">没错，这就是一个简单的标签。</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 React，会这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> element = React.createElement(<span class="string">'h1'</span>, <span class="literal">null</span>, <span class="string">"没错，这就是一个简单的标签。"</span>);</span><br></pre></td></tr></table></figure><p>而在 HTML 中，要使如上的 <code>h1</code> 标签在网页上展示出来，一般会放到网页结构里：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">没错，这就是一个简单的标签。</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 React 中，需要使用 <code>ReactDOM.reander()</code> 函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> element = React.createElement(<span class="string">'h1'</span>, <span class="literal">null</span>, <span class="string">"没错，这就是一个简单的标签。"</span>);</span><br><span class="line">ReactDOM.render(</span><br><span class="line">&#123;element&#125;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>而 React 引入的 JSX 其实是对 <code>React.createElement()</code> 的封装，上面的效果如果使用 JSX，代码可能会是这样：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>没错，这就是一个简单的标签。<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">ReactDOM.render(</span><br><span class="line">&#123;element&#125;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>看上面这段代码，我们写 HTML 标签的方式和以往在 HTML 页面中编写是类似的，让人稍微惊讶的是，它 <strong>将标签赋值给了一个 JavaScript 变量</strong> 。这是 JSX 提供的写法。</p><p>回顾一下，按我的简单理解，React 做了一件事 —— 把 HTML 标签的编写融入 JavaScript，为此，提供了 <code>React.createElement()</code> 。</p><p>React 提供的 JSX 则对 <code>React.createElement()</code> 又进行封装，使 HTML 元素的编写符合以往的编写方式。（而不是传参这种别扭的方式）当然，JSX 的功能非常强大，条件渲染、列表渲染之类的这里就不细表了。</p><p>现在达到的效果便是：通过 JavaScript 写界面，且实际编写方式和以往在 HTML 中操作差别不大。</p><h2 id="组件"><a class="markdownIt-Anchor" href="#组件"></a> 组件</h2><p><strong>将页面的编写纳入 JavaScript 后，界面和逻辑便被统一为 JavaScript 代码了。</strong> 一个组件往往封装了界面、状态、逻辑，在 Vue 中，一个组件就是一个 <code>.vue</code> 文件，而 <strong>在 React 中，一个组件就可以是一个 JavaScript 函数或者一个类</strong> 。</p><p>React 有两种组件：函数式组件，类组件。</p><p>还是拿上面的 HTML 标签举例，把它封装为一个函数式组件，可能是这样：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Come</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>没错，这就是一个简单的标签。<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装为类组件则像是这样：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Come</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>没错，这就是一个简单的标签。<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得注意的是，所有的 React 组件都必须是 <strong>纯函数</strong>。纯函数意味着该函数对于给定的输入，都产生一个相同的输出。简单来说，该函数内部会用到的变量，外部都不能修改。不然即便每次都给一个确定的输入，外部改变了里面会用到的变量，它的输出也会有变化。<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><p>这也是 React 强调的「<strong>数据的不可变性（immutable）</strong>」。</p><p>这儿函数内部的变量在 React 被称为 <strong>局部状态</strong> 。在官方文档 <a href="http://react.html.cn/docs/state-and-lifecycle.html" target="_blank" rel="noopener">状态(State) 和 生命周期</a> 中，由函数式组件引入到类组件，简单解释说「类定义的组件有一些额外的特性，比如局部状态。」。我觉得它为了入门把这儿简化了，因为函数式组件也可以通过闭包实现自己的局部状态……</p><blockquote><p><strong>可能我理解错了。</strong></p><p>函数式组件和类组件从内部来说有什么区别，我也没深了解过。</p></blockquote><p><strong>将组件抽取为类后，组件的扩展就可以使用继承来实现了。</strong> 这点是不同于传统 HTML 编写的一个有趣之处。虽然 <strong>官方并不建议使用继承来扩展组件</strong>。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>上面就是我对 React 的初步理解，也是我初次接触 React 感受到的，不同于我之前接触过的界面编写方式（传统界面编写方式、Vue）的地方。</p><p><strong>当然，理解可能有误。</strong> 保持敬畏，先到这吧。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>纯函数是函数式编程中一个核心概念。 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 自己浅见 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈 Linux 与 GNU/Linux</title>
      <link href="/2020/07/22/GNU-Linux/"/>
      <url>/2020/07/22/GNU-Linux/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>之前看到提问「Linux 与 GNU/Linux 的区别」，当时刚好在读《自由软件，自由社会：理查德·斯托曼选集》这本书，里面提到了这个，就按着记忆写了个回答。</p><p>以下算是读书笔记吧……</p><p>虽然我常觉得对着一个定义深究它到底是啥玩意没太大意义，但是导致这种结果的这个过程还是很有趣的。就像是「这也太像我的叔叔奥斯卡了吧！」，没什么技术性质的偶然被民意裹携成为官方钦定的例子数不胜数……「动画」还是「动漫」？「ins」还是「IG」？</p><p>不过在当前的环境下，任何一个偶然都会被当作（背后势力）营销就是了……</p><hr><h2 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h2><p>百科版：<a href="https://zh.wikipedia.org/wiki/GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0" target="_blank" rel="noopener">WIKI_Linux 命名爭議</a></p><p>首先引入自由软件（free software）这个概念，注意是「自由软件」而非「免费软件」。自由软件意味着用户可以自由地对该软件进行使用、复制、修改等。</p><p>Richard 是个代码界的革命者，一生都在为「<strong>消灭代码私有制</strong>」这一目标奋斗，他倡导自由软件，那要做自由软件得先做个自由操作系统啊，你软件是自由的，运行在别人的非自由操作系统也不大合适吧。</p><p>为了这个目的，Richard 便尝试着组织开发一个自由的操作系统，这个操作系统被命名为 GNU。</p><p>实际上，GNU 往往指代着自由软件这一整个计划甚至思想 —— 即消灭代码私有制。</p><p>比如 GNU General Public License，缩写是 GPL，就是基于 GNU 的一种软件分发协议，用这个协议的话就代表你的代码遵循 GNU 的哲学，用户可以随意地使用、复制、巴拉巴拉……</p><p>GNU 是 「GNU is not Unix」的缩写，Unix 是当时的商业操作系统，GNU 这个名字就代表着与私有操作系统的界限划分。（有那味儿了）</p><p>GNU 开发到后面就差一个内核了，这个时候项目组也正在做自己的内核 Hurd，不过 Hurd 离可用还有一定距离，<strong>刚好 Linus 的 Linux 内核也发布一阵子了，完成度也不错，就使用了 Linux。</strong></p><blockquote><p>当时 GNU 已经完成了除操作系统内核外的大部分软件，比如 Bash、Glibc、Gcc……</p><p>Linus 在上面这些软件的基础上开发出 Linux。（GNU 兼容 Unix，所以虽然 GNU 操作系统尚未完成，但上述这些软件是可以运行的。）</p></blockquote><p>（PS：Richard 当时本来想提议命名项目组开发的内核为自己女朋友的名字，后来这事因为用了 Linux 就泡汤了，而且 Richard 后来也和女朋友分手了。）</p><p>使用了 Linux 内核的 GNU 便是 <strong>GNU/Linux</strong> —— 但这个称呼有争议，部分人提倡使用 Linux 命名。两个称呼的优劣以及由此产生的争议不多提。</p><p>现在的语境下，Linux 基本泛指一切使用 Linux 内核的操作系统。</p><p>我觉得，按哲学思想与功能来区分的话：Linux 指 Linux 内核，GNU/Linux 指 GNU 项目与 Linux 组成的操作系统。</p><blockquote><p>Linux 内核的开源协议是 GPL。</p></blockquote><p>GNU/Linux 遵循 GNU 的哲学，系统只使用自由软件。而现在的各种「基于 Linux 的发行版」，便是基于 GNU/Linux ，再打包一些其它软件（比如桌面环境），做一些配置，提供给用户。</p><p>打包些软件这一步骤，为了提供便利，可能就会打包些非自由软件。</p><p>如果打包了非自由软件，这时再称 GNU/Linux 其实也不大合适了。</p><p>啥是非自由软件呢？不遵循自由软件协议（GPL）的都是非自由软件……还是排除法好理解些。值得注意的是，开源不一定意味着自由 —— 虽然 GPL 是一种开源协议，但开源协议有好多种呢。开源只意味着公布源代码。</p><h2 id="richard-与-linus-对该命名的发言"><a class="markdownIt-Anchor" href="#richard-与-linus-对该命名的发言"></a> Richard 与 Linus 对该命名的发言</h2><p>对命名的讨论太多了，还是拿 GNU 与 Linux 各自的领袖人物的发言举例吧……</p><p>今天有数千万个用户，正在使用的这个操作系统，是早就已经开发好，让他们可以自由的使用。但是他们不晓得，因为他们以为这个系统是 Linux，而它是由一个学生“只是为了好玩”（just for fun）而发展出来的。 ——理查德·斯托曼</p><p>好的，我认为这个称呼是合理的，但只有你真的做了一个 Linux 的 GNU 发行版时，这才是合理的……这就像是我觉得“Red Hat Linux”，或“SuSE Linux” 或“Debian Linux”这些名称是很好的，因为如果你真的做了一个你自己的 Linux 发行版时，你必须要帮它取个名称，但是要把 Linux 全部通称“GNU Linux”，我觉得这很荒谬。——林纳斯·托瓦兹</p><p>上面是从 <a href="https://zh.wikipedia.org/wiki/GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0" target="_blank" rel="noopener">WIKI_Linux 命名爭議</a> 摘取的两人发言，单独看可能有歧义。</p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 自己浅见 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【图】毕业</title>
      <link href="/2020/07/08/graduate/"/>
      <url>/2020/07/08/graduate/</url>
      
        <content type="html"><![CDATA[<img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/life/2020/07-08/graduation.png" style="width:70%">]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 图册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片所记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【图】青春の苦悩</title>
      <link href="/2020/07/02/summer/"/>
      <url>/2020/07/02/summer/</url>
      
        <content type="html"><![CDATA[<img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/life/2020/07-02/young.png" style="width:40%">]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 图册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片所记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【图】学习</title>
      <link href="/2020/05/19/study/"/>
      <url>/2020/05/19/study/</url>
      
        <content type="html"><![CDATA[<h2 id="01"><a class="markdownIt-Anchor" href="#01"></a> 01</h2><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/life/2020-05-19/01.jpeg" alt="2018_05_05_21_55_IMG_0275"></p><h2 id="02"><a class="markdownIt-Anchor" href="#02"></a> 02</h2><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/life/2020-05-19/02.jpeg" alt="2018_05_05_21_55_IMG_0275"></p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 图册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片所记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>也有这样的时候</title>
      <link href="/2020/04/20/hu/"/>
      <url>/2020/04/20/hu/</url>
      
        <content type="html"><![CDATA[<p>也有这样的时候嘛，嗯，也有这样的时候。太阳从远处落下，安静和黯淡的暮色铺满屋子。眼睛在努力地适应环境，身体却懈怠着准备融入黑。直到大脑于此刻意识到这点，恍然间便产生了一股怯意，周遭的事物也突然有了距离。那是怎样一种感觉呢。外物与自我的界限突然清晰起来了，各种各样的事情似乎变得无关紧要。</p><p>似乎这样的陌生才是本应该有的样子，可记忆的惯性却总在提醒一切都是「变得」如此。本不是这样，不该这样。</p><p>这是怎样的感情呢？比喜悦、悲伤来得强烈，困惑和愤怒也不敢与之抗衡。它不像普通的情感仅仅包裹我的心脏，也不似幸福在五脏间循环一股暖流，它有点像风拂过赤裸的身体，有点像血液在流动，可它又安静地躺在我的身体里面，在我的四肢里舒展，从我的两肋跨至指尖，从额头探向眉梢。它像是在修补，又像在啮蚀。</p><p>似乎是少年时靠着围栏坐在操场旁的草地上两个瞬间的混合。闭着眼，阳光展在思绪上；睁开眼，身体被喧嚣挤压得几无容身之处。</p><p>呼，想起了一个词汇，可那对我来说太过锋利了。这不算痛苦，也不是良药，只不过是又一个安静的傍晚。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【更新】Hexo 插件 hexo-douban-getter —— 展示豆瓣标记数据</title>
      <link href="/2020/04/13/hexo-douban-getter/"/>
      <url>/2020/04/13/hexo-douban-getter/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h2><p>[2020-02-09-created]</p><p>2020-04-13-update：支持某类别标记数据的展示，并提供状态间的切换按钮。比如书籍有看过、在看、想看三种状态，现在可以在一个页面展示并切换显示。</p><p><strong>Demo</strong> ：<a href="#demo">豆瓣的书籍标记数据展示 Demo</a></p><p>代码地址：<a href="https://github.com/hqweay/hexo-douban-getter" target="_blank" rel="noopener">hqweay/hexo-douban-getter</a></p><h2 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add https:&#x2F;&#x2F;github.com&#x2F;hqweay&#x2F;hexo-douban-getter.git</span><br></pre></td></tr></table></figure><h3 id="展示单项标记数据"><a class="markdownIt-Anchor" href="#展示单项标记数据"></a> 展示单项标记数据</h3><p>展示看过的影视、读过的书籍……</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; post.md</span><br><span class="line">&#123;% douban userName type pageStart pageEnd titleLevel %&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; example</span><br><span class="line">&#123;% douban &quot;hqweay&quot; &quot;watchedMovies&quot; 1 3 h3 %&#125;</span><br></pre></td></tr></table></figure><h4 id="参数说明"><a class="markdownIt-Anchor" href="#参数说明"></a> 参数说明</h4><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>userName</td><td>豆瓣 id</td></tr><tr><td>type</td><td>标记数据类型（支持类型见下文）</td></tr><tr><td>pageStart</td><td>获取数据开始页</td></tr><tr><td>pageEnd</td><td>获取数据结束页</td></tr><tr><td>titleLevel</td><td>【可选】标记数据的标题层级，默认为 h3。</td></tr></tbody></table><h4 id="type-支持参数"><a class="markdownIt-Anchor" href="#type-支持参数"></a> type 支持参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const DoubanTypeEnum &#x3D; &#123;</span><br><span class="line">  &quot;watchedMovies&quot;: &quot;watchedMovies&quot;,</span><br><span class="line">  &quot;wishMovies&quot;: &quot;wishMovies&quot;,</span><br><span class="line">  &quot;watchingMovies&quot;: &quot;watchingMovies&quot;,</span><br><span class="line">  &quot;readBooks&quot;: &quot;readBooks&quot;,</span><br><span class="line">  &quot;wishBooks&quot;: &quot;wishBooks&quot;,</span><br><span class="line">  &quot;readingBooks&quot;: &quot;readingBooks&quot;,</span><br><span class="line">  &quot;listenedMusics&quot;: &quot;listenedMusics&quot;,</span><br><span class="line">  &quot;wishMusics&quot;: &quot;wishMusics&quot;,</span><br><span class="line">  &quot;listeningMusics&quot;: &quot;listeningMusics&quot;,</span><br><span class="line">  &quot;playedGames&quot;: &quot;playedGames&quot;,</span><br><span class="line">  &quot;wishGames&quot;: &quot;wishGames&quot;,</span><br><span class="line">  &quot;playingGames&quot;: &quot;playingGames&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="展示某类别标记数据"><a class="markdownIt-Anchor" href="#展示某类别标记数据"></a> 展示某类别标记数据</h3><p>展示影视对应的看过、在看、想看，书籍对应的读过、在读、想读……三种状态的标记数据。</p><p>提供切换按钮。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; post.md</span><br><span class="line">&#123;% douban type userName pageStart pageEnd titleLevel %&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; example</span><br><span class="line">&#123;% douban book &quot;hqweay&quot; 1 1 %&#125;</span><br></pre></td></tr></table></figure><h4 id="参数说明-2"><a class="markdownIt-Anchor" href="#参数说明-2"></a> 参数说明</h4><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>type</td><td>标记数据类型（支持类型见下文）</td></tr><tr><td>userName</td><td>豆瓣 id</td></tr><tr><td>pageStart</td><td>获取数据开始页</td></tr><tr><td>pageEnd</td><td>获取数据结束页</td></tr><tr><td>titleLevel</td><td>【可选】标记数据的标题层级，默认为 h3。</td></tr></tbody></table><h4 id="type-支持参数-2"><a class="markdownIt-Anchor" href="#type-支持参数-2"></a> type 支持参数</h4><ul><li>book</li><li>movie</li><li>music</li><li>game</li></ul><h2 id="todo"><a class="markdownIt-Anchor" href="#todo"></a> TODO</h2><ul><li>[ ] 数据缓存至本地</li><li>[ ] 分页？</li></ul><h2 id="展示"><a class="markdownIt-Anchor" href="#展示"></a> 展示</h2><p>仅作参考，建议查看 <a href="#demo">Demo</a> 。</p><p><a href="https://github.com/hqweay/hexo-douban-getter/tree/master/examples" target="_blank" rel="noopener">所有截图示例</a></p><h2 id="说明-2"><a class="markdownIt-Anchor" href="#说明-2"></a> 说明</h2><p>开发过程中参考了 <a href="https://github.com/YuyingWu/hexo-tag-douban" target="_blank" rel="noopener">hexo-tag-douban</a></p><h2 id="demo"><a class="markdownIt-Anchor" href="#demo"></a> Demo</h2><p>本页需要刷新一下，点击切换才有效果。因本站使用 pjax 会影响网页内 js 脚本的加载，导致第一次加载失败。</p><h2 id="书"><a class="markdownIt-Anchor" href="#书"></a> 书</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% douban book &quot;hqweay&quot; 1 1 %&#125;</span><br></pre></td></tr></table></figure><h2 id="影"><a class="markdownIt-Anchor" href="#影"></a> 影</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% douban movie &quot;hqweay&quot; 1 1 %&#125;</span><br></pre></td></tr></table></figure><div class="hexo-douban-index"><script>function change(that){      let done = document.getElementById("hexo-douban-done");      let doing = document.getElementById("hexo-douban-doing");      let todo = document.getElementById("hexo-douban-todo");      done.style.display = "none";      doing.style.display = "none";      todo.style.display = "none";      if(that.id === "nav-done"){        done.style.display = "block";      }else if(that.id === "nav-doing"){        doing.style.display = "block";      }else if(that.id === "nav-todo"){        todo.style.display = "block";      }    }</script><div class="hexo-douban-nav"><button id="nav-done" onclick="change(this)">看过</button> <button id="nav-doing" onclick="change(this)">在看</button> <button id="nav-todo" onclick="change(this)">想看</button></div><div id="hexo-douban-done"><div class="hexo-douban-getter-movies"><h3 id="007：无暇赴死/NoTimetoDie/007：生死有时(港)/007：生死交战(台) - 58">007：无暇赴死/NoTimetoDie/007：生死有时(港)/007：生死交战(台)</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img9.doubanio.com/view/photo/s_ratio_poster/public/p2707553644.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/20276229/" target="_blank">007：无暇赴死/NoTimetoDie/007：生死有时(港)/007：生死交战(台)</a></div><div class="hexo-douban-rate">评分：5</div><div class="hexo-douban-comment">评论：又是一部盲看的片子，没想到刚巧是谢幕作，还挺唏嘘…近三个小时还行，有一段文戏有点无聊但忘记哪部分了。穿长裙拿机关枪简直直男斩好吧，特别看到科学家的那个噘嘴，我承认我心动了…</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-10-30</div></div><h3 id="洛卡改变世界/RoccaverändertdieWelt/非凡小女生/RoccaChangestheWorld - 80">洛卡改变世界/RoccaverändertdieWelt/非凡小女生/RoccaChangestheWorld</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img9.doubanio.com/view/photo/s_ratio_poster/public/p2550709215.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/30458343/" target="_blank">洛卡改变世界/RoccaverändertdieWelt/非凡小女生/RoccaChangestheWorld</a></div><div class="hexo-douban-rate">评分：4</div><div class="hexo-douban-comment">评论：能看下去傲天还是很可爱的</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-10-17</div></div><h3 id="淘金记/TheGoldRush/淘金热 - 81">淘金记/TheGoldRush/淘金热</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img2.doubanio.com/view/photo/s_ratio_poster/public/p1581774481.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/1298817/" target="_blank">淘金记/TheGoldRush/淘金热</a></div><div class="hexo-douban-rate">评分：5</div><div class="hexo-douban-comment">评论：</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-10-10</div></div><h3 id="西游记/老版西游记/央视版西游记 - 94">西游记/老版西游记/央视版西游记</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img1.doubanio.com/view/photo/s_ratio_poster/public/p2265959269.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/2156663/" target="_blank">西游记/老版西游记/央视版西游记</a></div><div class="hexo-douban-rate">评分：5</div><div class="hexo-douban-comment">评论：看了女儿国的混剪，刚好b站有版权就去看了看。真的有趣，里面角色的小动作太有趣了。不时看到评论区有人比较角色战斗力…也有小时候给小伙伴吹牛的感觉，还是挺有意思的。故此标记一下。</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-10-01</div></div><h3 id="大染坊 - 19">大染坊</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img1.doubanio.com/view/photo/s_ratio_poster/public/p2528396467.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/2248529/" target="_blank">大染坊</a></div><div class="hexo-douban-rate">评分：5</div><div class="hexo-douban-comment">评论：</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-09-19</div></div><h3 id="瑞克和莫蒂第五季/RickandMortySeason5 - 79">瑞克和莫蒂第五季/RickandMortySeason5</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img3.doubanio.com/view/photo/s_ratio_poster/public/p2660594300.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/34908206/" target="_blank">瑞克和莫蒂第五季/RickandMortySeason5</a></div><div class="hexo-douban-rate">评分：5</div><div class="hexo-douban-comment">评论：无论我们怎么努力，最后还是会伤害那些有勇气爱我们的人。/喜欢第七集无底线的黑色；最爱第八集。日本文化的梗玩了太多次，以及终于要卖情怀，虽然满足了观众，但似乎意味着创作力不足所以才需要这样弥补。--</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-09-11</div></div><h3 id="蜘蛛侠2/Spider-Man2/蜘蛛人2(台) - 96">蜘蛛侠2/Spider-Man2/蜘蛛人2(台)</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img3.doubanio.com/view/photo/s_ratio_poster/public/p1617867110.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/1308570/" target="_blank">蜘蛛侠2/Spider-Man2/蜘蛛人2(台)</a></div><div class="hexo-douban-rate">评分：4</div><div class="hexo-douban-comment">评论：不喜欢这种情感上的纠结太惨了</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-09-05</div></div><h3 id="功夫熊猫/KungFuPanda/熊猫阿宝/阿宝正传 - 43">功夫熊猫/KungFuPanda/熊猫阿宝/阿宝正传</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img1.doubanio.com/view/photo/s_ratio_poster/public/p1597238857.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/1783457/" target="_blank">功夫熊猫/KungFuPanda/熊猫阿宝/阿宝正传</a></div><div class="hexo-douban-rate">评分：4</div><div class="hexo-douban-comment">评论：不对劲这是误解吧--</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-08-23</div></div><h3 id="奇巧计程车/ODDTAXI/オッドタクシ— - 71">奇巧计程车/ODDTAXI/オッドタクシ—</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img9.doubanio.com/view/photo/s_ratio_poster/public/p2630996296.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/35332568/" target="_blank">奇巧计程车/ODDTAXI/オッドタクシ—</a></div><div class="hexo-douban-rate">评分：5</div><div class="hexo-douban-comment">评论：剧情完全在我的萌点上。就是主角总让我出戏到恶魔阿塞谢尔…/如果说前面是一个还算有趣且台词带劲的故事，其中不乏生硬与不合理之处，最后一集则直接让我高潮，这才是动画才能有的表达啊……</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-07-24</div></div><h3 id="路人女主的养成方法/冴えない彼女の育てかた/不起眼女主角培育法/SaenaiHeroineNoSodatekata - 97">路人女主的养成方法/冴えない彼女の育てかた/不起眼女主角培育法/SaenaiHeroineNoSodatekata</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img1.doubanio.com/view/photo/s_ratio_poster/public/p2212217488.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/25850625/" target="_blank">路人女主的养成方法/冴えない彼女の育てかた/不起眼女主角培育法/SaenaiHeroineNoSodatekata</a></div><div class="hexo-douban-rate">评分：4</div><div class="hexo-douban-comment">评论：拿到后宫动画来说就是反套路的神作呀…但是如作者自己表达的，要是拆成三部小说我会非常喜欢的…</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-07-17</div></div><h3 id="硅谷第二季/SiliconValleySeason2/硅谷群瞎传(台)/硅谷黑历史 - 71">硅谷第二季/SiliconValleySeason2/硅谷群瞎传(台)/硅谷黑历史</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img9.doubanio.com/view/photo/s_ratio_poster/public/p2232659084.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/25871679/" target="_blank">硅谷第二季/SiliconValleySeason2/硅谷群瞎传(台)/硅谷黑历史</a></div><div class="hexo-douban-rate">评分：5</div><div class="hexo-douban-comment">评论：虽然但是。最后一集各种矛盾集中爆发，大家成功抵住30w并发后的欣慰和满足还是让我有点点感动。</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-06-26</div></div><h3 id="猫的报恩/猫の恩返し/猫之报恩/Nekonoongaeshi - 37">猫的报恩/猫の恩返し/猫之报恩/Nekonoongaeshi</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img1.doubanio.com/view/photo/s_ratio_poster/public/p453858009.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/1304970/" target="_blank">猫的报恩/猫の恩返し/猫之报恩/Nekonoongaeshi</a></div><div class="hexo-douban-rate">评分：5</div><div class="hexo-douban-comment">评论：做你自己，活在你自己的时间线，别同化成他们的样子。你做的好事、琐事，都是为了让你成为自己。</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-06-20</div></div><h3 id="你好，李焕英/Hi,Mom/こんにちは、私のお母さん - 25">你好，李焕英/Hi,Mom/こんにちは、私のお母さん</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img1.doubanio.com/view/photo/s_ratio_poster/public/p2629056068.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/34841067/" target="_blank">你好，李焕英/Hi,Mom/こんにちは、私のお母さん</a></div><div class="hexo-douban-rate">评分：5</div><div class="hexo-douban-comment">评论：4🌟</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-06-19</div></div><h3 id="天堂电影院/NuovoCinemaParadiso/星光伴我心(港)/新天堂乐园(台) - 97">天堂电影院/NuovoCinemaParadiso/星光伴我心(港)/新天堂乐园(台)</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img3.doubanio.com/view/photo/s_ratio_poster/public/p2653054340.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/1291828/" target="_blank">天堂电影院/NuovoCinemaParadiso/星光伴我心(港)/新天堂乐园(台)</a></div><div class="hexo-douban-rate">评分：5</div><div class="hexo-douban-comment">评论：呼…</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-06-19</div></div><h3 id="大象女王/TheElephantQueen - 93">大象女王/TheElephantQueen</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2574122652.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/30326966/" target="_blank">大象女王/TheElephantQueen</a></div><div class="hexo-douban-rate">评分：5</div><div class="hexo-douban-comment">评论：大象用脚掌拍了一下乌龟的背，然后放开了。这是我第一次感觉到大象的情绪的点。主线可能是象以及围绕它的一些生态。动物们一生都在忙着生存，也就不久之前，或者说直到现在，干旱也仍然影响着许多人类…致敬生命，致敬生命的意义。</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-06-11</div></div><script>function imgError(n){n.style.display="none"}</script></div></div><div id="hexo-douban-doing" style="display:none"><div class="hexo-douban-getter-movies"><h3 id="洛基第一季/LokiSeason1/洛奇/洛基传 - 52">洛基第一季/LokiSeason1/洛奇/洛基传</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img1.doubanio.com/view/photo/s_ratio_poster/public/p2646859929.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/30331432/" target="_blank">洛基第一季/LokiSeason1/洛奇/洛基传</a></div><div class="hexo-douban-rate">评分：0</div><div class="hexo-douban-comment">评论：永恒的终结/第一集否认自由意志最终必然是虚无主义啊…宇宙版自由即枷锁？</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-06-20</div></div><h3 id="御赐小仵作/TheImperialCoroner - 69">御赐小仵作/TheImperialCoroner</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2652208493.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/32581207/" target="_blank">御赐小仵作/TheImperialCoroner</a></div><div class="hexo-douban-rate">评分：5</div><div class="hexo-douban-comment">评论：1.人物行为真实2.故事有趣，结构巧妙3.剪辑快准稳4.价值观比较普世吧/就是用的配音一开始有点不习惯…</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-05-15</div></div><h3 id="大豆田永久子与三名前夫/大豆田とわ子と三人の元夫/MyDearExes/大豆田永久子与三个前夫(台) - 63">大豆田永久子与三名前夫/大豆田とわ子と三人の元夫/MyDearExes/大豆田永久子与三个前夫(台)</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img1.doubanio.com/view/photo/s_ratio_poster/public/p2642879178.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/35365608/" target="_blank">大豆田永久子与三名前夫/大豆田とわ子と三人の元夫/MyDearExes/大豆田永久子与三个前夫(台)</a></div><div class="hexo-douban-rate">评分：5</div><div class="hexo-douban-comment">评论：</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-04-21</div></div><h3 id="孤单又灿烂的神：鬼怪/쓸쓸하고찬란하神-도깨비/灿烂的守护神：鬼怪(台)/孤独又灿烂的神 - 10">孤单又灿烂的神：鬼怪/쓸쓸하고찬란하神-도깨비/灿烂的守护神：鬼怪(台)/孤独又灿烂的神</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img3.doubanio.com/view/photo/s_ratio_poster/public/p2402645080.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/26761935/" target="_blank">孤单又灿烂的神：鬼怪/쓸쓸하고찬란하神-도깨비/灿烂的守护神：鬼怪(台)/孤独又灿烂的神</a></div><div class="hexo-douban-rate">评分：0</div><div class="hexo-douban-comment">评论：10多集</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-02-01</div></div><h3 id="大江大河2/大江大河第二部/LikeaFlowingRiver2 - 32">大江大河2/大江大河第二部/LikeaFlowingRiver2</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2628760333.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/30423905/" target="_blank">大江大河2/大江大河第二部/LikeaFlowingRiver2</a></div><div class="hexo-douban-rate">评分：0</div><div class="hexo-douban-comment">评论：</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2020-12-26</div></div><h3 id="给我钱第9季/ShowMetheMoney9 - 56">给我钱第9季/ShowMetheMoney9</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img9.doubanio.com/view/photo/s_ratio_poster/public/p2623174866.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/35151461/" target="_blank">给我钱第9季/ShowMetheMoney9</a></div><div class="hexo-douban-rate">评分：0</div><div class="hexo-douban-comment">评论：</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2020-11-26</div></div><h3 id="大宋少年志/大宋少年天团/YoungBlood - 72">大宋少年志/大宋少年天团/YoungBlood</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2559266281.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/30170894/" target="_blank">大宋少年志/大宋少年天团/YoungBlood</a></div><div class="hexo-douban-rate">评分：0</div><div class="hexo-douban-comment">评论：1</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2020-08-01</div></div><h3 id="知否知否应是绿肥红瘦/知否？知否？应是绿肥红瘦/明兰传 - 1">知否知否应是绿肥红瘦/知否？知否？应是绿肥红瘦/明兰传</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img1.doubanio.com/view/photo/s_ratio_poster/public/p2537131688.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/26928226/" target="_blank">知否知否应是绿肥红瘦/知否？知否？应是绿肥红瘦/明兰传</a></div><div class="hexo-douban-rate">评分：0</div><div class="hexo-douban-comment">评论：23。总有种食之无味，弃之可惜的感觉...唉。</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2020-08-01</div></div><h3 id="天盛长歌/凰权·弈天下/凰权 - 6">天盛长歌/凰权·弈天下/凰权</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img9.doubanio.com/view/photo/s_ratio_poster/public/p2530496815.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/26761328/" target="_blank">天盛长歌/凰权·弈天下/凰权</a></div><div class="hexo-douban-rate">评分：0</div><div class="hexo-douban-comment">评论：非得把啥都说出来，没意思。</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2020-06-09</div></div><h3 id="庆余年第一季/庆余年/JoyofLife - 45">庆余年第一季/庆余年/JoyofLife</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img1.doubanio.com/view/photo/s_ratio_poster/public/p2575362797.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/25853071/" target="_blank">庆余年第一季/庆余年/JoyofLife</a></div><div class="hexo-douban-rate">评分：0</div><div class="hexo-douban-comment">评论：女主出来那段剧情没往下看了</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2020-06-09</div></div><h3 id="传闻中的陈芊芊/传闻中的三公主/TheRomanceofTigerandRose - 2">传闻中的陈芊芊/传闻中的三公主/TheRomanceofTigerandRose</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2602398693.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/34463197/" target="_blank">传闻中的陈芊芊/传闻中的三公主/TheRomanceofTigerandRose</a></div><div class="hexo-douban-rate">评分：0</div><div class="hexo-douban-comment">评论：7。三星➕</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2020-06-02</div></div><h3 id="川军团血战到底/血战到底/FightTillTheEnd - 13">川军团血战到底/血战到底/FightTillTheEnd</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img2.doubanio.com/view/photo/s_ratio_poster/public/p1864484071.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/6839157/" target="_blank">川军团血战到底/血战到底/FightTillTheEnd</a></div><div class="hexo-douban-rate">评分：5</div><div class="hexo-douban-comment">评论：四星。但以2020这个时间点，作为一部爱国教育宣传片来说，十星也不为过。唉。</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2020-05-21</div></div><h3 id="暗杀教室第2季/暗殺教室第2期/章鱼老师/极速老师 - 46">暗杀教室第2季/暗殺教室第2期/章鱼老师/极速老师</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2298126991.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/26375693/" target="_blank">暗杀教室第2季/暗殺教室第2期/章鱼老师/极速老师</a></div><div class="hexo-douban-rate">评分：0</div><div class="hexo-douban-comment">评论：1</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2020-05-21</div></div><h3 id="约会～恋爱究竟是什么呢～/デート〜恋とはどんなものかしら〜/约会：恋爱为何物/Deto-KoitowaDonnaMonoKashira - 59">约会～恋爱究竟是什么呢～/デート〜恋とはどんなものかしら〜/约会：恋爱为何物/Deto-KoitowaDonnaMonoKashira</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img9.doubanio.com/view/photo/s_ratio_poster/public/p2219067364.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/26271868/" target="_blank">约会～恋爱究竟是什么呢～/デート〜恋とはどんなものかしら〜/约会：恋爱为何物/Deto-KoitowaDonnaMonoKashira</a></div><div class="hexo-douban-rate">评分：0</div><div class="hexo-douban-comment">评论：</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2020-05-06</div></div><h3 id="东京爱情故事2020/東京ラブストーリー/东京爱情故事现代版 - 12">东京爱情故事2020/東京ラブストーリー/东京爱情故事现代版</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2601212752.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/34963401/" target="_blank">东京爱情故事2020/東京ラブストーリー/东京爱情故事现代版</a></div><div class="hexo-douban-rate">评分：0</div><div class="hexo-douban-comment">评论：</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2020-05-04</div></div><script>function imgError(n){n.style.display="none"}</script></div></div><div id="hexo-douban-todo" style="display:none"><div class="hexo-douban-getter-movies"><h3 id="人鱼之森/人魚の森/MermaidForest - 28">人鱼之森/人魚の森/MermaidForest</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img1.doubanio.com/view/photo/s_ratio_poster/public/p2518708067.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/4817846/" target="_blank">人鱼之森/人魚の森/MermaidForest</a></div><div class="hexo-douban-rate">评分：0</div><div class="hexo-douban-comment">评论：</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-10-29</div></div><h3 id="高山下的花环/卫国军魂(港)/WreathsattheFootoftheMountain - 19">高山下的花环/卫国军魂(港)/WreathsattheFootoftheMountain</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img1.doubanio.com/view/photo/s_ratio_poster/public/p2319879389.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/1422283/" target="_blank">高山下的花环/卫国军魂(港)/WreathsattheFootoftheMountain</a></div><div class="hexo-douban-rate">评分：0</div><div class="hexo-douban-comment">评论：</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-10-29</div></div><h3 id="梁祝/梁山伯与祝英台/TheLovers - 37">梁祝/梁山伯与祝英台/TheLovers</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img1.doubanio.com/view/photo/s_ratio_poster/public/p2125670899.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/1310159/" target="_blank">梁祝/梁山伯与祝英台/TheLovers</a></div><div class="hexo-douban-rate">评分：0</div><div class="hexo-douban-comment">评论：</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-10-19</div></div><h3 id="足球教练第一季/TedLassoSeason1/乜都得教练/泰德拉索：错棚教练趣事多 - 3">足球教练第一季/TedLassoSeason1/乜都得教练/泰德拉索：错棚教练趣事多</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img1.doubanio.com/view/photo/s_ratio_poster/public/p2619169029.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/34843220/" target="_blank">足球教练第一季/TedLassoSeason1/乜都得教练/泰德拉索：错棚教练趣事多</a></div><div class="hexo-douban-rate">评分：0</div><div class="hexo-douban-comment">评论：</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-10-19</div></div><h3 id="摩登情爱第一季/ModernLoveSeason1/现代爱情/现代之爱 - 14">摩登情爱第一季/ModernLoveSeason1/现代爱情/现代之爱</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img9.doubanio.com/view/photo/s_ratio_poster/public/p2564153546.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/30385409/" target="_blank">摩登情爱第一季/ModernLoveSeason1/现代爱情/现代之爱</a></div><div class="hexo-douban-rate">评分：0</div><div class="hexo-douban-comment">评论：</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-10-16</div></div><h3 id="漂流少年/SonnyBoy/サニーボーイ - 5">漂流少年/SonnyBoy/サニーボーイ</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2659821253.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/35427522/" target="_blank">漂流少年/SonnyBoy/サニーボーイ</a></div><div class="hexo-douban-rate">评分：0</div><div class="hexo-douban-comment">评论：</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-10-16</div></div><h3 id="平家物语/平家物語/TheHeikeStory - 47">平家物语/平家物語/TheHeikeStory</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img3.doubanio.com/view/photo/s_ratio_poster/public/p2682264910.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/35590029/" target="_blank">平家物语/平家物語/TheHeikeStory</a></div><div class="hexo-douban-rate">评分：0</div><div class="hexo-douban-comment">评论：</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-10-16</div></div><h3 id="国王排名/王様ランキング/RankingofKings/OusamaRanking - 27">国王排名/王様ランキング/RankingofKings/OusamaRanking</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img1.doubanio.com/view/photo/s_ratio_poster/public/p2681362557.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/34927946/" target="_blank">国王排名/王様ランキング/RankingofKings/OusamaRanking</a></div><div class="hexo-douban-rate">评分：0</div><div class="hexo-douban-comment">评论：</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-10-16</div></div><h3 id="她选择了安乐死/ＮＨＫスペシャル「彼女は安楽死を選んだ」 - 12">她选择了安乐死/ＮＨＫスペシャル「彼女は安楽死を選んだ」</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img1.doubanio.com/view/photo/s_ratio_poster/public/p2558727177.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/33723983/" target="_blank">她选择了安乐死/ＮＨＫスペシャル「彼女は安楽死を選んだ」</a></div><div class="hexo-douban-rate">评分：0</div><div class="hexo-douban-comment">评论：</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-10-14</div></div><h3 id="黑冰/BlackIce - 68">黑冰/BlackIce</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2568539962.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/2216383/" target="_blank">黑冰/BlackIce</a></div><div class="hexo-douban-rate">评分：0</div><div class="hexo-douban-comment">评论：</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-10-13</div></div><h3 id="面纱/ThePaintedVeil/爱在遥远的附近(港)/猜心(台) - 18">面纱/ThePaintedVeil/爱在遥远的附近(港)/猜心(台)</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img1.doubanio.com/view/photo/s_ratio_poster/public/p2562672848.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/1441238/" target="_blank">面纱/ThePaintedVeil/爱在遥远的附近(港)/猜心(台)</a></div><div class="hexo-douban-rate">评分：0</div><div class="hexo-douban-comment">评论：</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-10-13</div></div><h3 id="山城棒棒军 - 6">山城棒棒军</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2374798121.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/3010197/" target="_blank">山城棒棒军</a></div><div class="hexo-douban-rate">评分：0</div><div class="hexo-douban-comment">评论：</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-10-09</div></div><h3 id="封神榜 - 51">封神榜</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2529893293.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/2222935/" target="_blank">封神榜</a></div><div class="hexo-douban-rate">评分：0</div><div class="hexo-douban-comment">评论：</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-10-09</div></div><h3 id="外乡人/生活之他乡/TheOutlander - 96">外乡人/生活之他乡/TheOutlander</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2374802882.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/4102978/" target="_blank">外乡人/生活之他乡/TheOutlander</a></div><div class="hexo-douban-rate">评分：0</div><div class="hexo-douban-comment">评论：</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-10-09</div></div><h3 id="生存之民工/春天里 - 17">生存之民工/春天里</h3><div class="hexo-douban-movie" style="position:relative;width:60%;border:1px solid #666;border-radius:4px;margin:10px auto;padding:10px"><div class="hexo-douban-pic" style="width:50%"><img data-src="https://img9.doubanio.com/view/photo/s_ratio_poster/public/p2187937376.jpg" onerror="imgError(this)" style="width:135px;height:192px;display:inline-block;margin-right:14px" referrerpolicy="no-referrer"></div><div class="hexo-douban-title"><a href="https://movie.douban.com/subject/2259815/" target="_blank">生存之民工/春天里</a></div><div class="hexo-douban-rate">评分：0</div><div class="hexo-douban-comment">评论：</div><div class="hexo-douban-tags">标签：</div><div class="hexo-douban-date">标记时间：2021-10-09</div></div><script>function imgError(n){n.style.display="none"}</script></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Projects </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>尝试折腾了下用 Hexo-Next-Theme 搭建的博客</title>
      <link href="/2020/03/23/hexo-next/"/>
      <url>/2020/03/23/hexo-next/</url>
      
        <content type="html"><![CDATA[<h2 id="只留必要依赖"><a class="markdownIt-Anchor" href="#只留必要依赖"></a> 只留必要依赖</h2><p>配置文件 <code>theme/_config.yml</code> 中不必要的依赖不要添加。</p><p>比如对我来说，3D 效果之类的都没必要，所以 <code>three.js</code>、<code>canvas_nest.js</code> 啥的都不必开启。</p><p>最后用到的有：</p><ul><li>quicklink：预加载用户视区中的链接</li><li>pjax：站内页面刷新</li><li>lazyload：图片懒加载</li><li>mediumzoom：查看大图</li></ul><p>quicklink 我没啥感觉；</p><p>pjax，由于网络原因，我偶尔会觉得浏览器（网页）卡死了；</p><p>lazyload 和 mediumzoom 有点效果，不过虽然我这也没几张图就是了……</p><h2 id="能上-cdn-的先上-cdn"><a class="markdownIt-Anchor" href="#能上-cdn-的先上-cdn"></a> 能上 CDN 的先上 CDN</h2><p>前提：我把博客放 Github Pages 的。</p><p>看的这篇文章，尝试了下：<a href="https://chanshiyu.com/#/post/94" target="_blank" rel="noopener">JsDelivr 全站托管</a></p><h3 id="js-css-images"><a class="markdownIt-Anchor" href="#js-css-images"></a> js、css、images</h3><p>在 <code>theme/_config.yml</code> 下修改 <code>Assets</code>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">css:</span> <span class="string">//cdn.jsdelivr.net/gh/hqweay/hqweay.github.io@master/css</span></span><br><span class="line"><span class="attr">js:</span> <span class="string">//cdn.jsdelivr.net/gh/hqweay/hqweay.github.io@master/js</span></span><br><span class="line"><span class="attr">images:</span> <span class="string">//cdn.jsdelivr.net/gh/hqweay/hqweay.github.io@master/images</span></span><br></pre></td></tr></table></figure><h3 id="avater-favicon"><a class="markdownIt-Anchor" href="#avater-favicon"></a> avater、favicon</h3><p>favicon、avatar 不包含在 images 里，需要单独改下。</p><p>images 仅包含文章引用的本地图片。</p><h3 id="本地搜索"><a class="markdownIt-Anchor" href="#本地搜索"></a> 本地搜索</h3><p>如果开启了本地搜索，加载 <code>search.xml</code> 也不会走 CDN。</p><p>手动改下 <code>js/local-search</code> 里 <code>fetchData</code>。如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">const</span> fetchData = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">-   fetch(CONFIG.root + searchPath)</span><br><span class="line">+   fetch(<span class="string">"https://cdn.jsdelivr.net/gh/hqweay.github.io@master/"</span> + searchPath)</span><br></pre></td></tr></table></figure><p>有变动需求可以将 <code>https://……</code> 这一串配置在 <code>_config.yml</code> 或 <code>theme/_config.yml</code>。</p><h3 id="字体"><a class="markdownIt-Anchor" href="#字体"></a> 字体</h3><p><strong>感觉没必要配置。</strong></p><p>需要的话可以用 <a href="https://sb.sb/blog/css-cdn/" target="_blank" rel="noopener">前端 CDNJS 库及 Google Fonts、Ajax 和 Gravatar 国内加速服务</a> 这位大佬的。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Uri of fonts host, e.g. //fonts.googleapis.com (Default).</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">//fonts.loli.net</span></span><br></pre></td></tr></table></figure><h3 id="各种依赖"><a class="markdownIt-Anchor" href="#各种依赖"></a> 各种依赖</h3><p>在 <code>theme/_config.yml</code> 的 <code>vendors</code> 配置。</p><p>也全用 <code>JsDelivr</code> 的比较好。</p><p>我用到的一些依赖：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主题样式为 minimal 时，显示侧边栏信息会用到。</span></span><br><span class="line"><span class="attr">anime:</span> <span class="string">//cdn.jsdelivr.net/npm/animejs@3.1.0/lib/anime.min.js</span></span><br><span class="line"><span class="comment"># 图标。（比如侧边栏的 social links）——如果不用 icon，那就不必引……</span></span><br><span class="line"><span class="attr">fontawesome:</span> <span class="string">//cdn.jsdelivr.net/npm/font-awesome@4/css/font-awesome.min.css</span></span><br><span class="line"><span class="attr">pjax:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-pjax@0/pjax.min.js</span></span><br><span class="line"><span class="attr">mediumzoom:</span> <span class="string">//cdn.jsdelivr.net/npm/medium-zoom@1/dist/medium-zoom.min.js</span></span><br><span class="line"><span class="attr">lazyload:</span> <span class="string">//cdn.jsdelivr.net/npm/lozad@1/dist/lozad.min.js</span></span><br><span class="line"><span class="attr">quicklink:</span> <span class="string">//cdn.jsdelivr.net/npm/quicklink@1/dist/quicklink.umd.js</span></span><br></pre></td></tr></table></figure><h3 id="感觉没效果啊cloudflare"><a class="markdownIt-Anchor" href="#感觉没效果啊cloudflare"></a> 【感觉没效果啊】Cloudflare</h3><p>域名通过 Cloudflare 解析，可以设置全站用 Cloudflare 的 CDN。</p><p>我试了下，然后通过 <a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener">PageSpeed Insights</a> 测试，跑到 99 分了……</p><p>但是感觉没啥用，我使用的网络下，甚至比直接托管到 Github 还慢……（不知道是不是错觉）</p><h3 id="感觉没效果啊netlify"><a class="markdownIt-Anchor" href="#感觉没效果啊netlify"></a> 【感觉没效果啊】Netlify</h3><p>用 Netlify 托管，效果差异也不大。</p><p>PS：Netlify 绑定自己域名时会需要一个 <code>_redirects</code> 文件。把该文件放 <code>source</code> 下，默认还不会上传至仓库，因为 Hexo 把以 <code>_</code> 开头的文件夹和文件忽略了。</p><p>需要在 <code>_config.yml</code> 配置渲染时把该文件包含进来。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Include/Exclude Files/Folders</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"_redirects"</span></span><br></pre></td></tr></table></figure><h3 id="国内托管服务"><a class="markdownIt-Anchor" href="#国内托管服务"></a> 国内托管服务</h3><p>Coding 之类的。</p><p><s>此贴终结……</s></p><h2 id="字体配置"><a class="markdownIt-Anchor" href="#字体配置"></a> 字体配置</h2><p>字体的相关配置见：<a href="/2020/02/14/hexo-next-font/">Hexo Next 主题字体相关配置</a></p><h2 id="归档页做首页"><a class="markdownIt-Anchor" href="#归档页做首页"></a> 归档页做首页</h2><p>把 <code>layout/archive.swig</code> 改为 <code>layout/index.swig</code> 就行了。</p><p>不过注意此时首页的 <code>meta</code> 信息是 <code>archive</code> （归档）……</p><p>要做个清爽合格的首页，可以把原 <code>index.swig</code> 的 <code>meta</code> 信息拷贝到新 <code>index.swig</code> 下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; new index.swig (archive.swig)</span><br><span class="line"></span><br><span class="line">- &#123;% block title %&#125;&#123;&#123; __(&#39;title.archive&#39;) &#125;&#125; | &#123;&#123; title &#125;&#125;&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">+ &#123;% block title %&#125;&#123;&#123; title &#125;&#125;&#123;%- if theme.index_with_subtitle and subtitle %&#125; - &#123;&#123; subtitle &#125;&#125;&#123;%- endif %&#125;&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h2 id="静态资源压缩"><a class="markdownIt-Anchor" href="#静态资源压缩"></a> 静态资源压缩</h2><p>用的 <a href="https://github.com/chenzhutian/hexo-all-minifier" target="_blank" rel="noopener">hexo-all-minifier</a> 。</p><h2 id="open-graph"><a class="markdownIt-Anchor" href="#open-graph"></a> Open Graph</h2><p><a href="https://ogp.me/" target="_blank" rel="noopener">The Open Graph protocol</a></p><p>简单来说就是向网页添加一些 <code>meta</code> 标签。类似这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:image"</span> <span class="attr">content</span>=<span class="string">"http://ia.media-imdb.com/images/rock.jpg"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>Hexo 提供 <a href="https://hexo.io/docs/helpers.html#open-graph" target="_blank" rel="noopener">open_graph()</a> 可以向网页直接插入 Open Graph 信息。</p><p>遇到个问题，<a href="https://hexo.io/docs/helpers.html#open-graph" target="_blank" rel="noopener">open_graph()</a> 不能给网页设置一个默认的 <code>og:image</code>。</p><p>查看 <code>node_modules/hexo/lib/plugins/helper/open_graph.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> images = options.image || options.images || page.photos || [];</span><br></pre></td></tr></table></figure><p><code>ol:image</code> 优先从传入参数找，找不到就会用文章内容里的图片，<strong>还没有的话，那就没有了</strong>。</p><p>于是尝试加了个：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> default_image = <span class="string">"https://leay.net/images/avatar"</span>;</span><br><span class="line"><span class="keyword">let</span> images =</span><br><span class="line">  options.image || options.images || page.photos || default_image || [];</span><br></pre></td></tr></table></figure><p>这样，前面都找不到，就会使用我定义的图片，而不是直接没有 <code>ol:image</code> 标签。</p><p>当然，为了维护，可以把默认图片的链接配置到 <code>_config.yml</code> 或 <code>theme/_config.yml</code>。</p><p>PS：我没仔细研究，可能 Open Graph 不建议本来就不带图片的网页在分享时带上一张图片？但做 SEO 往往建议每个页面都带上这些信息……</p><p><code>hexo-next-theme</code> 往网页插入 Open Graph 信息也是用的 <a href="https://hexo.io/docs/helpers.html#open-graph" target="_blank" rel="noopener">open_graph()</a>，所以如果有这个需求得改动 Hexo 的 <code>open_graph.js</code> 。</p><h2 id="其它"><a class="markdownIt-Anchor" href="#其它"></a> 其它</h2><h3 id="hexo-asset-image"><a class="markdownIt-Anchor" href="#hexo-asset-image"></a> hexo-asset-image</h3><p>下午发现自己博客上的本地图片显示出问题了，折腾了下，发现是因为之前开启了 hexo-next-theme 的图片懒加载。</p><p>hexo-next-theme 使用的图片懒加载插件是 <a href="https://github.com/ApoorvSaxena/lozad.js" target="_blank" rel="noopener">lozad.js</a> 。这个插件会将 <code>img</code> 的 <code>src</code> 属性改为 <code>data-src</code>。hexo-asset-image 没有这样的判断，所以不会处理。</p><p>改了下，想提个 PR 来着，发现原插件仓库已经被归档了……</p><p>于是 fork 了一份：<a href="https://github.com/hqweay/hexo-asset-image" target="_blank" rel="noopener">hexo-asset-image</a></p><h2 id="关于本博客的样式"><a class="markdownIt-Anchor" href="#关于本博客的样式"></a> 关于本博客的样式</h2><p>本博客的样式抄袭了 <a href="https://blog.k8s.li/" target="_blank" rel="noopener">木子</a> 和 <a href="https://www.elietio.xyz/" target="_blank" rel="noopener">零の轨迹</a>，两位大佬都公布了自己的源码，分别在 <a href="https://github.com/muzi502/blog" target="_blank" rel="noopener">muzi502/blog</a> 和 <a href="https://github.com/Elietio/Elietio.github.io" target="_blank" rel="noopener">Elietio/Elietio.github.io</a> ，有需要的可以参考。原理就是自定义 <code>custom_file_path</code> ，即 <code>source/_data/**</code> ，通过自定义的 CSS 覆盖默认样式。</p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 配置与操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置与操作 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标题取为我也不知道自己胡说八道了些啥好了</title>
      <link href="/2020/02/21/self/"/>
      <url>/2020/02/21/self/</url>
      
        <content type="html"><![CDATA[<p>每当我自以为是地尝试去思考些什么东西，就会花大量的时间纠结这玩意到底是个什么东西——钻牛角尖于它的定义以至于忘记自己的目的、甚至因自己的无知而陷于自我否定。我如果不肯下工夫深入，无论我再怎么瞎想，最后得出的结论也只能如盲人摸象。这种乱吹牛皮导致的后果就是表现得没有基本常识。</p><p>不过也许我不是专业人士，不能用专业的术语阐述定义，但我至少可以描述出那些事物不是什么。如果每个人都能够承担一份寻求真理的责任，贡献出自己的一份思考，说出「至少这样是不对的」，最后也定能得到一个接近正确答案的结果来。</p><p>之前在短视频上看猫猫狗狗，被推荐了不少训宠的内容，才后知后觉以往看到的许多动物令人惊讶的人性化行为都是训练的结果，而且原理似乎都很简单——利用奖赏或惩罚让动物形成条件反射。</p><p>但如果一所承担着启蒙责任的机构只会威逼与利诱，那它不更像是搞驯化的吗？又或者对于某些人来说，驯化和搞教育其实是一回事？</p><p>我一直以为主动把自己归类于某个群体是一种很小众的自嗨行为。当我们拿「标签」来说事的时候，还有人会觉得自己并不属于某个标签。没错，人怎么会属于标签呢？应该是我们拥有标签才对。必须要注意，<strong>我们才是主体</strong> ，我们掌握着主动权。<strong>那些标签也许能展现我们某个方面的特质，但它们并不能代表我们。</strong></p><p>但是为何一旦谈到群体，就变了呢？在现在的语境里，标签和群体真的有什么不同吗？为什么我们不在这个划分的群体里，就在另一个划分的群体呢？</p><p>也许我们只是无意识地进行着某种 <strong>科学仪式</strong> 。但先退几步来说，群体又能代表一个个体几分呢？</p><p>当我对网民这个群体进行观察的时候，发现这个群体像是一种没有记忆的「生物」。「先博关注获得流量再删贴装没发生过」这样的戏码此起彼伏。可我自己不也是网民之一吗？难道我会承认自己是一个没有记忆的生物吗？就是我这样没有记忆的家伙构造出这个令人恶心的庞然大物吗？</p><p>这种整体的平衡能代表个人吗？难道是因为我们每个人在互联网上的行动都暗中修改了别人的记忆吗？</p><p>我有时候在高楼上看公路上的行人与车来车往，会觉得大家都很笨拙。不过这种上帝视角带来的感悟又能给身处其中的人多少价值呢？毕竟我一边走路一边看手机时会觉得开车的家伙根本不懂驾驶，但自己骑着小单车时又觉得边走路边玩手机的家伙都是智障。</p><p>《人类简史》里大意提到 <strong>正是人类对于群体的想像力才有了我们的今天。</strong></p><p>也许确实如此。而且如今基于互联网，它们可以收集到更多群体活动的信息，以此反思——或者。</p><p>总而言之，作为一个普通人，如今我们大多数人都可以方便地了解到「What」——以及基于这个「What」的各种蜚语与谣言。<strong>谣言蜚语对一个群体可能有一定影响</strong> ，但是作为个体来说，我们不应该深陷于「到底哪条消息是谣言」这种细节问题。我们能做的，应该是 <strong>学着在信息中寻找事实与真相。</strong></p><p>当然，有的人可能认为 <strong>自己难得劳神，等待专业人士公布真相就好了。</strong> 这些观点不在我的讨论范围内，我就不乱说了。其次，还涉及到信息渠道与取舍。我也不大懂就不多说了。</p><p>这种「做好自己」的做法并不是犬儒与精致的利己，毕竟多一个人这样做，至少信息里就会少掉许多噪音，所谓的谣言什么的也会少很多。这样实际上等于把公共责任分担到了每个人头上。</p><p>而在这基础之上呢，应该多了解点一个概念的产生是为了解决什么问题——即「Why」。同样的，还有「How」。但我觉得作为我这种普通人来说，又不搞研究，没啥必要了解「How」。</p><p>了解到了「Why」，我们就能超脱于某个概念之上了。</p><p>举个正能量点的例子：政府的目的是为了组织协调人类，维护起我们的想像。难道西方的政治体制就是唯一的解决之道吗？</p><p>诸如此类的，对吧？</p><p>就拿上面的「标签」来说，要我说，这玩意就是应用提供商为了 <strong>控制</strong> 用户，为了给我们做推荐——<strong>诸如此类</strong> 的东西，而搞出来的。我们为了这样的目的，当然可以去试试打标签——但如果到了把「标签」当作目的的地步，是不是就该歇一歇了？</p><p>比如应试是为了选拔，到把应试当作目的。</p><p>比如某网站为了网站质量设立了一个门槛，到后来这个门槛却发展为大家证明自己是高质量用户的勋章——而不管自己对这个网站是否真的有需求。这是我们身上普遍的毛病吗？从还不能温饱的年代没有一点缓冲过渡至互联网时代而形成的囤积癖、薅羊毛癖。</p><p><strong>并不是说这样不好。</strong> 当我们从群体的角度来看时，部分人 <strong>也许动机不纯但达到的表现</strong> 可以吸引更多的人向好。就像大家争着去做「高质量网友」，网络环境一定会有所改善。资本家通过捐款赢得良好的声誉，可以吸引更多的人去造福社会。</p><p><strong>不要过于揣摩别人的动机。</strong> 虽然这句话已经烂大街了，但我不介意再做一次复读机。崇尚圣人那套，不早该过时了吗？</p><p>问题在哪？问题在那本是为了鼓励大家向善——而不是鼓励大家去监督别人。路不拾遗有许多种方式可以达到，苛刻的刑法、互相举报的环境，或者物质条件充分、较高的道德水平……</p><p>16 年的电影《火锅英雄》就讲了一个主角本来有些不正确的想法，但最后阴差阳错制止了一场银行抢劫案的故事。我挺喜欢这个故事的——主角即便有过不好的念头甚至道德瑕疵，那也是最后「拯救世界」的英雄。</p><p>「鼓励人人做英雄的年代才会英雄辈出。」</p><p>罗素在《权威与个人》中也大意说过「『真理总会打败迫害』——这只是一个人类代代重复的善意的谎言之一。只不过总有明智的人会发现真理，而他们恰好生活在一个能接受这些真理的时代。」</p><p>有些人似乎很喜欢把「自己与群体」的关系理解为「自己与别人」。先不管是非对错，我先占据道德的高地再说。</p><p>一方面把批评群体的言论当作批评自己，另一方面以为维护群体的方法就是质疑别人。</p><p>但质疑——<strong>监督本身也不是问题</strong> ，对吧。有论据的监督和有论据的批评同样重要。同时，推崇正义的人也必然要承担反对派利用正义所获得的权利质疑正义的声音。就像言论自由必然会面对部分人的「我不赞同言论自由」。 <strong>观点没有对错之分，所有不必强求共识。</strong> 如果不承认这点，我看那些推崇的人自身就没搞懂自己所坚持的东西。 好在事实有真伪。 <strong>一个只会反对而拿不出论据的反对者，又有何惧？</strong></p><p>毕竟不管在哪，都有哗众取宠的人。 我敢保证，有些表达观点的人根本就不晓得自己在说什么。 为什么我这么确定？<strong>因为我自己就是这种人</strong> 。我什么都不懂，我也敢在这比比赖赖，我重拳出击……</p><p><strong>毕竟这是我自己的地盘。</strong></p><p>你反对公共空间里的某条言论，好歹自己去公共空间表达吧……在人家那比比赖赖算啥……</p><p>又扯远了，回到上文谈群体。立足于个人的时候，<strong>总是觉得自己所处的群体如何如何</strong> 实际上是自我的 <strong>一种逃避</strong> 。</p><p>就像知乎体励志学里常说的——你认识牛皮的人并不代表自己牛皮，对吧。</p><p>总是想着或者说着 <strong>我们这个群体如何如何</strong> ，有着悠久的历史、漂亮的发型……这有什么可骄傲的？</p><p>—— <strong>这当然值得骄傲。</strong> 前提是自己这么想想， <strong>而不是去和别人比较</strong> 。我也骄傲，因生长的这片土地、孕育我的文化土壤、一个相对和平的环境……可把这当作一个比较的资本时，似乎就表示我承认了自己一无是处所以才需要群体特征来自慰。</p><p>不愿意承担责任却享受着骄傲，这大概才是精致的利己吧？</p><blockquote><p>又不负责任地胡说八道了一堆……啊，这个标题起得有轻小说风格。</p></blockquote><p>[2020-02-21-21-57]</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Next 主题字体相关配置</title>
      <link href="/2020/02/14/hexo-next-font/"/>
      <url>/2020/02/14/hexo-next-font/</url>
      
        <content type="html"><![CDATA[<p>版本：Hexo 4.0、Next 7.0</p><p>搜索的一些文章里提及改动的地方挺多的，我乱试了一下，似乎并不需要那么复杂。不知道是不是我没搞懂。</p><p>可能是因为 Next 更新了一些配置简化了操作？总之记录一下。</p><p>PS：Hexo Next 的瞎几把优化可以看看这篇：<a href="/2020/03/23/hexo-next/">尝试折腾了下用 hexo-next-theme 搭建的博客</a></p><h2 id="相关配置"><a class="markdownIt-Anchor" href="#相关配置"></a> 相关配置</h2><p>先看主题配置文件 <code>_config.yml</code> 里与字体相关的配置项：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># CDN</span></span><br><span class="line">  <span class="attr">host:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font options:</span></span><br><span class="line">  <span class="comment"># `external: true` will load this font family from `host` above.</span></span><br><span class="line">  <span class="comment"># `family: Times New Roman`. Without any quotes.</span></span><br><span class="line">  <span class="comment"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># external: 控制是否使用 CDN。</span></span><br><span class="line">  <span class="comment"># family: 字体样式。</span></span><br><span class="line">  <span class="comment"># size: 字体大小。默认为 1（16px）。</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Global font settings used for all elements inside &lt;body&gt;.</span></span><br><span class="line">  <span class="comment"># 全局配置，覆盖 &lt;body&gt; 标签里所有元素</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for site title (.site-title).</span></span><br><span class="line">  <span class="comment"># 博客名字那儿</span></span><br><span class="line">  <span class="attr">title:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;).</span></span><br><span class="line">  <span class="comment"># 注意这是文章里的标题，而不是侧边栏的 toc</span></span><br><span class="line">  <span class="attr">headings:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="comment">#Roboto Mono</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for posts (.post-body).</span></span><br><span class="line">  <span class="comment"># 正文</span></span><br><span class="line">  <span class="attr">posts:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for &lt;code&gt; and code blocks.</span></span><br><span class="line">  <span class="comment"># 代码块</span></span><br><span class="line">  <span class="attr">codes:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br></pre></td></tr></table></figure><h2 id="挑选并配置字体"><a class="markdownIt-Anchor" href="#挑选并配置字体"></a> 挑选并配置字体</h2><p><a href="https://fonts.google.com/" target="_blank" rel="noopener">Google Fonts</a> 挑选一款字体，在配置里的 <code>family</code> 处添加即可。</p><p>例如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Noto</span> <span class="string">Serif</span> <span class="string">SC</span></span><br><span class="line">    <span class="attr">size:</span></span><br></pre></td></tr></table></figure><p>如此配置之后，基于 hexo-next-theme 的博客就会全局使用「思源宋体」。</p><p>同理，配置代码块的字体也只需要挑选并覆盖相应配置即可。如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># ……</span></span><br><span class="line">  <span class="attr">codes:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Roboto</span> <span class="string">Mono</span></span><br><span class="line">    <span class="attr">size:</span></span><br></pre></td></tr></table></figure><p>其它可配置样式的覆盖详见上面的 <a href="#%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE">相关配置</a></p><h2 id="样式的高级设置"><a class="markdownIt-Anchor" href="#样式的高级设置"></a> 样式的高级设置</h2><p>主题提供的字体配置挺到位的，但仍然有限。</p><p>一是只能配置 global、title、headings、posts、codes 几处（其实也挺丰富了）；二是能配置切换字体，设置字体大小，但不能设置颜色等；三是字体只能设置一种 —— <strong>网页是支持多种字体按优先级展示的。</strong></p><p>这些问题，可以使用 Next 4.0 提供的「加载用户自定义样式的配置」解决。</p><p>道理很简单，就是用 Next 提供的自定义样式覆盖默认或者配置的样式。</p><p>在主题配置文件 <code>_config.yml</code> 里开启：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.swig</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.swig</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.swig</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.swig</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.swig</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.swig</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.swig</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure><p>然后在 Hexo 根目录进入 <code>source/_data/styles.styl</code>（若无则新建），添加自己想要设置（覆盖）的样式就好啦！</p><p>比如我要更改全局的字体颜色，就可以这样：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#2e405b</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS：同理，<strong>这里也可以覆盖博客的各种样式</strong>～</p><h2 id="font-family"><a class="markdownIt-Anchor" href="#font-family"></a> font-family</h2><p>字体设置默认使用的 CDN 是 <code>//fonts.googleapis.com</code>。如果从 CDN 上访问失败，就会默认使用如下的字体：</p><ul><li>Non-code Font: Fallback to <code>&quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, sans-serif</code></li><li>Code Font: Fallback to <code>consolas, Menlo, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, monospace</code></li></ul><blockquote><p>非代码的文字使用 <code>&quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, sans-serif</code>。</p><p>代码块使用 <code>consolas, Menlo, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, monospace</code>。</p></blockquote><p>浏览器要知道用什么字体，实际上是通过读取 CSS 属性 <code>font-family</code> <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>实现的。</p><p>在 Next 里，<code>font-family</code> 的默认值就是上面的两项。当我们在配置文件的 <code>font</code> 里添加字体后，被添加的字体就会被插入到 <code>font-family</code> 默认值的头部 —— 当 <code>font-family</code> 里配置了好几个值时，浏览器会优先使用排在前面的字体。</p><p>比如本站最后渲染出来的效果是这样的（你可以打开浏览器的调试窗口查看）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Noto Serif SC"</span>, <span class="string">"PingFang SC"</span>, <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">code</span>,</span><br><span class="line"><span class="selector-tag">pre</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Roboto Mono"</span>, consolas, Menlo, monospace, <span class="string">"PingFang SC"</span>,</span><br><span class="line">    <span class="string">"Microsoft YaHei"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而很可惜的是，Next 似乎无法在配置文件里 <code>font</code> 的 <code>family</code> 处配置多个字体。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无效配置</span></span><br><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Noto</span> <span class="string">Serif</span> <span class="string">SC</span> <span class="string">,</span> <span class="string">Noto</span> <span class="string">Serif</span> <span class="string">SC</span></span><br><span class="line">    <span class="comment"># family: [Noto Serif SC , Noto Serif SC]</span></span><br><span class="line">    <span class="comment"># family: "Noto Serif SC , Noto Serif SC"</span></span><br></pre></td></tr></table></figure><p>如果你想要利用 <code>font-family</code> 的规则<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>:或者 <strong>修改默认使用的字体</strong>，阔以直接到源码 <code>source/css/_variables/base.styl</code> 里修改。</p><p>如下面，修改 <code>$font-family-chinese</code>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Font families.</span></span><br><span class="line">- $font-family-chinese = "PingFang SC", "Microsoft YaHei";</span><br><span class="line">+ $font-family-chinese = "Noto Serif SC";</span><br></pre></td></tr></table></figure><p>Next 能加载用户自定义的样式，同样也能加载用户自定义样式使用的变量。然而同样比较可惜的是，自定义样式使用的变量里的定义（<code>source/_data/variables.styl</code>），<strong>不能覆盖变量默认定义的值</strong>（<code>hexo-next-theme/source/css/_variables/</code>）。但是你可以在默认定义里注释掉变量后，在自定义变量里重新定义并赋值。</p><h2 id="自定义样式使用的变量"><a class="markdownIt-Anchor" href="#自定义样式使用的变量"></a> 自定义样式使用的变量</h2><p>在主题配置文件 <code>_config.yml</code> 里开启使用自定义样式变量：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.swig</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.swig</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.swig</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.swig</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.swig</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.swig</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.swig</span></span><br><span class="line">  <span class="attr">variable:</span> <span class="string">source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="comment">#style: source/_data/styles.styl</span></span><br></pre></td></tr></table></figure><p>首先，在主题的 <code>source/css/_variables/base.styl</code> 下注释掉你想自定义的变量。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Font families.</span><br><span class="line">&#x2F;&#x2F;$font-family-chinese &#x3D; &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;;</span><br></pre></td></tr></table></figure><p>然后在 <code>source/_data/variables.styl</code> （若无则新建）添加自定义变量并配置（你刚刚注释掉的变量）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$font-family-chinese &#x3D; &quot;试试就试试&quot;;</span><br></pre></td></tr></table></figure><hr><p>我觉得 <code>source/_data/variables.styl</code> 的设计应该是为 <code>source/_data/styles.styl</code> 提供变量。像上面这样使用好像没啥必要。要说有点好处的话，就是方便了管理用户配置吧……</p><h2 id="googleapis-镜像"><a class="markdownIt-Anchor" href="#googleapis-镜像"></a> googleapis 镜像</h2><p>虽然许多文章里都提到说 <code>fonts.googleapis.com</code> 不太稳定，但我访问还挺顺利的……</p><p><code>fonts.googleapis.com</code> 的国内 CDN 比较少，只找到这么一篇帖子。</p><p><a href="https://sb.sb/blog/css-cdn/" target="_blank" rel="noopener">前端 CDNJS 库及 Google Fonts、Ajax 和 Gravatar 国内加速服务</a></p><p>用上面帖子里提供的 CDN，Next 的配置就可以这样：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">//fonts.loli.net</span></span><br></pre></td></tr></table></figure><h2 id="官方文档"><a class="markdownIt-Anchor" href="#官方文档"></a> 官方文档</h2><p><a href="https://theme-next.org/docs/theme-settings/#Fonts-Customization" target="_blank" rel="noopener">https://theme-next.org/docs/theme-settings/#Fonts-Customization</a></p><h2 id="如果修改不生效"><a class="markdownIt-Anchor" href="#如果修改不生效"></a> 如果修改不生效</h2><ol><li>浏览器清理下缓存。</li><li>是部署后没效果还是本地就没效果？<code>hexo s</code> 或 <code>hexo d</code> 前使用 <code>hexo clean</code> 清理下。</li><li>部署后没效果的话，稍微等一下远程的缓存刷新。</li><li>本地没生效的话，CSS 文件夹有没有使用 CDN？</li><li>再不行，进主题的 CSS 文件，或后文里提到的 <code>styles.styl</code> 为 <code>.post-body</code> 单独添加字体相关的 CSS。</li><li>尝试升级 hexo-theme……</li><li>如果仍不能正常显示，或者确定不是自己的问题，可以去 <a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">theme-next/hexo-theme-next</a> 提 issue 。</li></ol><h2 id="关于本博客的样式"><a class="markdownIt-Anchor" href="#关于本博客的样式"></a> 关于本博客的样式</h2><p>本博客的样式抄袭了 <a href="https://blog.k8s.li/" target="_blank" rel="noopener">木子</a> 和 <a href="https://www.elietio.xyz/" target="_blank" rel="noopener">零の轨迹</a>，两位大佬都公布了自己的源码，分别在 <a href="https://github.com/muzi502/blog" target="_blank" rel="noopener">muzi502/blog</a> 和 <a href="https://github.com/Elietio/Elietio.github.io" target="_blank" rel="noopener">Elietio/Elietio.github.io</a> ，有需要的可以参考。原理就是自定义 <code>custom_file_path</code> ，即 <code>source/_data/**</code> ，通过自定义的 CSS 覆盖默认样式。比如 <a href="#%E6%A0%B7%E5%BC%8F%E7%9A%84%E9%AB%98%E7%BA%A7%E8%AE%BE%E7%BD%AE">样式的高级设置</a> 。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><code>font-family</code> 的规则是这样的：（1）优先使用排在前面的字体。（2）如果找不到该种字体，或者该种字体不包括所要渲染的文字，则使用下一种字体。（3）如果所列出的字体，都无法满足需要，则让操作系统自行决定使用哪种字体。 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>利用 <code>font-family</code> 的规则：比如「font-family 应 该优先指定英文字体，然后再指定中文字体。否则，中文字体所包含的英文字母，会取代英文字体。」这样的问题。 <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 配置与操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客记录 </tag>
            
            <tag> 配置与操作 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise、async/await 与 setInterval</title>
      <link href="/2020/02/10/async-Promise/"/>
      <url>/2020/02/10/async-Promise/</url>
      
        <content type="html"><![CDATA[<h2 id="tldr"><a class="markdownIt-Anchor" href="#tldr"></a> TL;DR;</h2><p>易混淆点：<code>async</code> 修饰的函数，不管函数内部 <code>return</code> 的是啥，最后都返回一个 <code>Promise</code>。而 <code>return</code> 返回的值，最后在 <code>Promise.then()</code> 里取到。</p><p><code>async</code> 修饰一个函数，只是说明会隐式地返回一个 <code>Promise</code>，并不是说 <strong>这个函数内的操作都在一个 <code>Promise</code> 内</strong>。</p><p>也就是说，<strong><code>async</code> 修饰一个方法时，并不能保证方法里的操作同步执行。</strong> （一般 <code>async</code> 修饰的方法，同步操作会使用关键字 <code>await</code> 。）</p><h2 id="需求"><a class="markdownIt-Anchor" href="#需求"></a> 需求</h2><p>定时循环执行一个数学计算，把计算出来的值返回并打印出来。</p><h2 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h2><p>不假思索写出一段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  count++;</span><br><span class="line">  <span class="keyword">if</span> (count === <span class="number">3</span>) &#123;</span><br><span class="line">    clearInterval(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(count);</span><br></pre></td></tr></table></figure><p>执行的结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><p>这样，肯定是不行的……</p><p>JavaScript 是异步的，实际上这段代码里的 <code>setInterval()</code> 和 <code>console.log()</code> 会同时执行。</p><p>要使它们的执行有一个先后顺序，这就涉及到 JavaScript 里如何「同步」的问题了。</p><p>同步的方式有许多种，这里谈谈 <code>Promise</code> 和 <code>async/await</code>。</p><h2 id="promise-和-setinterval"><a class="markdownIt-Anchor" href="#promise-和-setinterval"></a> Promise 和 setInterval</h2><h3 id="0x01-错误示例"><a class="markdownIt-Anchor" href="#0x01-错误示例"></a> 0x01 错误示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA() 开始执行……"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      count++;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"testA() setTimeout 内容……"</span>);</span><br><span class="line">      <span class="keyword">if</span> (count === <span class="number">3</span>) &#123;</span><br><span class="line">        clearInterval(<span class="keyword">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">    resolve(<span class="string">"testA() 返回内容，计算得到 count = "</span> + count);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testA().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA.then() 开始执行"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行的结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">testA() 开始执行……</span><br><span class="line">testA() 返回内容，计算得到 count = 0</span><br><span class="line">testA.then() 开始执行</span><br><span class="line">testA() setTimeout 内容……</span><br><span class="line">testA() setTimeout 内容……</span><br><span class="line">testA() setTimeout 内容……</span><br></pre></td></tr></table></figure><h3 id="0x01-分析"><a class="markdownIt-Anchor" href="#0x01-分析"></a> 0x01 分析</h3><p><code>Promise</code> 的构造函数接受一个函数作为参数，这个函数又使用两个函数作为参数：<code>resolve</code>、<code>reject</code>。</p><p>简单理解的话，<code>resolve</code> 和 <code>reject</code> 这两个函数都用于在 <code>Promise</code> 里返回值。后面调用 <code>Promise</code> 的 <code>then()</code> 时，就可以获取到返回的值。他们的不同之处在于 <code>resolve</code> 将 <code>Promise</code> 的状态标志为「成功」，而 <code>reject</code> 将 <code>Promise</code> 的状态标志为「失败」（通常对应遇到异常）。</p><p>这段代码的问题和上面的一样，即 <code>setInterval</code> 与 <code>resolve</code> 会同时运行。所以执行 <code>testA</code> 后，早早地拿到了上面根本没有进入 <code>setInterval</code> 进行运算的 <code>count</code> 的值。</p><h3 id="0x02-这样有效"><a class="markdownIt-Anchor" href="#0x02-这样有效"></a> 0x02 这样有效</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA() 开始执行……"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      count++;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"testA() setTimeout 内容……"</span>);</span><br><span class="line">      <span class="keyword">if</span> (count === <span class="number">3</span>) &#123;</span><br><span class="line">        clearInterval(<span class="keyword">this</span>);</span><br><span class="line">        resolve(<span class="string">"testA() 返回内容，计算得到 count = "</span> + count);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testA().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA.then() 开始执行"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行的结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">testA() 开始执行……</span><br><span class="line">testA() setTimeout 内容……</span><br><span class="line">testA() setTimeout 内容……</span><br><span class="line">testA() setTimeout 内容……</span><br><span class="line">testA() 返回内容，计算得到 count = 3</span><br><span class="line">testA.then() 开始执行</span><br></pre></td></tr></table></figure><h3 id="0x02-分析"><a class="markdownIt-Anchor" href="#0x02-分析"></a> 0x02 分析</h3><p>我们把 <code>resolve</code> 也放进 <code>setInterval</code> 里，当计算完成后再返回，这样，就能保证拿到计算后的值啦。</p><h2 id="async-await-与-setinterval"><a class="markdownIt-Anchor" href="#async-await-与-setinterval"></a> async await 与 setInterval</h2><p>我想整高级点，用 <code>async</code> 与 <code>await</code> 来重写，应该咋整？</p><h3 id="0x03-错误示例"><a class="markdownIt-Anchor" href="#0x03-错误示例"></a> 0x03 错误示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">testA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA() 开始执行……"</span>);</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"testA() setTimeout 内容……"</span>);</span><br><span class="line">    <span class="keyword">if</span> (count === <span class="number">3</span>) &#123;</span><br><span class="line">      clearInterval(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"testA() 返回内容，计算得到 count = "</span> + count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testA().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA.then() 开始执行了"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行的结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">testA() 开始执行……</span><br><span class="line">testA() 返回内容，计算得到 count = 0</span><br><span class="line">testA.then() 开始执行了</span><br><span class="line">testA() setTimeout 内容……</span><br><span class="line">testA() setTimeout 内容……</span><br><span class="line">testA() setTimeout 内容……</span><br></pre></td></tr></table></figure><h3 id="0x03-分析"><a class="markdownIt-Anchor" href="#0x03-分析"></a> 0x03 分析</h3><p>同理，<code>setInterval</code> 与 <code>return</code> 会同时运行。所以执行 <code>testA</code> 后，早早地拿到了上面根本没有进入 <code>setInterval</code> 进行运算的值。</p><h3 id="0x04-还是错误的"><a class="markdownIt-Anchor" href="#0x04-还是错误的"></a> 0x04 还是错误的</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">testA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA() 开始执行……"</span>);</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"testA() setTimeout 内容……"</span>);</span><br><span class="line">    <span class="keyword">if</span> (count === <span class="number">3</span>) &#123;</span><br><span class="line">      clearInterval(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"testA() 返回内容，计算得到 count = "</span> + count;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testA().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA.then() 开始执行了"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行的结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">testA() 开始执行……</span><br><span class="line">undefined</span><br><span class="line">testA.then() 开始执行了</span><br><span class="line">testA() setTimeout 内容……</span><br><span class="line">testA() setTimeout 内容……</span><br><span class="line">testA() setTimeout 内容……</span><br></pre></td></tr></table></figure><h3 id="0x04-分析"><a class="markdownIt-Anchor" href="#0x04-分析"></a> 0x04 分析</h3><p>想当然地用类似上面 <code>Promise</code> 的方法，把 <code>return</code> 放在 <code>setInterval</code> 里面，还是不行。</p><p>获取到的 <code>data</code> 是 <code>undefined</code>。这说明有个隐式的 <code>return</code> 和 <code>setInterval</code> 一起执行啦……</p><h3 id="这可咋整啊"><a class="markdownIt-Anchor" href="#这可咋整啊"></a> 这可咋整啊……</h3><p><code>setInterval</code> 是异步的，咋整，用最上面的方法，套个 <code>Promise</code> 呗……可这不就又回到最初的起点了吗……</p><h3 id="0x05-这样可以"><a class="markdownIt-Anchor" href="#0x05-这样可以"></a> 0x05 这样可以</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">testA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA() 开始执行……"</span>);</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      count++;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"testA() setTimeout 内容……"</span>);</span><br><span class="line">      <span class="keyword">if</span> (count === <span class="number">3</span>) &#123;</span><br><span class="line">        clearInterval(<span class="keyword">this</span>);</span><br><span class="line">        resolve(<span class="string">"testA() 返回内容，计算得到 count = "</span> + count);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA 延迟后的内容"</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testA().then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA.then() 开始执行了"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">testA() 开始执行……</span><br><span class="line">testA() setTimeout 内容……</span><br><span class="line">testA() setTimeout 内容……</span><br><span class="line">testA() setTimeout 内容……</span><br><span class="line">testA 延迟后的内容</span><br><span class="line">testA() 返回内容，计算得到 count = 3</span><br><span class="line">testA.then() 开始执行了</span><br></pre></td></tr></table></figure><h3 id="0x05-分析"><a class="markdownIt-Anchor" href="#0x05-分析"></a> 0x05 分析</h3><p>把 <code>setInterval</code> 包装到一个 <code>Promise</code> 里并返回，然后使用 <code>await</code> 等待这个 <code>Promise</code>（包装着 <code>setInterval</code>）执行完并取得返回值。</p><p>再把这个返回值返回。</p><h2 id="为啥呢"><a class="markdownIt-Anchor" href="#为啥呢"></a> 为啥呢</h2><p><code>async</code> 修饰的函数，不管 <code>return</code> 的是啥，最后都返回一个 <code>Promise</code>。而 <code>return</code> 返回的值，最后在 <code>Promise.then()</code> 里取到。</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getCount().then(<span class="function">(<span class="params">count</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(count);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>为啥 0x03 和 0x04 是错误的呢？</p><p>因为 <code>async</code> 修饰一个函数，只是说明会隐式地返回一个 <code>Promise</code>，并不是说 <strong>这个函数内的操作都在一个 <code>Promise</code> 内</strong>。</p><p>也就是说，<strong><code>async</code> 修饰一个方法，并不能保证方法里的操作同步执行。</strong></p><blockquote><p>之前我把 <code>async</code> 这类关键字与 Java 里面的一些关键字对比理解……</p></blockquote><p>按我的理解，「0x03 错误示例」就相当于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA() 开始执行……"</span>);</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"testA() setTimeout 内容……"</span>);</span><br><span class="line">    <span class="keyword">if</span> (count === <span class="number">3</span>) &#123;</span><br><span class="line">      clearInterval(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">"testA() 返回内容，计算得到 count = "</span> + count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testA().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA.then() 开始执行了"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0x03 错误示例</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">testA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA() 开始执行……"</span>);</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"testA() setTimeout 内容……"</span>);</span><br><span class="line">    <span class="keyword">if</span> (count === <span class="number">3</span>) &#123;</span><br><span class="line">      clearInterval(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"testA() 返回内容，计算得到 count = "</span> + count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testA().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA.then() 开始执行了"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="其它"><a class="markdownIt-Anchor" href="#其它"></a> 其它</h2><p>虽然标题是：「Promise、async/await 与 setInterval」，实际上 <code>setTimeout</code> 也是一个道理。</p><h2 id="箭头函数"><a class="markdownIt-Anchor" href="#箭头函数"></a> 箭头函数</h2><p>我在这篇文章里用 <code>setInterval</code> 时，用的是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  count++;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA() setTimeout 内容……"</span>);</span><br><span class="line">  <span class="keyword">if</span> (count === <span class="number">3</span>) &#123;</span><br><span class="line">    clearInterval(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p><code>setInterval</code> 传入一个函数作为参数，使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>而不能用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">() =&gt; &#123;&#125;;</span><br></pre></td></tr></table></figure><p>这是因为 <code>function(){}</code> 函数里的 this 指的是 <code>function(){}</code> 本身，而 <code>()=&gt;{}</code> 里的 this 则指的是 <code>()=&gt;{}</code> 外部的环境。</p><p>按定义来讲则是：<strong>箭头函数没有 <code>this</code>。如果访问 <code>this</code>，则从外部获取。</strong></p><p>如果我们在这用 <code>()=&gt;{}</code> 的话，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  count++;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA() setTimeout 内容……"</span>);</span><br><span class="line">  <span class="keyword">if</span> (count === <span class="number">3</span>) &#123;</span><br><span class="line">    clearInterval(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>这里的 <code>setInterval</code> 则会一直循环执行，不会停止。</p><p>因为 <code>clearInterval(this)</code> 根本没得效果。</p><p>如果要用箭头函数的话，需要这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> interval = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  count++;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA() setTimeout 内容……"</span>);</span><br><span class="line">  <span class="keyword">if</span> (count === <span class="number">3</span>) &#123;</span><br><span class="line">    clearInterval(interval);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 简单总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 引用本地图片以及引用本地任意位置图片的一点思路</title>
      <link href="/2019/12/25/hexo/"/>
      <url>/2019/12/25/hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>之前想在博文里引用本地图片，按着随便搜到的教程无脑折腾了一番，当时记录了下步骤放在博文里，其实根本没搞懂。在 CSDN 上的备份经常被人访问，为了不误人子弟，稍微按自己的理解捋一下。</p><p>当然，也不一定正确。</p><p><strong>先提一下，我目前的 hexo 版本为 4.0，其它版本可能会有不同。</strong></p><h2 id="引用本地图片与插件-hexo-asset-image"><a class="markdownIt-Anchor" href="#引用本地图片与插件-hexo-asset-image"></a> 引用本地图片与插件 hexo-asset-image</h2><h3 id="引用本地图片"><a class="markdownIt-Anchor" href="#引用本地图片"></a> 引用本地图片</h3><p>首先要在 Hexo 博客配置添加一行<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开始使用本地静态资源</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>添加这行配置后，当你什么插件也没安装时，使用 hexo 4.0 也可以在文章引用本地图片，引用方式是这样的：</p><p>首先在 <code>_posts</code> 文件夹下建立一个博文文件，比如 <code>2019-12-23-hello-world.md</code>，再建立一个同名的文件夹 <code>2019-12-23-hello-world</code>。这篇文章要引用的图片就放在该文件夹下。</p><blockquote><p>或者 <code>hexo new 2019-12-23-my-post</code></p></blockquote><p>比如我就在该目录下放一个图片<code>2019-12-23-hello-world/haha.png</code>。然后在博文 Markdown 文件里引用该图片，怎么引用呢？用下面这种方式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](haha.png)</span><br></pre></td></tr></table></figure><p>如果你熟悉 Markdown 语法的话就会注意到，这个引用路径不太对劲。<strong>而且通过该路径引用图片，本地的 Markdown 编辑器是不能预览图片的！</strong></p><p>本来文章与图片的路径是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|-- /2019-12-23-hello-world</span><br><span class="line">|----  haha.png</span><br><span class="line">|-- 2019-12-23-hello-world.md</span><br></pre></td></tr></table></figure><p>理论上 <code>2019-12-23-hello-world.md</code> 要引用 <code>2019-12-23-hello-world</code> 文件夹下的 <code>haha.png</code>，引用方式应该是：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](2019-12-23-hello-world/haha.png)</span><br></pre></td></tr></table></figure><p>这样才对啊！</p><p><strong>那么，为什么引用的时候不能加文件夹的路径呢？</strong></p><p>这是因为 hexo 在渲染的时候，会把 <code>2019-12-23-hello-world.md</code> 渲染为 <code>public/2019/12/23/hello-world</code> 下的 <code>index.html</code> 网页文件，再把对应文件夹下的静态资源，比如图片 <code>/2019-12-23-hello-world/haha.png</code> 也拷贝到 <code>public/2019/12/23/hello-world</code> 下。</p><p>因此，虽然在我们写博文的时候看来，博文和图片不在同一个文件夹路径下，但是它们最终被渲染后，是放在同一个文件夹下的。</p><p>像这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 渲染后</span><br><span class="line">|-- /public/2019/12/23/hello-world</span><br><span class="line">|---- index.html</span><br><span class="line">|---- haha.png</span><br></pre></td></tr></table></figure><p>所以我们在写博文引用图片时，就得把它们当作在一个文件夹下来处理，也就是引用的时候，要去掉文件夹路径。</p><p>最后渲染出来的效果是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"haha.png"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>这样有点反直觉啊！！</strong></p><p>或者简单讲，<strong>我想在本地编辑器里预览图片</strong>，该咋整呢？</p><h3 id="关于-hexo-asset-image"><a class="markdownIt-Anchor" href="#关于-hexo-asset-image"></a> 关于 hexo-asset-image</h3><p>根据我看到的情况，hexo-asset-image 插件解决的问题是「给引用的本地图片添加绝对路径。」</p><p>毕竟说明里只提到「Give asset image in hexo a absolutely path automatically」……</p><p>比如上面渲染出来的图片标签是用的相对路径：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"haha.png"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>经 hexo-asset-image 插件处理后，标签会变成绝对路径：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/2019/12/23/hello-world/haha.png"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>但是，在我现在的环境（hexo 4.0）发现，使用 hexo-asset-image 插件后，我可以在博文（原 Markdown 文件）里使用</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](2019-12-23-hello-world/haha.png)</span><br></pre></td></tr></table></figure><p>这种形式来引用图片了！</p><p><strong>这样的好处是本地编辑器里也可以直接预览图片。</strong></p><blockquote><p><code>![](haha.png)</code> 这种方式也仍可正常使用。</p></blockquote><p>跟踪了一下插件的代码，发现插件在获取到 <code>2019-12-23-hello-world/haha.png</code> 这个链接后，会先通过字符串操作获取到后面的 <code>haha.png</code>，然后统一进行「相对路径转绝对路径」的操作。</p><p>最后处理为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/2019/12/23/hello-world/haha.png"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>有些博文里直接把「解决本地编辑器图片显示」当作 hexo-asset-image 的本来功能，可该插件的 Issue 里还有「如何在本地支持 Markdown 图片显示」……</p><p>我觉得可能该插件的本来目的只是「将静态资源的引用路径转化为绝对路径」，至于后面解决了「本地预览」应该是随手做的……不然作者怎么也不说明下……</p><p><strong>也可能我理解错了。</strong></p><blockquote><p>老实说我有点迷惑，也许这可能和 Hexo 的历史有关？</p></blockquote><h3 id="安装-hexo-asset-image"><a class="markdownIt-Anchor" href="#安装-hexo-asset-image"></a> 安装 hexo-asset-image</h3><p>不过至今（2019-12-25）为止， hexo 4.0 使用了 npm 仓库里的插件 hexo-asset-image 1.0 有点问题，安装后图片不能正常显示，查看图片路径被渲染成了 <code>/.xx/haha.png</code> 的格式。（xx 是域名后缀。）</p><p>但是直接安装 Github 仓库的源码没问题，可以执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/xcodebuild/hexo-asset-image.git</span><br><span class="line"><span class="comment"># or yarn add https://github.com/xcodebuild/hexo-asset-image.git</span></span><br></pre></td></tr></table></figure><p>具体使用及配置查看 <a href="https://github.com/xcodebuild/hexo-asset-image" target="_blank" rel="noopener">https://github.com/xcodebuild/hexo-asset-image</a></p><h2 id="hexo-asset-image-的说明与问题"><a class="markdownIt-Anchor" href="#hexo-asset-image-的说明与问题"></a> hexo-asset-image 的说明与问题</h2><p>我在刚使用 Hexo 时，搜索静态图片的问题，大家都推荐使用 hexo-asset-image 这个插件，也没多做考虑……</p><p>现在回头看，其实有许多的轮子可以解决这个问题……比如在 npm 或者 Github 搜索 <code>hexo-asset</code> 或 <code>hexo-imge</code>，就能搜到一大堆大佬们的轮子……</p><blockquote><p>甚至能搜到一大堆 <code>hexo-asset-image</code> 的 fix 包……</p></blockquote><p>现在 <code>hexo-asset-image</code> 已经被作者归档了……我想 npm 上的包应该是因为过时没有更新才会出问题的吧……</p><p><strong>也许现在应该有更好的解决方案。</strong>（但我没研究，毕竟自己的需求够用了……）</p><p>使用 hexo-asset-image 可能会遇到一些问题，比如与懒加载插件搭配时的问题。（我遇到了，所以提一下</p><p>感觉其它莫名其妙的问题也挺多的……但是这个包现在没人统一维护，有许多人都只能修复了一下自己的问题然后单独说明一下……</p><h3 id="hexo-asset-image-与-懒加载的冲突"><a class="markdownIt-Anchor" href="#hexo-asset-image-与-懒加载的冲突"></a> hexo-asset-image 与 懒加载的冲突</h3><p>我在使用 Hexo 的主题 hexo-next-theme 开启图片懒加载时，hexo-asset-image 插件会失效。</p><p>跟了下代码，发现 hexo-next-theme 使用的图片懒加载插件是 <a href="https://github.com/ApoorvSaxena/lozad.js" target="_blank" rel="noopener">lozad.js</a> 。这个插件会将 <code>img</code> 的 <code>src</code> 属性改为 <code>data-src</code>。hexo-asset-image 的工作原理是统一处理 <code>src</code> ，没有对 <code>data-src</code> 等属性的判断，所以就不会处理图片。</p><p>我自己改了下，想提个 PR 来着，发现原插件仓库已经被归档了……</p><p>于是 fork 了一份：<a href="https://github.com/hqweay/hexo-asset-image" target="_blank" rel="noopener">hqweay/hexo-asset-image</a></p><p>在解决这个问题的时候，发现也有人遇到过类似的问题。可以参考一下别人的问题：</p><p><a href="https://github.com/ci0n/hexo-asset-image" target="_blank" rel="noopener">ci0n/hexo-asset-image</a></p><p>该仓库的 ChangeLog：</p><blockquote><p>2019-09-23: support hexo-lazyload-image<br>2019-09-23: fixed hexo-abbrlink using *.html image path error</p></blockquote><h2 id="与正文无关引用本地任意位置图片的一点思路"><a class="markdownIt-Anchor" href="#与正文无关引用本地任意位置图片的一点思路"></a> 【与正文无关】引用本地任意位置图片的一点思路</h2><p>hexo 引用本地图片的方式确实不大优雅 —— 必须把图片存储在固定的位置。有时候写一些截图比较多的文章，还得把截图一张张放到那个固定的文件夹，再进行引用。</p><p>比较直观的操作应当这样才对：截图后直接粘贴到文档里。</p><p>如果用图床，甚至是用 Github 做图床，可以使用 <a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a> 这个开源的图床上传工具。它可以把你剪贴板里图片上传到图床，然后返回一个 Markdown 格式的引用路径——再粘贴到你需要的位置即可。</p><p>看了一下 hexo-asset-image 的实现方式，想到也许可以把 Markdown 博文中 <strong>任意位置的图片</strong> 拷贝到相应的文件夹里，然后用类似的方式进行字符串替换。</p><p><strong>然后尝试了一下，没做出来……记录一下思路。</strong></p><p>首先需要考虑到不同平台的绝对路径不同，我心想先把流程做出来，于是以 Linux 的为准。</p><p>然后因为我一开始不懂 hexo 怎么写插件，于是就在 hexo-asset-image 上直接改。我把任意位置图片的路径获取到了，然后就是把该图片往文章对应的文件夹复制了。</p><p>这里有两个问题，一是我应该把图片复制到 <code>/public</code> 下还是 <code>/posts</code> 下呢，先复制到 <code>/post</code> 文件夹下吧。</p><p>这还有个问题，如果在 <code>/posts</code> 还有子文件夹咋办？管他的，先不管这个，莽出来再说。</p><p>然后又有问题了，我要把图片复制过来，那首先得判断该文件夹下有没有博文 Markdown 文件对应的文件夹吧……如果没有，我还得创建……</p><p>创建的文件夹得与博文 Markdown 文件同名。我已经创建测试文件夹成功了，完事后才发现在这儿获取不到该篇文章对应的 Markdown 文件的文件名。</p><p>因为 hexo-asset-image 实际上操作的是 hexo 生成的 public 下的 index.html 网页文件……</p><p>于是我尝试到 hexo 渲染 Markdown 为 HTML 的那儿去操作，正当我找到入口，准备大干一番时又发现个问题……插件那边的代码获取不到我在这儿找到的变量啊……</p><p>太麻烦了，遂放弃之。</p><p>PS：我的思路局限在「渲染时」或者「渲染后」，也许写个脚本直接处理 Markdown 博文，很简单就能做到吧……</p><h2 id="changelog"><a class="markdownIt-Anchor" href="#changelog"></a> ChangeLog</h2><p>[2020-04-02-update]</p><p>PS：Typora@0.9.86(beta) 现在可以在设置里开启「插入图片时」，「复制图片到当前文件夹」等操作。而且和 PicGo 联动了，将来甚至可以插入图片时自动上传到云服务再返回链接吧。这就完美实现了我上面关于「引用本地图片」的想法啦！酷～</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>这是 Hexo 官方提供的：<a href="https://hexo.io/docs/asset-folders" target="_blank" rel="noopener">asset-folders</a> ，不是插件提供的。其它静态资源的引用方式也可以看这个链接。 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 自己浅见 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>译 - C, what the fuck??! - Robin Martijn</title>
      <link href="/2019/12/19/T-c-what-the-fuck/"/>
      <url>/2019/12/19/T-c-what-the-fuck/</url>
      
        <content type="html"><![CDATA[<h2 id="tldr"><a class="markdownIt-Anchor" href="#tldr"></a> TL;DR</h2><p>当初由于 ISO646 标准，部分国家的程序员打不出 <code>{</code>、<code>}</code> 等字符，所以 ANSI C 委员会引入了三元符。但三元符的使用可能会产生一些有趣的效果……</p><h2 id="测试效果"><a class="markdownIt-Anchor" href="#测试效果"></a> 测试效果</h2><p>gcc version ：gcc (GCC) 9.2.0</p><p><img data-src="/2019/12/19/T-c-what-the-fuck/show.png" alt="show"></p><h2 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h2><p>原文：<a href="https://bowero.nl/blog/2019/12/15/c-what-the-fuck/" target="_blank" rel="noopener">C, what the fuck??!</a></p><p><em>December 2019</em></p><p>下面这段代码执行后，变量 <code>a</code> 的值应该是多少？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// What will be the value of a????/</span></span><br><span class="line">a++;</span><br></pre></td></tr></table></figure><p>哈哈，既然我这样问了，你可能会觉得至少 <code>a</code> 的值不应该是 <code>1</code>。</p><p>实际上呢， <code>a</code> 的值仍然是 <code>0</code>，不会改变，因为 <code>a++;</code> 这行代码根本不会被执行。在 <code>a++;</code> 上面的那段注释里发生了些特殊的事情。</p><p>在讨论这个问题前，让我们先看看下面这个例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!didIMakeAMistake() ??!??! CIsWrongHere();</span><br></pre></td></tr></table></figure><p>首先，这段代码居然能能通过编译！这是咋回事？</p><p>要理解这个问题，首先要保证代码运行在现代版本的 <code>gcc</code> 环境并且开启了参数 <code>-trigraphs</code>（三元符）。 三元符是为了 <a href="https://www.gs1tw.org/twct/gs1w/download/DataMatrix_Character.pdf" target="_blank" rel="noopener">the ISO/IEC 646 Invariant character set</a> （ISO646 标准）中缺少的 9 个字符而发明的特殊字符组合。让我们看看 ISO646 标准中的字符。</p><p><img data-src="/2019/12/19/T-c-what-the-fuck/image-20211114154548480.png" alt="image-20211114154548480"></p><p>Image: <a href="https://www.wikiwand.com/en/ISO/IEC_646" target="_blank" rel="noopener">Wikipedia</a></p><p>经常使用 C 的朋友应该一眼就看出这里缺少了哪 9 个字符吧，它们是这几个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">## \ ^ [ ] | &#123; &#125; ~</span><br></pre></td></tr></table></figure><p>有的朋友看了上面的表格可能会反倒感到困惑，哪儿缺少了，这 9 个字符不都在表格里吗？哈哈，注意一下，这 9 个字符都是灰色的，因为他们是各个国家的规则而不是国际规则。</p><p>有趣起来啦，让我们看个简单的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; a[i] = <span class="string">'\n'</span>; &#125;</span><br></pre></td></tr></table></figure><p>上面这段简单的代码要是由一个瑞典程序员来写的话，可能是这样的：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ä aÄiÜ = 'Ön'; ü</span><br></pre></td></tr></table></figure><p>为啥？因为他们那儿的字符规则里使用的字符和美国程序员不同嘛。</p><p>ANSI C 委员会自然也认识到这个问题了，于是它们决定引入三元符。用 9 种标准的字符组合来替换那些不标准的字符。</p><p><img data-src="/2019/12/19/T-c-what-the-fuck/image-20211114161003382.png" alt="image-20211114161003382"></p><p>Image: <a href="https://en.wikipedia.org/wiki/Digraphs_and_trigraphs" target="_blank" rel="noopener">Wikipedia</a></p><p>这种解决方案当然不太优雅，但至少能用。</p><p>晓得了这些，我们再来看一下前面的几段代码。首先是后面那段简单点的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!didIMakeAMistake() ??!??! CIsWrongHere();</span><br></pre></td></tr></table></figure><p>查看一下上面的表格，我们就知道这段代码里的 <code>??!</code> 实际上应该被取代为 <code>|</code>。因此这行代码的实际内容其实是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!didIMakeAMistake() || CIsWrongHere();</span><br></pre></td></tr></table></figure><p>如果你理解 <a href="https://en.wikipedia.org/wiki/Short-circuit_evaluation" target="_blank" rel="noopener">short-circuit evaluation</a> （短路求值）是怎么工作的，那你就应该知道这行代码也可以表示为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (didIMakeAMistake())</span><br><span class="line">  CIsWrongHere();</span><br></pre></td></tr></table></figure><p>前面提到的第一个例子就更有趣啦，这也是一个我们为什么应该谨慎使用三元符的典例。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// What will be the value of a????/</span></span><br><span class="line">a++;</span><br></pre></td></tr></table></figure><p>上面已经说过啦，这段代码执行后，变量 <code>a</code> 的值实际上还是 <code>0</code>，因为 <code>a++;</code> 根本就不会被执行。</p><p>注意，只有当 <code>??</code> 后面跟随的字符在上面表格里的 9 个字符串里面，<code>??</code> 与该字符组成的字符串才会被识别为三元组。所以 C 预处理器将会把上面的代码处理为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// What will be the value of a??\</span></span><br><span class="line">a++;</span><br></pre></td></tr></table></figure><p>这里的 <code>\</code> 实际上是换行的转移符，所以这段代码实际上又相当于：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// What will be the value of a??a++;</span></span><br></pre></td></tr></table></figure><p>你瞧，这就是为什么 <code>a++;</code> 不会被执行。</p><p>I would like to end with a note from the committee itself:</p><blockquote><p>The Committee makes no claims that a program written using trigraphs looks attractive. As a matter of style, it may be wise to surround trigraphs with white space, so that they stand out better in program text. Some users may wish to define preprocessing macros for some or all of the trigraph sequences.</p><p><a href="http://www.open-std.org/jtc1/sc22/wg14/www/C99RationaleV5.10.pdf" target="_blank" rel="noopener">Rationale for International Standard Programming Languages C</a> (5.2.1.1)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Manjaro 个人新装配置</title>
      <link href="/2019/12/18/manjaro/"/>
      <url>/2019/12/18/manjaro/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>[update-2020-05-17]</p><p>安装的版本：Linux version 5.3.15-1-MANJARO</p><p>Manjaro 基于 Arch Linux，下面许多是 Arch 特性，但为了统一我都用 Manjaro 表示……</p><p>Arch 安装可以稍微参考这篇安装记录： <a href="https://wiki.leay.net/tech/config/linux/2020-02-23-archer-s-arch/" target="_blank" rel="noopener">Archer`s Arch</a></p><h3 id="建议"><a class="markdownIt-Anchor" href="#建议"></a> 建议</h3><p>文中对「如何做启动盘」等基础问题都没有详细说明，若是想要从零安装 Manjaro 系统建议在网上找一篇较新的教程。</p><p>期间若有问题可以优先查阅：<a href="https://wiki.archlinux.org/index.php/General_recommendations_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="noopener">ArchWiki 建议阅读 中文版</a></p><p>PS：不过本文对 <a href="#%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95">中文输入方案</a> （fcitx + 中文输入 + 双拼 + 直角引号配置……）与 <a href="#%E9%85%8D%E7%BD%AE%E6%BA%90">源的配置</a> （三类源，从哪找镜像……）介绍得还比较详细，其它发行版也阔以参考。</p><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><p>镜像下载推荐：<a href="https://mirrors.ustc.edu.cn/manjaro-cd/" target="_blank" rel="noopener">中科大</a></p><p>写入工具推荐：<a href="https://rufus.ie/" target="_blank" rel="noopener">rufus</a></p><p>说明：镜像目录里有 gnome、kde、xfce，这是官方提供的基于 Manjaro 的不同桌面环境。</p><p>各种不同之处与选择斟酌不提。（选择困难症建议 kde，我用着挺爽的……）</p><p>PS：还有各种社区桌面版本，比如 manjaro-deepin。</p><h2 id="配置源"><a class="markdownIt-Anchor" href="#配置源"></a> 配置源</h2><p>PS：把源设置好，装软件才方便嘛，所以先谈配置源。</p><h3 id="配置国内源"><a class="markdownIt-Anchor" href="#配置国内源"></a> 配置国内源</h3><h4 id="直接添加"><a class="markdownIt-Anchor" href="#直接添加"></a> 直接添加</h4><p>这儿配置的是就是 pacman 安装软件时使用的源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman-mirrors -i -c China -m rank</span><br></pre></td></tr></table></figure><p>执行后会弹出提示框，勾选需要使用的源即可。</p><p>然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure><p>查看是否含有刚才选择的源，若有则完成。</p><p><strong>PS：当然，直接手动在该文件添加源地址也是可以的。</strong></p><h4 id="手动在该文件添加源地址"><a class="markdownIt-Anchor" href="#手动在该文件添加源地址"></a> 手动在该文件添加源地址</h4><p>PS：可以使用 Arch 提供的镜像生成器<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>找到最新的镜像：<a href="https://www.archlinux.org/mirrorlist/" target="_blank" rel="noopener">Pacman Mirrorlist Generator</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## Arch Linux repository mirrorlist</span></span><br><span class="line"><span class="comment">## Generated on 2020-03-06</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## China</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.163.com/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.cqu.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.cqu.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirror.lzu.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.neusoft.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.neusoft.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirror.redrock.team/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirror.redrock.team/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.sjtug.sjtu.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.xjtu.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.zju.edu.cn/archlinux/$repo/os/$arch</span></span><br></pre></td></tr></table></figure><p>生成如上源后，手动粘贴至 <code>/etc/pacman.d/mirrorlist</code> 。</p><h3 id="可选添加-archlinuxcn-源"><a class="markdownIt-Anchor" href="#可选添加-archlinuxcn-源"></a> 【可选】添加 ArchLinuxCN 源</h3><blockquote><p>ArchLinuxCN 是 Arch 中文组维护的一个软件合集，包含了中文用户常用的 WPS Office、搜狗拼音、Google Chrome 等软件。<strong>不过，Arch 本身和它的常见衍生版（如：Manjaro）默认都不包含这个源，因此我们需要手动来配置使用这个源。</strong></p><p><a href="https://www.jianshu.com/p/80d0ec113c0a" target="_blank" rel="noopener">如何配置 ArchLinuxCN 软件源</a></p></blockquote><p><strong>如上所说，如果没装这些软件的需求可以先不配置。</strong></p><h4 id="添加"><a class="markdownIt-Anchor" href="#添加"></a> 添加</h4><p>打开 <code>etc/pacman.conf</code>。Manjaro 自带 nano 和精简的 vim（vi），建议用 nano，vi 使用方向键会乱码。（方向移动是 h/j/k/l）</p><blockquote><p># 安装完整 vim</p><p>sudo pacman -Sy vim</p></blockquote><p>ArchLinuxCN 的源可以在这里<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>查看：<strong><a href="https://github.com/archlinuxcn/mirrorlist-repo" target="_blank" rel="noopener">arch-linux-mirrorlist</a></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开 etc/pacman.conf</span></span><br><span class="line">sudo nano /etc/pacman.conf</span><br></pre></td></tr></table></figure><p>添加你找到的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel = Optional TrustedOnly</span><br><span class="line">Server = http://mirrors.tuna.tsinghua.edu.cn/archlinuxcn//<span class="variable">$arch</span></span><br></pre></td></tr></table></figure><p>同理这里用的清华源。</p><h4 id="导入-gpg-key-并更新系统"><a class="markdownIt-Anchor" href="#导入-gpg-key-并更新系统"></a> 导入 GPG key 并更新系统</h4><p>看包名就能猜到这是 archlinuxcn 的 key，安装后作为验证，就可以安装软件了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新数据源</span></span><br><span class="line">sudo pacman -Syy</span><br><span class="line"><span class="comment"># 安装导入 GPG key</span></span><br><span class="line">sudo pacman -S archlinuxcn-keyring</span><br><span class="line"><span class="comment"># 更新系统</span></span><br><span class="line">sudo pacman -Syu</span><br></pre></td></tr></table></figure><h3 id="可选aur-源"><a class="markdownIt-Anchor" href="#可选aur-源"></a> 【可选】AUR 源</h3><p>AUR 源可以使用清华源，文档<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>见这：<a href="https://mirror.tuna.tsinghua.edu.cn/help/AUR/" target="_blank" rel="noopener">清华大学开源软件镜像站</a></p><p>yay 用户执行以下命令修改 aururl :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay --aururl <span class="string">"https://aur.tuna.tsinghua.edu.cn"</span> --save</span><br></pre></td></tr></table></figure><p>修改的配置文件位于 <code>~/.config/yay/config.json</code> ，还可通过以下命令查看修改过的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -P -g</span><br></pre></td></tr></table></figure><p>yay 是一个包管理软件，与 pacman 的不同之处在于 yay 用于在终端安装 AUR 的包。<strong>具体，阔以查看下面的 <a href="#%E5%8C%85%E7%AE%A1%E7%90%86">包管理</a> 。</strong></p><h2 id="中文输入法"><a class="markdownIt-Anchor" href="#中文输入法"></a> 中文输入法</h2><p>输入法引擎见这：<a href="https://wiki.archlinux.org/index.php/Fcitx_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E8%BE%93%E5%85%A5%E6%B3%95%E5%BC%95%E6%93%8E" target="_blank" rel="noopener">Fcitx_输入法引擎</a></p><p>我选用的是 sunpinyin。</p><h3 id="安装-fcitx"><a class="markdownIt-Anchor" href="#安装-fcitx"></a> 安装 fcitx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Sy fcitx</span><br><span class="line">sudo pacman -S fcitx-sunpinyin <span class="comment"># sunpinyin</span></span><br><span class="line">sudo pacman -S fcitx-configtool <span class="comment"># 配置工具</span></span><br></pre></td></tr></table></figure><h3 id="不能输入中文"><a class="markdownIt-Anchor" href="#不能输入中文"></a> 不能输入中文</h3><p>建议查看：<a href="https://wiki.archlinux.org/index.php/Fcitx_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E8%BE%93%E5%85%A5%E6%B3%95%E6%A8%A1%E5%9D%97" target="_blank" rel="noopener">Fcitx_(简体中文)#输入法模块</a> 里的设置环境变量。</p><p>有些教程让修改 <code>.xprofile</code> 等文件，我实测无用，大概是过期了。同理，下面的解决方案也不一定长久，所以建议按着上面文档里的最新情况来。</p><p>修改 <code>~/.pam_environment</code>（若无则新建），添加如下配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GTK_IM_MODULE=fcitx</span><br><span class="line">QT_IM_MODULE=fcitx</span><br><span class="line">XMODIFIERS=@im=fcitx</span><br></pre></td></tr></table></figure><p>然后重启之。</p><h3 id="双拼配置自选方案"><a class="markdownIt-Anchor" href="#双拼配置自选方案"></a> 双拼配置自选方案</h3><h4 id="图形化工具配置"><a class="markdownIt-Anchor" href="#图形化工具配置"></a> 图形化工具配置</h4><p>如果装了 fcitx-configtool 这个图形化工具，可以在里面搜索「pinyin」找到双拼的选项，直接配置。</p><h4 id="手动配置"><a class="markdownIt-Anchor" href="#手动配置"></a> 手动配置</h4><p>fcitx 自带双拼输入法，使用的是自然码。如需修改为其它双拼方案，按如下操作即可。</p><p>打开 <code>~/.config/fcitx/conf/fcitx-pinyin.config</code>。</p><p>能看到默认双拼方案是自然码（Ziranma）。</p><p>我用的小鹤双拼，所以取消注释并修改为 XiaoHe。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DefaultShuangpinSchema=XiaoHe</span><br></pre></td></tr></table></figure><p>修改后重启输入法就能生效啦。（右键任务栏的键盘，选择重新启动。）</p><p><strong>PS：该文件里还有一些配置项，可以按自己需求修改……</strong></p><h3 id="简体中文输入法使用直角引号"><a class="markdownIt-Anchor" href="#简体中文输入法使用直角引号"></a> 简体中文输入法使用直角引号</h3><p>修改 <code>/usr/share/fcitx/data/</code>文件夹下以「zh-CN」结尾的文件。</p><p>「zh-CN」对应的就是简体中文输入法。</p><p>该文件名因系统不同有差异。比如在我当前的 Manjaro 版本，该文件为<code>punc.mb.zh_CN</code>。而在我之前使用的 deepin 系统上，该文件为<code>punc-ng.mb.zh_CN</code>。我还在网络上看到一些人的是<code>punc-ng.mb-zh_CN</code>。</p><p>将对应的「&quot;」与「’」按如下修改即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">" 「 」</span><br><span class="line">' 『 』</span><br></pre></td></tr></table></figure><p>注意！<code>/usr/share/fcitx/data/</code> 下的文件是「全局配置文件」。建议将该文件复制到用户目录，即<code>~/.config/fcitx/data/</code>下面再进行修改。</p><h3 id="拼音云输入"><a class="markdownIt-Anchor" href="#拼音云输入"></a> 拼音云输入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo pacman -Sy fcitx-cloudpinyin</span><br></pre></td></tr></table></figure><p>安装后在「配置—附加组件」里找到可以修改云拼音来源，大陆用户就修改为百度吧～</p><p>不过我现在（码这篇博文的现在）没感觉到这云拼音有啥用……</p><h3 id="其它"><a class="markdownIt-Anchor" href="#其它"></a> 其它</h3><p>网络上提到的 wine 系软件不能输入中文之类的问题倒是没遇到……</p><p>不过遇到了网易云不能输入中文，非刚需自己就没折腾。</p><h2 id="仅供参考软件替换建议"><a class="markdownIt-Anchor" href="#仅供参考软件替换建议"></a> 【仅供参考】软件替换建议</h2><h3 id="vim"><a class="markdownIt-Anchor" href="#vim"></a> vim</h3><p>上面提到了 Manjaro 自带精简的 vim（即 vi），用着不太顺手。卸载再安装完整版即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载并安装</span></span><br><span class="line">sudo pacman -Rs vi &amp; sudo pacman -Sy vim</span><br></pre></td></tr></table></figure><h3 id="其它-2"><a class="markdownIt-Anchor" href="#其它-2"></a> 其它</h3><p>之前我建议用 deepin 的截图等工具，但是一方面使用它们引入 deepin 相关的依赖太多了，另一方面感觉自带的终端等用起也还不错……</p><p><strong>下面算是一个简单的软件推荐吧……</strong></p><p>截图：flameshot 这个软件感觉和 deepin-screenshot 差不多，甚至更小更强大。</p><p>录屏：peek 小巧强大</p><p>QQ/tim 可以装 deepin 的，不过只是能用……（其实使用官方的 Linux QQ 也还行……）</p><p>文本编辑器可以使用 kde 提供的 KWrite，轻量级的使用挺方便的，打开又快……</p><h2 id="应用配置"><a class="markdownIt-Anchor" href="#应用配置"></a> 应用配置</h2><h3 id="默认应用设置"><a class="markdownIt-Anchor" href="#默认应用设置"></a> 默认应用设置</h3><p>既然软件都替换了，相应的把默认应用也修改一下吧。</p><p>进入「设置—个性化—默认应用设置」。</p><h3 id="快捷键配置"><a class="markdownIt-Anchor" href="#快捷键配置"></a> 快捷键配置</h3><p>将截图和终端的快捷键设置一下。</p><p>进入「系统设置—工作区—快捷键」。</p><p><strong>在「全局快捷键」添加应用，设置快捷键无效，需要「自定义快捷键」。</strong></p><p>以「深度截图」举例。</p><p>在「自定义快捷键」新建一个「全局快捷键—命令/URL」，在触发器设置快捷键，在动作设置「命令/URL」。</p><p>这个「命令/URL」是啥玩意？在这里简单理解为启动软件的命令即可。</p><p>在「程序启动器」搜索找到软件，右键软件的图标，点击「编辑应用程序」，点击「应用程序」，就可以看到「命令」。</p><p>比如在应用栏里找到「深度截图」，右键图标，点击「编辑应用程序」，点击「应用程序」将「命令」栏里的链接复制粘贴过来即可。</p><p><strong>PS：默认 f12 为下拉式终端，为了避免与浏览器调试的快捷键冲突，建议更换……</strong></p><h3 id="linux-应用配置的迁移"><a class="markdownIt-Anchor" href="#linux-应用配置的迁移"></a> Linux 应用配置的迁移</h3><p>使用的各种软件的配置都放在用户目录下，每次迁移系统备份 <code>home</code> 文件夹太慢了，如果我们<strong>没有啥非常重要的需求</strong>，完全可以只把用户目录下必要软件的配置迁移过来。</p><p>比如 <code>~/.IntelliJIdea2019.3</code>、<code>~/.gradle</code>……</p><p>将上面这些软件的配置文件夹从原系统备份出来，再移动到新系统的用户目录即可。</p><p>推荐一个软件配置备份的工具<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>：<a href="https://github.com/lra/mackup" target="_blank" rel="noopener">https://github.com/lra/mackup</a></p><p>也可以用它管理 dotfiles。</p><h3 id="配置-jdk"><a class="markdownIt-Anchor" href="#配置-jdk"></a> 配置 jdk</h3><p>使用官方提供的方式安装。</p><p>先用包管理安装 jdk。（只提供 openjdk）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先搜索一个</span></span><br><span class="line">yay -Ss jdk</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yay -Sy java-8-openjdk</span><br><span class="line"><span class="comment"># 查看 jdk</span></span><br><span class="line">archlinux-java status</span><br><span class="line"><span class="comment"># 设置默认 jdk</span></span><br><span class="line">sudo archlinux-java <span class="built_in">set</span> java-8-openjdk</span><br></pre></td></tr></table></figure><h2 id="包管理说明"><a class="markdownIt-Anchor" href="#包管理说明"></a> 包管理说明</h2><h3 id="pacman"><a class="markdownIt-Anchor" href="#pacman"></a> pacman</h3><p>Manjaro 提供了一个包管理的终端程序 pacman，详见：<a href="https://wiki.archlinux.org/index.php/Pacman_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="noopener">Pacman 简中说明</a> 。</p><p>在 Manjaro 提供的桌面程序软件中心里，应用有 Community 和 AUR 的分别。该桌面程序可以安装 Community 程序也可以安装 AUR 程序——不过安装 AUR 程序的提示信息是「构建」。</p><p>AUR，即 Arch User Repository，Arch 用户仓库。而 Community 指的是 Arch 的官方仓库。用户将软件放在 AUR，Arch 官方则定期挑选 AUR 里的优秀程序到 community。</p><p>实际表现为 Community 为 AUR 的子集，Community 有的应用 AUR 都有，但是 Community 拥有但 AUR 没有的那部分软件可能在系统上的运行表现不大稳定。</p><p>pacman 只能在终端安装 Community 程序，想要在终端安装 AUR 程序则需要再安装一个包管理工具。</p><p><strong>有些教程里用的 yaourt，但该工具已经在 Arch 文档标记过时了，不建议使用。</strong></p><p>具体选用啥可以自己搜索斟酌，我用的 yay。</p><h3 id="yay"><a class="markdownIt-Anchor" href="#yay"></a> yay</h3><p>安装如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://aur.archlinux.org/yay.git</span><br><span class="line"><span class="built_in">cd</span> yay</span><br><span class="line">makepkg -si</span><br></pre></td></tr></table></figure><p>PS：在软件中心里构建 AUR 程序其实就是相当于帮我们做了手动 <code>makepkg</code> 的工作。</p><h3 id="命令"><a class="markdownIt-Anchor" href="#命令"></a> 命令</h3><p>yay 兼容 Pacman 的命令行参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## pacman</span></span><br><span class="line">pacman -Syu <span class="comment"># 同步数据包后更新系统</span></span><br><span class="line"></span><br><span class="line">pacman -Sy 包名 <span class="comment"># 同步包数据库后安装。</span></span><br><span class="line"></span><br><span class="line">pacman -R 包名 <span class="comment"># 删除包不删除依赖</span></span><br><span class="line">pacman -Rs 包名 <span class="comment"># 删除包的同时删除不被其它包使用的依赖</span></span><br><span class="line">pacman -Rd 包名 <span class="comment"># 删除包不检查依赖</span></span><br><span class="line"></span><br><span class="line">pacman -Ss 关键字 <span class="comment"># 搜索含关键字的包。</span></span><br><span class="line">pacman -Qi 包名 <span class="comment"># 查看有关包的信息。</span></span><br><span class="line"></span><br><span class="line">pacman -Sc Pacman <span class="comment">#清理未安装的包文件</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## yay</span></span><br><span class="line">yay -Su <span class="comment"># 升级软件库</span></span><br><span class="line">yay -Sy <span class="comment"># 更新软件库</span></span><br><span class="line">yay -Syy <span class="comment"># 强制更新软件库</span></span><br><span class="line">yay -Sy 包名 <span class="comment"># 安装命令</span></span><br><span class="line">yay -Rs 包名 <span class="comment"># 卸载命令</span></span><br><span class="line">yay -Ss 关键字 <span class="comment"># 搜索命令</span></span><br></pre></td></tr></table></figure><h2 id="其它问题"><a class="markdownIt-Anchor" href="#其它问题"></a> 其它问题</h2><h3 id="修改主目录为英文"><a class="markdownIt-Anchor" href="#修改主目录为英文"></a> 修改主目录为英文</h3><p><a href="https://www.jianshu.com/p/73299b8e3f58" target="_blank" rel="noopener">原文</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pacman -S xdg-user-dirs-gtk</span><br><span class="line">$ <span class="built_in">export</span> LANG=en_US</span><br><span class="line">$ xdg-user-dirs-gtk-update</span><br><span class="line"><span class="comment"># 然后会有个窗口提示语言更改，更新名称即可</span></span><br><span class="line">$ <span class="built_in">export</span> LANG=zh_CN.UTF-8</span><br><span class="line">$ sudo pacman -Rs xdg-user-dirs-gtk</span><br></pre></td></tr></table></figure><h3 id="deepin-截图不能粘贴"><a class="markdownIt-Anchor" href="#deepin-截图不能粘贴"></a> deepin 截图不能粘贴</h3><p><a href="https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=151823" target="_blank" rel="noopener">原文</a></p><p>我试了下，安装 GPaste 并启动就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yay -Rs gpaste</span><br></pre></td></tr></table></figure><p>卸载后虽然仍起作用，但重启就不行了。</p><h3 id="vmware-的安装"><a class="markdownIt-Anchor" href="#vmware-的安装"></a> VMware 的安装</h3><p>某些特殊软件安装前建议看下官方 WIKI，比如 VMware<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>，我想当然地用 <code>pacman</code> 一把梭装上，并不能正常使用。</p><p>安装方式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pacman build vmware-workstation</span><br><span class="line">sudo modprobe -a vmw_vmci vmmon</span><br><span class="line"></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> --now vmware-networks.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> --now vmware-usbarbitrator.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> --now vmware-hostd.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不然使用时各种报错（主要是联网）</span></span><br></pre></td></tr></table></figure><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://www.archlinux.org/mirrorlist/" target="_blank" rel="noopener">Pacman Mirrorlist Generator</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://github.com/archlinuxcn/mirrorlist-repo" target="_blank" rel="noopener">arch-linux-mirrorlist</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://mirror.tuna.tsinghua.edu.cn/help/AUR/" target="_blank" rel="noopener">清华大学开源软件镜像站</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><a href="https://github.com/lra/mackup" target="_blank" rel="noopener">https://github.com/lra/mackup</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p><a href="https://wiki.manjaro.org/index.php?title=VMware" target="_blank" rel="noopener">Manjaro-WIKI-VMware</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 配置与操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 配置与操作 </tag>
            
            <tag> Manjaro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路上动物观察</title>
      <link href="/2019/12/12/cats-on-the-road/"/>
      <url>/2019/12/12/cats-on-the-road/</url>
      
        <content type="html"><![CDATA[<h2 id="零"><a class="markdownIt-Anchor" href="#零"></a> 零</h2><p>他们都说狗改不了吃屎，这词用得有点粗，但也是一代代人传下来的。现代人都比较文明，这种俗话只在必要的时候使用。</p><p>但我觉得事情不是这样的。</p><p>我在北乌垭的工地上就遇到过一条大土狗，一脸凶相，皮贴着肋骨，黄色的狗毛黯淡、多处无毛暴露着结疤。虽然如此，但它并非流浪狗。与流浪狗的区别在于它有狗窝，还有自己的饭碗，以及一位主人。它的饭碗是块扁形的方石片，中间有道凹槽可以装点东西。能装流食，但多了会溢。我有次往里面瞧，有一丝土豆皮黏在边沿。我推测那是土豆皮，是因为有几次早上从那路过时看到这狗的主人坐在屋子外面吃土豆稀饭。</p><p>那天中午在休工回去的路上，老远就听到狗的悲鸣。我估摸着距离心想可能是这条狗，不晓得又发生了啥。近了，便看到它的主人拿着一根藤条在抽打它。奇怪的很，这傻狗只是卧在地上惨叫，不晓得跑。我们一行人看不过去就劝那主人，问道说咋回事，发这么大火。</p><p>身旁的工友本来还在讨论说是不是这狗饿得遭不住把他家里肉偷吃了，那主人看着我们走过来已经减轻了下手的力道，听到有人劝，就把藤条丢到一边。傻狗这才起身瘸着往窝里移动，一边动一边发出轻微细碎的吠叫。那主人解释说，家里婴儿不小心把屎拉在地板上了，他就喊这狗来吃了，把地板清理哈。没想到这狗进屋子看到主人把它往屎堆上招呼，转身就往外跑。主人心想这狗日的连屎都不吃，就出门折了根枝条要收拾收拾它。</p><p>回到宿舍区后急着开饭，这事有点不太方便谈论。再过后，也就从大家脑子里遗忘了。今天想着把自己前段时间记录下的猫猫狗狗放到这里，突然就又回忆起这件事。有句话有点蠢，但一直在我的脑子里打转，我得说出来，不说出来我不舒服。——我想，有些狗，可能生来是不吃屎的。</p><h2 id="一"><a class="markdownIt-Anchor" href="#一"></a> 一</h2><p><strong>多图警告。</strong></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/2018_05_05_21_55_IMG_0275.JPG" alt="2018_05_05_21_55_IMG_0275"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/2018_07_30_22_54_IMG_0274.JPG" alt="2018_07_30_22_54_IMG_0274"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/2019_05_08_16_21_IMG_0326.JPG" alt="2019_05_08_16_21_IMG_0326"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/2018_08_28_07_10_CDCD017F-43CD-4F96-8D35-EC4A591B5C36.JPG" alt="2018_08_28_07_10_CDCD017F-43CD-4F96-8D35-EC4A591B5C36"></p><h2 id="二"><a class="markdownIt-Anchor" href="#二"></a> 二</h2><p><strong>眩晕警告。</strong></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/1576124679933.jpeg" alt="1576124679933"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/2019_06_14_09_41_IMG_0832.jpg" alt="2019_06_14_09_41_IMG_0832"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/2019_07_20_21_58_IMG_1081.jpg" alt="2019_07_20_21_58_IMG_1081"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/1576124563565.jpeg" alt="1576124563565"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/1576124591114.jpeg" alt="1576124591114"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/1576124599417.jpeg" alt="1576124599417"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/1576124618217.jpeg" alt="1576124618217"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/1576124708207.jpeg" alt="1576124708207"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/1576124717797.jpeg" alt="1576124717797"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/1576124740003.jpeg" alt="1576124740003"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/1576124746737.jpeg" alt="1576124746737"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/IMG_20191211_140132.jpg" alt="IMG_20191211_140132"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/1576124651711.jpeg" alt="1576124651711"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/1576124672368.jpeg" alt="1576124672368"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/1576124675912.jpeg" alt="1576124675912"></p><h2 id="三"><a class="markdownIt-Anchor" href="#三"></a> 三</h2><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/IMG_20191212_123217.jpg" alt="IMG_20191212_123217"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/1576124647638.jpeg" alt="1576124647638"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/1576124609374.jpeg" alt="1576124609374"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/1576124580517.jpeg" alt="1576124580517"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/1576124686233.jpeg" alt="1576124686233"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/1576124700532.jpeg" alt="1576124700532"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/1576124704412.jpeg" alt="1576124704412"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/1576124728990.jpeg" alt="1576124728990"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/IMG_20191211_140021.jpg" alt="IMG_20191211_140021"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/IMG_20191211_140044.jpg" alt="IMG_20191211_140044"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/1576124556948.jpeg" alt="1576124556948"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/1576124568789.jpeg" alt="1576124568789"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/1576124656041.jpeg" alt="1576124656041"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/1576124659887.jpeg" alt="1576124659887"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/1576124668575.jpeg" alt="1576124668575"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/IMG_20191211_140357.jpg" alt="IMG_20191211_140357"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/IMG_20191212_123152.jpg" alt="IMG_20191212_123152"></p><h2 id="四"><a class="markdownIt-Anchor" href="#四"></a> 四</h2><p>后两张来源校官方微博，避免暴露多余信息就不具体标注了……</p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/1569934640714.jpg" alt="1569934640714"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/IMG_20191212_123621.jpg" alt="IMG_20191212_123621"></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/gallery/animal/IMG_20191212_123645.jpg" alt="IMG_20191212_123645"></p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 图册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片所记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从换域名谈谈 DNS</title>
      <link href="/2019/11/13/dns/"/>
      <url>/2019/11/13/dns/</url>
      
        <content type="html"><![CDATA[<h2 id="前因"><a class="markdownIt-Anchor" href="#前因"></a> 前因</h2><p>前阵子被「备案信息复查」，当头一棒，我都忘记自己备过案了。一愣神，我以为域名都必须要备案才能用，问了下室友，才突然想起自己当时备案是因为「域名必须要备案才能指向腾讯云服务器的 IP」。</p><p>扫了一眼要求 —— 1、在腾讯云备案成功的域名需要解析至腾讯云服务器；2、网站内容不能涉及博客；3、网站标题需要与网站名称一致。4、电话沟通说不能有评论。</p><p>其实貌似备案也不是很严格，修改审核完事后再改过来也行……</p><p><s>还是不要在违法的边缘试探为好</s></p><p>其他都还好，「网站标题需要与网站名称一致」这一条太沙雕了。我备案时的网站名是「三岛有纪夫」，总有人觉得我读了很多三岛由纪夫的书，其实我对他不是很了解，纯粹是觉得这样玩弄字眼很有趣。</p><p>现在我不想顶着「三岛有纪夫」这个名字了，不符合我现在的人设。</p><p>打算换个轻松点的域名，记得 <a href="https://lhcy.org/" target="_blank" rel="noopener">林海草原</a> 对此有研究，便请教了下。</p><h2 id="注册域名与设置第三方-dns-服务器"><a class="markdownIt-Anchor" href="#注册域名与设置第三方-dns-服务器"></a> 注册域名与设置第三方 DNS 服务器</h2><p>于是在 <a href="https://porkbun.com/" target="_blank" rel="noopener">https://porkbun.com</a> 注册 —— 「价格比较低、免费隐私保护、彻底不泄露、服务极好。」购买需要 Paypal 与 Vista 信用卡。（之前申请了张中国银行的学生信用卡</p><p>把 DNS 服务器换为第三方，<a href="https://dns.he.net/" target="_blank" rel="noopener">https://dns.he.net/</a>。</p><p>我还是第一次使用第三方 DNS，说起来其实步骤很简单。</p><p>在域名商的域名管理界面将 AUTHORITATIVE NAMESERVERS（权限域名服务器）修改为第三方 DNS 服务器提供的。比如使用 <a href="http://he.net" target="_blank" rel="noopener">he.net</a> 的话，在 <a href="http://he.net" target="_blank" rel="noopener">he.net</a> 注册后就会有个醒目的提示告诉你去修改，以及修改为啥。完事后再在 <a href="http://he.net" target="_blank" rel="noopener">he.net</a> 提供的管理界面添加域名 —— 然后就可以在 <a href="http://he.net" target="_blank" rel="noopener">he.net</a> 管理域名的解析啦。</p><p>当时看的这篇文章：<a href="https://wzfou.com/he-net-dns/" target="_blank" rel="noopener">He.net DNS 域名解析申请使用 - 免费 DDNS、IPv6 地址和 Slave DNS</a></p><p>回头看步骤其实很简单，不过因为我是第一次接触，而且 AUTHORITATIVE NAMESERVERS 修改生效的时间有点长 —— 导致我在等待的时间里总觉得自己哪儿弄错了，然后折腾……所以花了好一阵子时间。</p><h2 id="裸域名不能设置-cname"><a class="markdownIt-Anchor" href="#裸域名不能设置-cname"></a> 裸域名不能设置 CNAME</h2><p>遇到了一个问题：</p><blockquote><p>Sorry, you can’t have a CNAME on the root domain. It violates RFC, will break things, and probably cause your own personal space time to collapse in on itself.</p><p>You probably want to use an ALIAS record instead.</p></blockquote><p>说是违反了 RFC，可能会导致一些问题。之前用阿里云和腾讯云自带的解析都没遇到这个问题啊，搜索了下。大意可以如下解释：</p><p>阿里云和腾讯云用了些「特殊手段」让用户可以给裸域名设置 CNAME。至于是啥「特殊手段」？搞不好就是上面说的方法 —— use ALIAS。</p><p>会产生啥问题呢？</p><p>MX 记录有可能会和 CNAME 记录冲突。</p><p>具体可以看讨论：<a href="https://www.v2ex.com/t/204489" target="_blank" rel="noopener">为什么裸域名不可以设置 CNAME？</a> 17、26、27 楼。</p><p>没细看，解决方法很简单：用 ALIAS 记录解析就行了。</p><h2 id="域名-dns-解析的过程"><a class="markdownIt-Anchor" href="#域名-dns-解析的过程"></a> 域名 DNS 解析的过程</h2><p>DNS 在域名和实际 IP 间起着桥梁的作用。都说需要用 DNS 把域名解析为 IP，那么为啥需要得到 IP 呢？因为在计算机网络中，计算机需要通过 IP 去寻找和它通信的家伙。 —— 当初就是这么设计的。（IP 就相当于门牌号咯）</p><p>IP 和地域相关，比如网上就有通过 IP 反查地址的工具。</p><p>回到 DNS，如果我们从浏览器输入一个域名谈起，那么就会经历如下步骤：1、浏览器缓存；2、计算机缓存；3、本地 DNS 服务器……</p><p>如果你修改过 hosts，可能就遇到过刷新计算机 DNS 缓存。有时候，某些网站被 GFW 挡住了，可以通过修改 hosts 访问。这是因为 GFW 对该站进行了 DNS 污染。所谓的 DNS 污染，大意就是指通过某种手段让你的域名指向错误的 IP。你在本地通过 hosts 映射了域名与 IP，浏览器访问时就直接用本地 hosts 的 IP 去建立连接。这样，就躲避了 DNS 污染啦……</p><p>有时候，对于被 DNS 污染了，但你仍想访问的网站。可以使用域名反查 IP 的工具查到 IP，然后通过 IP 访问。修改 hosts 科学上网就是这个原理。</p><p>一些破解 intellij 系软件的方法会修改 hosts 将 intellij 的激活域名指向本地（localhost），则是利用这点让激活服务无法正常运行。</p><p>啥是本地 DNS 服务器？不细聊概念。一般来说，本地 DNS 服务器默认的是运营商提供的 DNS。「运营商提供的 DNS」对一般用户来说是够用的，前提是你对互联网有一定的「钝感力」。运营商时常搞些幺蛾子 —— 也许你就遇到过，像网络运营商劫持：网页被加上一些莫名其妙的广告，或者域名被解析到一个莫名其妙的网站（DNS 劫持）……</p><p>如果你遇到了这些现象且难以忍受，也可以把本地 DNS 设置为其它的。比如国内的口碑较好的有 <a href="http://www.114dns.com/" target="_blank" rel="noopener">114 DNS</a> 。Windows 用户可以用 <a href="https://www.sordum.org/7952/dns-jumper-v2-1/" target="_blank" rel="noopener">DNS jumper</a> 这个软件方便选择并切换。</p><p>前面说过 DNS 充当着域名与 IP 的桥梁，那也就是说 DNS 知道你访问了哪些域名。（这才能去查 IP 嘛）因此一部分有特殊需求的用户对国内的 DNS 服务不是很信任，会使用国外的 DNS。但一般来说，国外的解析速度肯定比不上国内。</p><blockquote><p>插一句：大一把流量用得超出套餐了，便以没收到流量预警短信为由向联通客服反应。（不记得是不是真没收到了，应该是真的吧，不然我这么谨慎的小孩也不至于干出这种事……）然后对面的客服似乎正数着条目向我说：您的流量都是有记录的，某某 APP 用了多少……</p><p>当时听着吓我一跳，赶快叫 Ta 别说了。</p></blockquote><p>本地 DNS 服务器查的也是缓存，如果在缓存查不到，就会去域名的 DNS 服务器查。OK！这里所说的「域名的 DNS 服务器」就是上面我提到的 AUTHORITATIVE NAMESERVERS（权限域名服务器）。比如我把本站域名的 AUTHORITATIVE NAMESERVERS 改为了 <a href="http://he.net" target="_blank" rel="noopener">he.net</a>，这时候「本地的 DNS 服务器」就会去 <a href="http://he.net" target="_blank" rel="noopener">he.net</a> 查询域名对应的 IP —— 这里的查询就很复杂了，不细讲。查到后，就会把 IP 放在自己的缓存里。</p><p>想像一下，你访问一个不存在的网站时，DNS 服务器找到（或者说弄出？）一个不存在的 IP 的出来，返回给你 —— 同时还放在自己的缓存里。这样子，不仅你访问不了这个不存在的网站（因为解析出来的 IP 错误）。DNS 服务器还会把你访问时产生的缓存同步至其它区域的缓存服务器 —— 非常快速地全方位污染。</p><p>每一步都有缓存，而缓存，当然有过期时间了。比如浏览器缓存，一般「Ctrl+F5」就会重新请求了。本地缓存，相信修改过 hosts 的都会记得有一个刷新的步骤。Windows 的 <code>IPconfig /flushdns</code>；<s>Linux 一般是重启 network：<code>service network restart</code>。</s></p><p>而在对域名进行解析时则有一个参数：TTL，这个设置就是更新缓存的频率（多久刷新一下）。比如理论上你修改一次解析后，要经过这么长的时间才会生效，但一般 DNS 服务都对此做了优化，你实际等不到那么久。</p><p>好啦，就是这样。</p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 自己浅见 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客记录 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对 Shiro 的理解与 Shiro + JWT</title>
      <link href="/2019/11/09/shiro+jwt/"/>
      <url>/2019/11/09/shiro+jwt/</url>
      
        <content type="html"><![CDATA[<h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><p>这篇文章不会涉及 Session、Cache 等……下文是我对 Shiro 简单的理解，也许能让我这样的新手尽可能快地利用 Shiro 实现自己的需求……</p><p><a href="https://github.com/hqweay/vue-springboot-restful-blog/blob/master/blog-backend/src/main/java/cn/hqweay/blog/config/ShiroConfig.java" target="_blank" rel="noopener">样例代码仓库</a></p><p>详见 <code>config/ShiroConfig</code> 与 <code>security/</code> 下的代码。</p><h2 id="shiro"><a class="markdownIt-Anchor" href="#shiro"></a> Shiro</h2><p>搜索任何一篇关于 Shiro 的资料，几乎都会在文章前面列出 Authentication、Authorization……我们先放下这些，关注权限控制的核心。</p><h3 id="身份验证"><a class="markdownIt-Anchor" href="#身份验证"></a> 身份验证</h3><p>首先，Shiro 把<strong>身份验证</strong>抽象为 principals（身份）和 credentials（凭证）。具体下来其实就对应我们平时使用的 username 与 password。简单来讲，「身份验证」其实也就对应「登录」。</p><p>登陆（身份验证）完成后，Shiro 首先确定了你是我们系统中的人（否则，你的状态就是游客），然后 Shiro 会通过某种方式去查询该用户「能做什么事」。</p><h3 id="授权"><a class="markdownIt-Anchor" href="#授权"></a> 授权</h3><p>「某用户能做什么事」在 Shiro 中对应的是「授权」的概念。要实现「授权」，了解 Shiro 中的四个概念即可。</p><p>Subject（主体）、Resource（资源）、Permission（权限）、Role（角色）。</p><p>Subject 就是你通过 username 和 password 登录进来的用户。</p><p>Resource 就是你要操作（增删改访问）的任何东西。比如一篇文章、一首歌……</p><p>Permission 是 Shiro 中的原子单位，指我们对某个 Resource 进行增删改访的权限。比如播放周杰伦的新专辑（你不买可不能播放哦）、比如访问某篇付费文章……</p><p>Role 其实就是 Permission 的集合。一般在用户层面被称为：普通用户、VIP、管理员、超级管理员……</p><h3 id="就这些"><a class="markdownIt-Anchor" href="#就这些"></a> 就这些</h3><p>要使用 Shiro 的话，了解这俩概念就行了。一个是<strong>身份验证</strong>，需要 principals 和 credentials。对应我们通常意义上的 username 和 password。一个是<strong>授权</strong>，核心是 Subject（主体）、Resource（资源）、Permission（权限）、Role（角色）。</p><p>身份验证其实就是 Authentication、授权信息则通过 Authorization 得到。</p><p>我们到配置 Shiro 的核心代码里看一下。</p><h2 id="realm-样例"><a class="markdownIt-Anchor" href="#realm-样例"></a> Realm 样例</h2><p>暂且抛开配置，Shiro 的核心只需要我们写一个自己的 Realm。</p><p>简单来说，Realm 配置的就是如何身份验证以及如何返回权限信息。虽然说的是「如何去……」，实际上我们只需要配置从哪获得用户的真实 credentials，从哪获得用户的权限信息即可。因为 Shiro 已经把身份验证抽象为「对比用户登录时输入的 username、password 和注册时存储的信息」。</p><p>也就是说，我们只需要写一个自己的 Realm，配置身份验证和授权数据的来源就行了！</p><p>看看 Realm 的模板：</p><h3 id="realm-模板"><a class="markdownIt-Anchor" href="#realm-模板"></a> Realm 模板</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 只有当需要检测用户权限的时候才会调用此方法，例如 checkRole,checkPermission 之类的</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//……</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 默认使用此方法进行用户名正确与否验证，错误抛出异常即可。</span></span><br><span class="line"><span class="comment">   * 认证信息 (身份验证)</span></span><br><span class="line"><span class="comment">   * Authentication 是用来验证用户身份</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken auth)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">   <span class="comment">//……</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，doGetAuthorizationInfo()、doGetAuthenticationInfo() 俩方法……</p><p>我们看看这俩方法的简单实现。</p><h3 id="realm-简单实现"><a class="markdownIt-Anchor" href="#realm-简单实现"></a> Realm 简单实现</h3><h4 id="权限验证"><a class="markdownIt-Anchor" href="#权限验证"></a> 权限验证</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken auth)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">  String token = (String) auth.getCredentials();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解密获得 username，用于和数据库进行对比</span></span><br><span class="line">  <span class="comment">// 通过 jwt 的 token 获取 username</span></span><br><span class="line">  String email = JWTUtil.getEmailByToken(token);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (email == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationException(<span class="string">"token invalid"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据 username 看后台是否能查到</span></span><br><span class="line">  User user = userService.getUserByEmail(email);</span><br><span class="line">  <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationException(<span class="string">"User didn't existed!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 验证 token</span></span><br><span class="line">  <span class="keyword">if</span> (!JWTUtil.verify(token, email, user.getPassword())) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationException(<span class="string">"Username or password error"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(token, token, <span class="string">"my_realm"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里其实本来应该是一个简单的 username 与 password 的判断（我的 username 使用的是 email）。我的数据是保存在数据库里的，通过服务 userService 获取。</p><p>用户信息也可以不放在数据库，放内存或就保存到硬盘也是可以的嘛……</p><p>如果数据库保存的是加密后的信息（明文保存当然也行——如果你愿意），可想而知这里的判断逻辑大概就是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 伪代码</span><br><span class="line">username &#x3D; auth.getUserName();</span><br><span class="line">pass &#x3D; Pass.Encryp(auth.getPass());&#x2F;&#x2F; 获取加密后的密码</span><br><span class="line">&#x2F;&#x2F;..</span><br><span class="line">User user &#x3D; userService.getUserByUserName(username);</span><br><span class="line">if(user.getPass() &#x3D;&#x3D; pass)&#123;</span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;……</span><br></pre></td></tr></table></figure><p>但我这里用的是 jwt 控制权限。jwt 做的事情其实可以简单归结为：把用户名和密码加密为一个 token（字符串），不过这个 token 是可以解密的。我们可以通过给定的解密方式（提供的方法）逆获取 username 和 password。</p><h4 id="授权信息"><a class="markdownIt-Anchor" href="#授权信息"></a> 授权信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  String email = JWTUtil.getEmailByToken(principals.toString());</span><br><span class="line"></span><br><span class="line">  User user = userService.getUserByEmail(email);</span><br><span class="line">  SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// user 获取 role</span></span><br><span class="line">  String role = userService.getRoleByEmail(email);</span><br><span class="line">  simpleAuthorizationInfo.addRole(role);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 权限判断</span></span><br><span class="line">  <span class="comment">// 根据 role 获取 permissions</span></span><br><span class="line">  Set&lt;String&gt; permissions = <span class="keyword">new</span> HashSet&lt;&gt;(userService.getPermissionsByRole(role));</span><br><span class="line">  simpleAuthorizationInfo.addStringPermissions(permissions);</span><br><span class="line">  <span class="comment">//Set&lt;String&gt; permission = new HashSet&lt;&gt;(Arrays.asList(user.getPermission().split(",")));</span></span><br><span class="line">  <span class="comment">//simpleAuthorizationInfo.addStringPermissions(permission);</span></span><br><span class="line">  <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，先通过 user 获取 role，再通过 role 获取 permission。</p><p>这就是上面授权里提到的 Subject（主体）、Permission（权限）、Role（角色）。</p><p>而授权里的 Resource（资源），具体就可以是某个 Controller 里的 API，我们可以在 API 对应的方法上通过注解配置来控制。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个通过 Role 控制，一个通过 Permission 控制。</span></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/require_role"</span>)</span><br><span class="line">  <span class="meta">@RequiresRoles</span>(<span class="string">"admin"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ResponseBean <span class="title">requireRole</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseBean(<span class="number">200</span>, <span class="string">"You are visiting require_role"</span>, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/require_permission"</span>)</span><br><span class="line">  <span class="meta">@RequiresPermissions</span>(logical = Logical.AND, value = &#123;<span class="string">"view"</span>, <span class="string">"edit"</span>&#125;)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ResponseBean <span class="title">requirePermission</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseBean(<span class="number">200</span>, <span class="string">"You are visiting permission require edit,view"</span>, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>从这里看 user、role、permission，也很容易看出它们应该是多对多的关系。</p><p>一个 user 可以有多个 role，一个 role 也可以有多个 permisson。</p><h2 id="补充shiro-jwt"><a class="markdownIt-Anchor" href="#补充shiro-jwt"></a> 补充——Shiro + JWT</h2><h3 id="realm"><a class="markdownIt-Anchor" href="#realm"></a> Realm</h3><p>上面的 Realm 模板并不完整，还需要重写一个 supports() 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(AuthenticationToken token)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> token <span class="keyword">instanceof</span> JWTToken;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 只有当需要检测用户权限的时候才会调用此方法，例如 checkRole,checkPermission 之类的</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line"><span class="comment">//……</span></span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">//……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JWTToken 是自己定义的一个 token 类，即便不懂我们其实也能大概猜出这里 supports() 的作用：用自己定义的 JWTToken 来进行权限验证。</p><h3 id="shiro-jwt-实现-restful-api-认证方式"><a class="markdownIt-Anchor" href="#shiro-jwt-实现-restful-api-认证方式"></a> shiro + jwt 实现 RESTful API 认证方式</h3><p>程序逻辑:</p><ol><li>POST 用户名与密码到 /login 进行登入，如果成功返回一个加密 token，失败的话直接返回 401 错误。</li><li>之后用户访问每一个需要权限的网址请求，必须在 header 中添加 Authorization 字段，例如 Authorization: token，token 为密钥。</li><li>后台会进行 token 的校验，如果不通过直接返回 401。</li></ol><p>换种方式解释：</p><ol><li><p>用户输入 用户名、密码</p><p>PS：需要前端加密吗？前端 RSA 加密</p></li><li><p>加密后的密码 与 通过 用户名获取的密码对比</p></li><li><p>成功 返回 token，失败 返回</p></li><li><p>header 中添加 Authorization 字段。例如 Authorization: token，token 为密钥。</p></li></ol><h3 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h3><p>Shiro 怎么知道应该通过 token 来判断呢？</p><p>这个问题对应的是 Shiro 在 doGetAuthenticationInfo() 中传入的 auth 里的 Credential 为啥获取得到的是 token。（按上面的理解 Credential 不本该是密码吗……）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken auth)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">    String token = (String) auth.getCredentials();</span><br><span class="line"><span class="comment">//……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是通过在 Shiro 的配置里注入自己实现的 JWTFilter 实现的。配置后就会放弃普通的用户名、密码鉴权方式而使用 token，即 JWT 来鉴权了。</p><p>这也是为什么 Shiro 要用 Credential 这个概念而不直接弄个 password……</p><p>类似于 Spring MVC 里通过 DispatcherServlet 来控制请求，我们可以通过自己配置的 Filter 来进行权限控制。</p><p>具体不谈了。</p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 自己浅见 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>舔狗之歌</title>
      <link href="/2019/10/09/song/"/>
      <url>/2019/10/09/song/</url>
      
        <content type="html"><![CDATA[<p><s>2017-06-24</s></p><p>你不晓得吧，每次回应你的留言就感觉突然回到了那年的语文考场。因为是第一堂，整场考试我都激动地发抖。而此刻的我就像是在做一道高考语文的分析题，担心说的不好，担心说的不够动听，又担心说的话超过我们现在关系该说的词汇，还担心回你太晚你会不高兴……我怕我们的关系止步于此，又怕我们的关系不只如此。我纠结。我是个傻叉。</p><p><s>2019-03-22</s></p><p>他们说你试试吧，放下自尊心你也可以的。</p><p>可是每当我摇起尾巴，你的手就会收回去。</p><p>为什么呢？我像个沙雕一样追问。</p><p>是因为堵车、丢了钥匙、找不到厕所吗？</p><p>像梦里那样。</p><p><s>2019-07-25</s></p><p>还没开始就辩解 心里知道却</p><p>我好像因为你变得不自由了</p><p>可这又不能怪你 你啥都不知道</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 环境下如何挂载未越狱的 iOS 设备</title>
      <link href="/2019/10/02/ifuse/"/>
      <url>/2019/10/02/ifuse/</url>
      
        <content type="html"><![CDATA[<h2 id="changelog"><a class="markdownIt-Anchor" href="#changelog"></a> ChangeLog</h2><p>[2020-02-10-update] <s>在 Manjaro 上安装有点问题，还没折腾出来。</s></p><p>[2020-03-18-update] Arch 系的看文档好了： <a href="https://wiki.archlinux.org/index.php/IOS" target="_blank" rel="noopener">Arch_IOS</a></p><h2 id="tldr"><a class="markdownIt-Anchor" href="#tldr"></a> TL;DR;</h2><p>核心是两个包：libimobiledevice，用于 Linux 与 IOS 设备通信；ifuse，用于挂载 IOS 设备的文件。</p><p>至于下面提到的 ideviceinstaller，则用于查看 IOS 的 app bundleID，即 IOS 设备安装的 app 的标识码。非必要。（如果你记得或通过其它途径能找到对应软件的标志码的话……）</p><h2 id="需求"><a class="markdownIt-Anchor" href="#需求"></a> 需求</h2><p>需求：把本地的电子书、电影、音乐等放进 iOS 设备方便使用。若是在 Windows 环境，有各种助手……Linux 咋整呢？</p><p>（非越狱前提下：）</p><h2 id="限制"><a class="markdownIt-Anchor" href="#限制"></a> 限制</h2><p>挂载 <code>com.apple.Music</code> 等软件的 Documents 目录，以及尝试 <code>--container</code> 挂载时，报错 <code>ERROR: InstallationLookupFailed</code> 。</p><p>有可能是 <code>UIFileSharingEnabled</code> 的问题，但我不确定。</p><p>可能的解决方案（我没试过）：也许可以先通过助手（或者 libimobiledevice）安装 apple music 等软件的 ipa，然后尝试管理。</p><h2 id="步骤"><a class="markdownIt-Anchor" href="#步骤"></a> 步骤</h2><h3 id="一-linux-挂载-ios-设备"><a class="markdownIt-Anchor" href="#一-linux-挂载-ios-设备"></a> 一、Linux 挂载 iOS 设备</h3><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libimobiledevice-utils</span><br><span class="line"><span class="comment"># sudo pacman -Sy libimobiledevice</span></span><br></pre></td></tr></table></figure><p>装上后，Linux 的机子就可以连接 iOS 设备了。</p><p>用数据线连接电脑与 iOS 设备后，在 iOS 端点击信任。之后，<strong>（一般来说）文件管理就会自动挂载上 iOS 的存储器。</strong></p><blockquote><p>文件管理器自动挂载上也不过是把设备挂载到 <code>/media</code> 。如果没自动挂载上而有需求，可以手动挂载。</p><p>如果使用 ifuse，执行 <code>ifuse &lt;挂载点&gt;</code> 即可。例如：</p><p><code>ifuse /hqweay_phone</code></p></blockquote><p>不过，存储器里只有图片、视频、以及「<strong>通过各种助手安装的软件的文件夹</strong>」等……</p><blockquote><p>联系上面提到的 <a href="#%E9%99%90%E5%88%B6">限制</a> 。</p></blockquote><p>这样已经能读到「通过各种助手安装的软件的文件夹」了。举个例子，如果我们需要把 Linux 电脑上的一本电子书放进 iOS 上的「多看阅读」，就可以先通过「各种助手软件」安装「多看阅读」，然后执行上面步骤，再直接把电子书放进多看阅读的文件夹。</p><p>cool！不过我们能不能读取到通过 App Store 安装的软件的文件夹呢？</p><p>看下面啦。</p><h3 id="二-ifuse"><a class="markdownIt-Anchor" href="#二-ifuse"></a> 二、ifuse</h3><p>通过 ifuse 可以挂载「通过 App Store 安装的软件的文件夹」到电脑。</p><h4 id="arch-安装"><a class="markdownIt-Anchor" href="#arch-安装"></a> Arch 安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Sy ifuse</span><br></pre></td></tr></table></figure><h4 id="手动安装"><a class="markdownIt-Anchor" href="#手动安装"></a> 手动安装</h4><p>先下载并安装 ifuse。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; cd 到要安装的目标路径，然后：</span><br><span class="line"></span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;libimobiledevice&#x2F;ifuse.git</span><br></pre></td></tr></table></figure><p>编译安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 将源码在本机编译：</span><br><span class="line"></span><br><span class="line">.&#x2F;autogen.sh</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 执行脚本ifuse到系统终端（其实也可以不用，直接去src中运行也可以）</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>编译途中可能会报错缺少依赖，按报错缺啥安装啥即可……</p><h3 id="三-ifuse-使用"><a class="markdownIt-Anchor" href="#三-ifuse-使用"></a> 三、ifuse 使用</h3><p>各种命令详情见文档。</p><p><a href="https://github.com/libimobiledevice/ifuse" target="_blank" rel="noopener">https://github.com/libimobiledevice/ifuse</a></p><p>我们要干啥？要操作「通过 App Store 安装的软件的文件夹」。</p><p>ifuse 在这里起的作用便是把「通过 App Store 安装的软件的文件夹」挂载出来。</p><p>整个步骤分三步：一、在电脑上创个空文件夹（挂载点）；二、找到要操作的软件的唯一标识号；三、通过标识号把软件的文件夹挂载到挂载点。</p><h4 id="创建挂载点"><a class="markdownIt-Anchor" href="#创建挂载点"></a> 创建挂载点</h4><p>创个空文件夹。例如文件夹名 <code>hqweay_phone</code>。</p><h4 id="获取-app-bundleid"><a class="markdownIt-Anchor" href="#获取-app-bundleid"></a> 获取 app bundleID</h4><p>获取软件的唯一标识 app bundleID。</p><p>需安装 <code>ideviceinstaller</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yay -Sy ideviceinstaller</span><br><span class="line"><span class="comment"># sudo apt-get install ideviceinstaller</span></span><br></pre></td></tr></table></figure><p>执行 <code>ideviceinstaller -l</code>。</p><p>参数说明：</p><blockquote><p>-l, --list-apps List apps, possible options:<br>-o list_user - list user apps only (this is the default)<br>-o list_system - list system apps only<br>-o list_all - list all types of apps<br>-o xml - print full output as xml plist</p></blockquote><p>会列出 <code>com.coderforart.iOS.MWeb</code> 这类包名……这就是 app bundleID。</p><h4 id="执行挂载"><a class="markdownIt-Anchor" href="#执行挂载"></a> 执行挂载</h4><p>执行 <code>ifuse --documents [app bundleID] [空文件夹]</code>。</p><blockquote><p>–documents 挂载 Documents 目录</p><p>–container 挂载 sandbox</p></blockquote><p>例如 MWeb</p><p><code>ifuse --documents com.coderforart.iOS.MWeb hqweay_phone/</code></p><p>或多看阅读</p><p><code>ifuse --documents com.duokan.reader hqweay_phone/</code></p><p>kindle</p><p><code>ifuse --documents com.amazon.Lassen hqweay_phone/</code></p><p>挂载上就可以把操作该软件的文件夹了。</p><p>注意开发者使用文件夹的规则不同，请确保文件放入的文件夹是软件对应的本地文件存放目录……</p><h4 id="卸载"><a class="markdownIt-Anchor" href="#卸载"></a> 卸载</h4><p>使用完了记得卸载……</p><p><code>fusermount -u [空文件夹]</code></p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 配置与操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 配置与操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应如雨止</title>
      <link href="/2019/09/16/rain/"/>
      <url>/2019/09/16/rain/</url>
      
        <content type="html"><![CDATA[<p>9 月 16 日晚，细雨和操场织成一张网，网眼收紧，少年们唱起歌谣。我刚吃了碗泡面，酸辣催汗，恍如又夏。</p><p>中秋团圆，团圆前后都是离别。那时候真蠢，不哭喊也不吵闹，明明是最适合干这种事的年纪，却要假装看透了一切，笨拙地模仿大人。你看啊，这些事都有时限 —— 好多事都有时限。比如过了十五岁再谈离家出走就不太合适了，比如你能和高中生谈恋爱的机会只有短短几年 —— 虽然这个时限内也不能太光明正大。但一旦过了这个时间，你再想搭讪高中生，就会被当作变态。</p><p>「变态」这个词用得太宽泛了，有时候让人恍惚以为它是不是啥时候已经成了褒义 —— 一如许多词的词性在日常中渐渐化为贬义。</p><p>「时限」这个词则暗藏着这样的意味：你应该在合适的年龄做合适的事情。</p><p>这什么意思呢？管它什么意思。深究意义太过无聊。工科生善于应用，应用以创造。</p><p>哎，所以讨厌被贴标签也是谎话。我们只是拒绝那些泯灭个性的，负面的标签。那全都是以偏概全，哗众取宠。而对于贴金的标签，要多少来多少，我相信，它们全都是客观评价。</p><p>如果你拒绝被打上标签，你在各种平台就只是个没有个性的圆圈。最好的方式当然是离开网络。短短数年前，我们还在为了逃避现实堕入网络。而现在，已经发展到了逃离网络回归现实的地步了。哎，时间过得太快了。如果现在流行杀马特，我搞不好还能在网络上混得风生水起。可惜没有如果。不是有这样的说法吗？「你有价值，别人才会友善对待你。」才不是这么回事。其实表现得越蠢越会受欢迎，因为你在别人眼里没有威胁。现在已经是不做坏事就算好人的时代了。</p><p>如果离不开网络，那就掌握主动权，自己打标签。嘛……闲话不提。</p><p>不过跳出这个限制也很简单。哪有那么复杂呢。如果你有能力不承担责任，你就可以永远当小孩 —— 至少多了这么个选项。这自然和逃避责任不同，逃避，那是巨婴所为。而若你有能力承担责任，那就更棒啦，可以开开心心地当个大人。</p><p>上面这样刻意强调年龄像是在隐藏无知。哎。常见老人开玩笑，严肃的话题被他们信手拈来。直面未知仍能作乐，似乎顺其自然，理所应当。小孩也会拿死亡开玩笑，那是一样的心情吗？年轻时也可以无牵无挂，会是一样的心情吗？秃头的我，买 A 片的老头，怎么可能一个心情。</p><p>有这样一个故事。年轻人问哲人，「我现在一无所求，以前的目标现在都实现了。是不是可以自杀了？」哲人回复，「这世界还有那么多风景，那么多的道理。你就不感到兴奋吗？」</p><p>年轻人说，「我对那些东西没有兴趣。」哲人想了一下，「那你应该承担点责任。倘若你结婚，生子。自然会有股无名的力量推你前行。」</p><p>年轻人沉思，「难道人生一定要不停地设定目标，承担责任，来推迟死亡时间吗？」哲人又说，「这不很好嘛？人生没有意义，你每多活一秒，就是多赚一秒。」</p><p>年轻人说道，「妈的，那太苦了。」</p><p>哲人又说，「你杠什么杠。你这种杠精还是自杀吧，反正你死不死管我屁事。」</p><p>哈！我有点爱上这种滑稽的结局了。它烂尾烂得很诚恳 —— 解决不了，那就碾轧过去。这种结构很像生活，你计算不了一切，但好像还是有规律可循。读万卷书不如行万里路。倘若经历过痛苦，文学里的艰难就都不算什么事了。就像故事之所以有趣，正在于「故事」这个词模糊了真实与虚构。明星的鸡毛蒜皮，普通人内心的汹涌。</p><p>然而心里总潜藏着一个声音：笨蛋，你还没见识过真正的残酷。强说愁仅仅是因为你摇起的尾巴和她收回去的手。</p><p>夏天已经过去了。细雨和呓语编织的网，随着情绪起伏收紧了网眼。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>译 - Annie Hall (1977) - The Movie Screen Scene</title>
      <link href="/2019/08/25/T-annie-hall-1977/"/>
      <url>/2019/08/25/T-annie-hall-1977/</url>
      
        <content type="html"><![CDATA[<h2 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h2><p>原文：<a href="https://themoviescreenscene.wordpress.com/2018/11/27/annie-hall-1977/" target="_blank" rel="noopener">Annie Hall (1977)</a></p><p><em>November 27, 2018</em></p><p><strong>安妮霍尔（1977）</strong></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/study/2019-08-25-annie-hall-1977/20190825205853.jpg" alt="img"></p><p>Woody Allen（伍迪艾伦）最好的电影是哪一部？由于每个人都有自己观影的口味，而且他的片子实在太多了，这个问题真的很难回答。也许你更喜欢他早期的那些喜剧？比如 Love and Death《爱与死》，Sleeper or Bananas《傻瓜大闹科学城》。Manhattan《曼哈顿》算是伍迪艾伦最精致的电影吗？还是说你更喜欢 Hannah and Her Sisters《汉娜姐妹》这样的主流作品？或者折衷一点，比如 Zelig 《西力传》、A Midsummer Night’s Sex Comedy《仲夏夜性喜剧》？</p><p>伍迪艾伦的最佳电影是哪部并没有一个定论，但至少我们可以肯定地说，Annie Hall《安妮霍尔》是他最重要的一部——虽然也有不少人觉得这部片子是他巅峰之作。一提这部电影，大量记忆犹新的镜头就会浮现在眼前——像是伍迪艾伦在厨房追逐逃跑的龙虾、一个不合时宜的喷嚏把昂贵的可卡因全都吹散。<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><p>伍迪艾伦对 Annie Hall 其实并不是很满意，他认为这部电影并没有完全展现出他希望表达的东西。然而 Annie Hall 却是他票房第四高的电影，而且这部电影还获得了第 50 届奥斯卡金像奖的最佳影片、最佳女演员、最佳导演和最佳剧本奖这四项奖项。除此以外，这也是伍迪艾伦唯一一部自己以演员的身份获得奥斯卡提名的片子。<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/study/2019-08-25-annie-hall-1977/20190825205939.jpg" alt="00"></p><p>Annie Hall 在伍迪艾伦的导演和写作生涯里起着关键作用。这部电影是伍迪艾伦从纯粹的喜剧到制作电影的一个转折点，它牺牲了一些幽默，有一个更严肃的创作意图，也更具艺术性。不过这并不是说安妮霍尔就不够有趣了，只是伍迪艾伦并不想仅仅止步于取悦观众。</p><p>这种转折是在 Annie Hall 之前开始的。Love and Death（爱与死）虽然也是一部喜剧，但它的主题是「死亡」，而且带着一种滑稽的悲观基调。 Play It Again Sam《呆头鹅》是伍迪艾伦第一次尝试以纯粹的人际关系为主题的喜剧，没有涉及罪犯、没有香蕉共和国、没有未来世界的反乌托邦也没有 19 世纪的俄罗斯人。不过从女主 Annie Hall 和一个 40 岁、满脑子都是对死亡的思考、直到现在都还没能够和别人维护一段持续的亲密关系的男人热恋这一点来看，安妮霍尔仍然是一部伤感而有趣的电影。<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></p><p>这也反映在电影的智识框架中。伍迪艾伦早期的电影也提供了一系列令人印象深刻的文化参考，Annie Hall 则更积极地展示了他的学识。这部电影充满了对 Freud<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>（弗洛伊德）、Wagner<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>（瓦格纳）、Sylvia Plath<sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup>（西尔维娅·普拉斯）、Fellini<sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup>（费里尼）、Balzac<sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup>（巴尔扎克）和其他一些人的热情。</p><p>没有迎合观众的打算，伍迪艾伦很乐意拍一部台词比活动占更大比重的电影。这部电影的镜头平均时长达到了 14.5 s，对于 20 世纪 70 年代来说，这可是相当长了。和现在电影里的接连不断的跳切相比，更是非常不同的风格。丰富到足以填满几部电影的内容被整合进 Annie Hall 这一部电影里，不得不说这实在是一个充满创意的制作人的作品。</p><p>Annie Hall 显然属于精英主义。男主角 Alvy Singer（由伍迪艾伦自己扮演）在电影院排队等候时表达了他对一个讲话不客气的男子的厌恶。对于持以不同艺术观点的人，他表示对他们的坏品味感到遗憾。还有一些场合也会让 Alvy 皱眉，比如遇到一个粗俗、不拘礼节的人想让 Alvy 写他的笑话，或者观看用上了笑声音轨的喜剧节目。</p><p>就连 Alvy 和 Annie 的神经质都在某种程度上被视为他们高智商的证据。在一个场景里，Alvy 询问一对年轻的夫妇为什么他们在一起那么快乐，然后那位女士回复说，「我很浅薄，空洞，没有自己的想法，也说不出什么有趣的东西。」她的男性伴侣也对此表示认同。在某种程度上，不快乐其实是知识分子的特权。</p><p>虽然电影展示了人物的博学，但也有观点表示，虽然电影里的人物都很聪明，但他们对自己的情感和需求已经没有自己的理解了。情绪被理智和药物控制，失去了真正的意义。Alvy 在和 Annie 复合时谈到了自己的成熟，但是当他和 Annie 分手时又说了同样的话。其实在这两种情况下，Alvy 都没表现得有多成熟。</p><p>这似乎是社会上普遍存在着的一种不安，就像 Alvy 的朋友 Rob（Tony Roberts 饰）对自己的性生活吹嘘不已，常搞些花里胡哨的名堂让自己看起来没那么老。Alvy 所处的 New Yrok 温暖、充满活力，与 Rob 浅薄颓废的 California 形成鲜明的对比。还有一个例子，Annie 的哥哥告诉 Alvy，说他有时候开车，会想着一头撞上其他车的前灯。这让 Alvy 之后的行车之旅很不舒服。</p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/study/2019-08-25-annie-hall-1977/20190825210009.png" alt="01"></p><p>不过影片的重心还是聚焦在 Alvy 和他分分合合的女友 Annie Hall（Diane Keaton 黛安·基顿饰）身上。在影片的开头，Alvy 用了两个笑话向观众做自我介绍。下面是第一个：</p><p><em>有两位老妇人在 Catskills mountain（卡茨基尔山）度假，其中一个说：「哎，这地方的食物可真够糟的。」另一个说：「可不是嘛，给的份量还那么少。」你瞧，我对生活的看法基本上也是如此：尽管充满了寂寞、痛苦、悲惨和不幸，但又觉得一切都逝去得太快。</em></p><p>这奠定了 Alvy 性格的基础。Annie 后来告诉他，他无法享受生活。我们可以在电影里看到，当 Alvy 还是个孩子时（仍然戴着大眼镜），他拒绝做家庭作业，因为他对宇宙终有一天会终结感到沮丧。他就是我们从众多伍迪艾伦的电影里了解到的那个人物——一位依赖药物，一生都在接受治疗却没有从中得到任何慰藉的精神病患者。</p><p>即便是非常细枝末节的事，Alvy 也完全不讲道理。由于 Annie 的迟到，电影已经开始了两分钟，Alvy 就拒绝入场看电影；因为被别人在大街上认出来而感到恼火；乐此不疲地反复观看 The Sorry and the Pity（悲哀和怜悯，原名是 Le chagrin et la pitié）这部关于大屠杀的消极电影。</p><p>事实上，Alvy 的部分不安全感与他的犹太教育有关。他有点好笑地偏执于路人对他犹太身份的「暗示」，然而这所谓的「暗示」大部分都发生在他的脑袋里。比如别人把 ‘Did you?’ 简称为 ‘D’you?’，他坚持认为别人说的是 ‘Jew?’。在和身为 WASP<sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup> 的 Annie 约会时，这种偏执便导致 Alvy 产生了一些莫名其妙的念头。</p><p>有一个场景，Alvy 和 Annie 冷淡的家人们共进晚餐，Alvy 不安地意识到 Annie 的格莱美奶奶，这个讨厌犹太人的「霍尔奶奶」（‘Grammy Hall‘）正嫌弃地看着他。然后镜头展现出他在脑海里打扮成一个犹太教经师的场景，人物的不安就从视觉上让观众体会到了。伍迪艾伦通过使用分屏的手法展现两个不同的家庭在晚餐时的表现，以鲜明的对比强调了冷淡的 Annie 一家和 Alvy 成长的热闹犹太家庭之间的差异。</p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/study/2019-08-25-annie-hall-1977/20190825210032.jpg" alt="02"></p><p>在电影开头，Alvy 讲的第二个笑话是这样的：</p><p><em>另一个对我来说比较重要的笑话，一般认为它出自于格劳乔·马克斯，但是我想它最初出现在弗洛伊德的《诙谐及其与无意识的关系》<sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup>一书中。是这样的，我来大致复述一下：「我永远也不想加入一个会员都是我这样的人的俱乐部。」这是我成年生活的关键笑话，它说明了我与女人之间的关系。</em></p><p>像 Alvy 这样充满问题的人会和女性有什么关系？和什么样的女性呢？当然了，和他一样有很多问题的女性。Alvy 在打网球时遇到了一个年轻女性，Annie Hall。Annie 她那笨拙的道歉方式，有趣的台词（“la-de-da” 是我们记忆最深的一句），还有奇特的穿着风格，和 Alvy 简直是天生一对。</p><p>Alvy 带着观众快速回顾了他之前的婚姻——为了避免和第一任妻子发生性关系，他花时间和她讨论肯尼迪的暗杀阴谋论；在第二次婚姻中，他试图使用性来表示对他妻子上层阶级朋友们的反抗。</p><p>然而，就像在电影结尾的那段蒙太奇里展示的欢乐时光一样，很显然 Annie 才是他一生中的真爱，也是他最怀念的一任女友。不幸的是，Alvy 不想加入会员都是他这种人的俱乐部。他不能接受爱而不破坏它，因此他和 Annie 的关系是注定要失败的。这一点在电影开头就有说明，所以我这并不算剧透哈。</p><p>Alvy 和 Annie 之间的关系开始得太顺畅了，以至于找不到一个明显的，能解释他们为何分开的理由。他被她的粗心与个性所吸引，她则着迷于他的风趣和才智。他鼓励她作为一个个体去成长、用自己的品味教育她、支持她想做一名歌手的尝试、并说服她去上课。</p><p>随着 Alvy 用他不正常的精神状态、猜疑和偏狭去驱赶 Annie，这段关系很快就恶化了。当他通过询问 Annie 是否在经期来驱散她的坏情绪时，也在期待她能持续关注他的感受。明明是他鼓励 Annie 去修读大学的课程的，现在 Alvy 却因为担心她会外遇，对上课这件事产生了敌意。</p><p>伍迪艾伦塑造了许多不断成长的女性角色。他帮助她们发展提高，又担心有一天她们会超越他，继续前进。比如在这些电影里：Manhattan（曼哈顿）、Hannah and Her Sisters（汉娜姐妹）、Deconstructing Harry（解构爱情狂）。女性需要一个男人来帮助她们成长，这种观点可能有点太自恋了。但在伍迪艾伦的电影里，这是一个固定的主题。</p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/study/2019-08-25-annie-hall-1977/20190825210058.jpg" alt="03"></p><p>Annie Hall 多大程度上算是伍迪艾伦的自传作品？伍迪艾伦总是迅速地将自己和他作品里的人物撇清关系，然而他们的性格总是惊人地相似。虽然他作品里的主角不完全是按他自己来塑造的，但是毫无疑问，他把自己的性格和经历经过夸张，扭曲后糅入了角色。<sup class="footnote-ref"><a href="#fn11" id="fnref11">[11]</a></sup></p><p>想想看，Alvy 是一个喜剧作家，他的名字听起来和 Allen（艾伦）很相似，Alvy 童年时的一些事儿也发生在伍迪艾伦身上。然后是伍迪艾伦和 Diane Keaton（黛安·基顿）间并不成功的关系，而且黛安·基顿的真名也叫作 Hall（霍尔）。事实上，黛安·基顿的确表明了 Annie Hall 就是一个和蔼版本的她自己。</p><p>Annie Hall 这部电影自由、非线性的结构正体现了影片中两个中心人物混乱，无组织的思维和生活。在这种技巧下，伍迪艾伦得以打破传统的叙事方式，自由地向我们传递他想要表达的任何东西。Annie Hall 的结构如此松散，以至于我们完全感觉不到现在看到的版本其实在第一个版本上剪去了 50 分钟。<sup class="footnote-ref"><a href="#fn12" id="fnref12">[12]</a></sup></p><p>这种结构下，即便伍迪艾伦频繁地展现他的叙事技巧，角色的形象仍然牢固地竖立在我们脑海里，观众似乎在切身感受角色们的焦虑与担忧。每次脱离传统的叙事手段，都加强了我们对 Alvy 和 Annie 的认识和理解。</p><p>有时候，这些手段被用于展现 Alvy 和 Annie 的不契合。他们相遇的那天，Annie 邀请 Alvy 去她家。他俩看似颇有兴致地讨论着艺术，屏幕底部的字幕却向观众们展现了他们真正在考虑的东西——担心失态、被对方当作笨蛋、以及一些与性相关的东西。</p><p>在另一个场景里，Alvy 想要和 Annie 做爱。Annie 否认自己分心了，但是我们看到的却是，Annie 的灵魂脱离了身体，坐在椅子上。Annie 的灵魂甚至对着越来越恼火的 Alvy 说道，「Alvy，你知道我把画板放哪儿了吗？我想我可以趁着你们干这事时画上两笔。」</p><p>还有一个场景，我们看到他们一起乘坐飞机，同时，他们的想法通过画外音的形式传递出来，展示了他们对相同经历的理解差异有多大。还有一次，Alvy 和 Annie 和他们的心理医生交流时，伍迪艾伦通过一个分屏镜头也向我们展示了类似的不和谐，以及思维方式间的巨大鸿沟。（顺便提一下，这里并不是真正的分屏。他们俩在一间屋子里，然后通过镜头调度制造了一种分屏的错觉。）</p><p>虽然电影制作里经常使用闪回，但许多都显得非常刻意。在 Annie Hall 这部电影里，Annie 则真的带着 Alvy 去看她年轻时和前男友们相处的情形。Alvy 倾听他们的谈话并不断地评论。作为回报，Alvy 则带着 Annie 和 Rob 回到了他家去看他小时候的样子。当 Rob 向 Alvy 的家人提问并得到回答时，这一切都在真实发生着的错觉就就从观众心里烟消云散了。</p><p>因为电影里的角色们都在讲话，所以第四面墙经常被打破。比如电影刚开始时，我们不知道 Alvy 到底在和谁讲话。也许是心理医生、又或者是摄影组、也可能是我们。在另一个场景里，Alvy 靠近，面向镜头，向一个声音洪亮、固执己见、和他有着不同艺术看法的人表达愤怒。</p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/study/2019-08-25-annie-hall-1977/20190825210121.jpg" alt="04"></p><p>不仅仅是 Alvy，Alvy 批评的这个男人也站了出来维护自己的观点。作为回应，Alvy 从海报后请出了 Marshall McLuhan（马歇尔·麦克卢汉）<sup class="footnote-ref"><a href="#fn13" id="fnref13">[13]</a></sup>。（Alvy 批评的这个男人一直在对麦克卢汉发表高论，麦克卢汉愤怒地告诉这个人，他完全误解了麦克卢汉的作品。）当然，这并没有真实发生。最后 Alvy 对着镜头若有所思地说道：「哎，如果生活都像这样的话！」</p><p>幻想还发生在其他场景里，比如 Alvy 和 Annie 迪士尼风格的卡通形象、演员们根据 Alvy 的剧本演出 Alvy 和 Annie 最后一次会面的场景。与现实不同，剧本里有着一个美满的团聚。「啧，你想怎样？」Alvy 询问我们，「你知道，人们总是试图通过艺术来表达完美结局，毕竟这在现实生活真的很难实现。」</p><p>即使是配角也会脱离他们的位置来和我们交谈。在 Alvy 给我们展示他学生时代对性发狂的那个场景里，Alvy 思考着他的同学们现在都在做什么。有几个孩子就对着镜头告诉我们现在他们在哪工作，还谈了一些他们在未来的成人生活里一些没啥必要的细节，例如对海洛因上瘾、迷恋皮革<sup class="footnote-ref"><a href="#fn14" id="fnref14">[14]</a></sup>。同样，Alvy 可以在街上随便找个人讲话，而且别人还会淡定地回复。虽然有些人的回答很奇怪。一个人就这么说：「我们用一个大振动蛋。」</p><p>有人可能会觉得 Annie Hall 对人际关系持以悲观态度。最终魔法失效了，他们之间的关系也随之破裂。在某种程度上确实如此，但其实这部电影也主张爱和亲密关系。即便是 Alvy，这个把所爱之人赶走的家伙，也强调了爱和亲密关系的重要性：</p><p><em>我意识到她（Annie）是一个多么好的人，能认识她就是一件多么有趣的事。我想起了那个老笑话，有个家伙去看精神病医生，他说：「大夫，我兄弟疯了，他以为他自己是一只鸡。」然后医生说：「那你怎么不把他带来？」那家伙说：「我是想带他来着， 可是我需要鸡蛋啊。」你看，我想这就是现在我对男女之间关系的感觉。它是完全非理性的、疯狂的、甚至荒谬的，但是我们还一直要经历这一切，因为我们大多数人都需要鸡蛋。</em></p><h2 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h2><p>文中涉及到影片及书籍采用豆瓣译名</p><p>台词翻译和部分注释引用自 <a href="http://subhd.com/a/336202" target="_blank" rel="noopener">http://subhd.com/a/336202</a></p><p>[update-2020-02-12]</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>伍迪艾伦吸可卡因打喷嚏这场戏是个意外事件，并没有写在剧本上。在电影试映时，观众看到这段暴笑不止，导演于是决定保留这一段。为了弥补因为观众笑得太长时间而错过了接下来的几个笑话，不得不增加电影胶片的长度。 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://ew.com/movies/2017/05/17/woody-allen-annie-hall-not-great/" target="_blank" rel="noopener">Woody Allen doesn’t think <em>Annie Hall</em> is that great Or ‘Manhattan,’ or ‘Hannah and Her Sisters’</a>。伍迪艾伦凭借 Annie Hall 获得「第 50 届奥斯卡金像奖最佳男主角提名」。伍迪艾伦是好莱坞各大奖项的常客，曾 23 次获得<em>奥斯卡提名</em>，3 次获得编剧奖。 <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>这几个主题都是伍迪艾伦之前的片子里的元素。香蕉共和国出自 Bananas、未来的反乌托邦出自 Shadows and Fog、19 世纪的俄罗斯人则出自 Love And Death。 <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><strong>西格蒙德·佛洛伊德</strong>（德語：Sigmund Freud，出生名：Sigismund Schlomo Freud，1856 年 5 月 6 日－1939 年 9 月 23 日），奥地利心理學家、精神分析學家、哲學家，犹太人。 <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p><strong>威廉·理查德·瓦格纳</strong>（德語：Wilhelm Richard Wagner，1813 年 5 月 22 日－1883 年 2 月 13 日），德国作曲家、劇作家，以其歌劇聞名。伍迪艾伦说过：「I just can’t listen to any more Wagner, you know……I’m starting to get the urge to conquer Poland.」 <a href="#fnref5" class="footnote-backref">↩︎</a></p></li><li id="fn6" class="footnote-item"><p><strong>希薇亚·普拉斯</strong>（英语：Sylvia Plath，1932 年 10 月 27 日－1963 年 2 月 11 日），生于美国波士顿牙买加平原区，儿童作家出身的美国天才诗人、小说家及短篇故事作家。 <a href="#fnref6" class="footnote-backref">↩︎</a></p></li><li id="fn7" class="footnote-item"><p><strong>費德里柯·費里尼</strong>（義大利語：Federico Fellini，1920 年 1 月 20 日－1993 年 10 月 31 日），義大利藝術電影導演，同時也是演員及作家。 <a href="#fnref7" class="footnote-backref">↩︎</a></p></li><li id="fn8" class="footnote-item"><p><strong>奥诺雷·德·巴尔扎克</strong>（法语：Honoré de Balzac，1799 年 5 月 20 日－1850 年 8 月 18 日），原名<strong>奥诺雷·巴尔扎克</strong>（Honoré Balzac），法国 19 世纪著名作家，法国现实主义文学成就最高者之一。 <a href="#fnref8" class="footnote-backref">↩︎</a></p></li><li id="fn9" class="footnote-item"><p>WASP：White Anglo-Saxon Protestants. 例「近年来美国保守和宗教势力一直在扩大，很多 WASP 从原教旨主义基督教的教义出发，反对堕胎、同性婚姻甚至同性恋等自由主义者支持的事务，希望能够“恢复美国式的生活”。」 <a href="#fnref9" class="footnote-backref">↩︎</a></p></li><li id="fn10" class="footnote-item"><p>《诙谐及其与无意识的关系》：弗洛伊德对笑话和幽默进行精神分析论述的德文书籍（原标题为 Der Witz und seine Beziehung zum Unbewußten），初版于 1905 年，1960 年被翻 译成英文。 <a href="#fnref10" class="footnote-backref">↩︎</a></p></li><li id="fn11" class="footnote-item"><p>《安妮·霍尔》经常被认为是半自传电影，但此说法已被伍迪艾伦否认。 <a href="#fnref11" class="footnote-backref">↩︎</a></p></li><li id="fn12" class="footnote-item"><p>第一个版本有 140 分钟。 <a href="#fnref12" class="footnote-backref">↩︎</a></p></li><li id="fn13" class="footnote-item"><p>这是麦克卢汉本人扮演的。 <a href="#fnref13" class="footnote-backref">↩︎</a></p></li><li id="fn14" class="footnote-item"><p>翻译常考的剧本将「I’m into leather.」翻译为「我经营皮货。」这里应该表达的是喜欢的意思。 <a href="#fnref14" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 看片所想 </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 启动 Idea 报错 if you already hava a 64-bit JDK……以及 failed to create jvm……</title>
      <link href="/2019/08/23/idea-jvm/"/>
      <url>/2019/08/23/idea-jvm/</url>
      
        <content type="html"><![CDATA[<h2 id="报错"><a class="markdownIt-Anchor" href="#报错"></a> 报错</h2><p><img data-src="https://img-blog.csdnimg.cn/20190823103030974.png" alt="在这里插入图片描述"></p><h2 id="解决"><a class="markdownIt-Anchor" href="#解决"></a> 解决</h2><p>看到这个报错，第一时间搜索 jdk 的解决方案，然后重新配置了下环境变量。</p><p>无效。</p><p>回头，注意到下面的 JVM 错误。</p><p>突然想起昨天用 Idea 时设置过 JVM 的参数，然后搜索了下。</p><p>遇到网友们的一些情况。</p><h3 id="一-破解报错"><a class="markdownIt-Anchor" href="#一-破解报错"></a> 一、破解报错</h3><p>可能是破解时修改 <code>idea[64].exe.vmoptions</code> 文件，导致错误。</p><p>一般有两种情况：参数写错，或者用记事本编辑保存时，文本编码格式出错。</p><blockquote><p>Idea 启动时会加载这里的参数。那款破解插件的加载方式就是在这里配置的。</p></blockquote><p>解决方式：确保正确填写参数，保存时不要变动文本编码格式。</p><p><strong>PS：该破解插件的作者已经不建议用这种方式了（大概就是因为使用的人经常出这样的问题）……详情搜索引擎了解吧。</strong></p><h3 id="二-用户配置文件出错了"><a class="markdownIt-Anchor" href="#二-用户配置文件出错了"></a> 二、用户配置文件出错了</h3><p>我自己的问题应该是昨天点击 Help -&gt; Edit Custom VM Options，然后添加参数时出了某种问题。</p><blockquote><p>具体是啥我忘了，解决完了才来写这个的……</p></blockquote><p>解决方式 ：一刀切，删除 <code>C:\Users\用户名\.IntelliJIdea2019.2\config</code> 下的 <code>vmoption</code> 文件。</p><p><strong>PS</strong>：<strong>如果你有能力，完全可以手动排查是哪行参数导致了问题，或者也可以备份再删除。但对我来说，这个配置没啥重要的东西，所以就直接删了。</strong></p><p>注意：是删除 <strong>用户目录</strong> 而不是 Idea 安装目录下的 <code>vmoption</code> 文件！！！</p><blockquote><p>用户目录下的 <code>vmoption</code> 文件和 Idea 安装目录下的 <code>vmoption</code> 文件，它们的功能是一样的。不过用户目录的 <code>config</code> 文件夹下保存的是「用户配置」，Idea 安装目录的 <code>config</code> 下保存的是「默认配置」。</p><p>Idea 启动时会优先考虑「用户配置」，找不到「用户配置」就会去加载「默认配置」。</p><p>同理，如果你把其它的配置玩坏了，也可以删除这个「用户配置」，Idea 重新启动时就会去加载「默认配置」。</p></blockquote><p>PS：<strong>如果删了「用户配置」还出错，那就回到 <a href="#%E4%B8%80%E3%80%81%E7%A0%B4%E8%A7%A3%E6%8A%A5%E9%94%99">一、破解报错</a> 的情况了。请检查「默认配置」的编码格式以及参数是否正确配置。</strong></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>主要就是「用户配置」与「默认配置」的区别！知道了这个，按需操作就行了。</p><p>我上面写了「一刀切，直接删除『用户配置』」，是因为我的配置里没有啥重要的东西，删了也无所谓。</p><p><strong>如果你的配置比较重要</strong>，只要理解了「用户配置」与「默认配置」的区别，<strong>依次检查它们并改正</strong>就行了。</p><p>虽然问题的表现效果一样，但导致问题的原因却各有不同，不过问题的本质始终是一致的。多多注意啊！</p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 配置与操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置与操作 </tag>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一片荒芜</title>
      <link href="/2019/08/16/gluckli/"/>
      <url>/2019/08/16/gluckli/</url>
      
        <content type="html"><![CDATA[<p>一下楼就开始落雨，我需要在雨落得更大之前赶往 10 分钟自行车车程外的地铁站，更甚，在乌云移向北方 20 公里的终点站前抢先走出站台，然后趁着雨滴打下来之前赶回宿舍。</p><p>这毫无疑问是场与雨点的竞速。</p><p>我突然感觉自己似乎理解了王小波的一个比喻，「眼前这世界真是一个受精场所。」我想，这世界可能更像是一根巨大的输精管，在上帝的快感里，人生不过是没有目的地的逃亡。从这样的世界观推论，雨滴更像是我们的兄弟姐妹，为什么要躲着他们呢？</p><p>不行啊，人，哪怕是最原始的形态，也会不停地给自己找对手。我们最擅长地就是把自己和身边的人作比较，把朋友当对手，在交往中斟酌。这么说起来，即便是我这样的家伙，也曾在一个男人的身体里与数亿同类竞争，还成了第一名，真是不可思议。连我自己也不禁怀疑，凭什么？</p><p>可能比起竞赛，生命更大程度上偏向于一种偶然性。</p><p>啊，多么老套的论调。对于世界的诠释，难道真的还能产生什么新鲜的观点吗？只有这个岁数的家伙会不厌其烦地重复这样浅薄的胡言乱语然后向全世界炫耀，自以为发现了什么了不起的真理吧。</p><p>人行道摆满了自行车，非机动车道无数逆行人。在潮流中，总感觉自己像是卡在城市这台机器里的沙粒，被齿轮摩擦，却还没被碾碎。虽然比起它的体型，我显得有点微不足道，但我仍把自己当作和它旗鼓相当的对手。在某种程度上，我们互相看不起对方。</p><p>我是以梦为马的堂吉诃德，正奔向现实这架风车。</p><p>第一次来这里，出站台时听到广播在放以这座城市作为歌名的歌曲。当时产生了一种很微妙的感觉。这是谁的城市呢？是本地人？还是慕名的游客？但总之，我不敢把自己代入其中。这座城市总归是不属于卒卒汗流的过客。三过而不入，连家也会变得陌生。</p><p>但这里终究还是有许多的事情发生，还有不少爱好以别人的不幸做下酒菜的人。不管怎么说，人总比事重要。事可以再做，人却不能再活。我听说有人发了疯，有人暑假骑行去了趟布达拉宫。他们的共同点在于最终都成了诗人。前者在社交平台发了许多对这个世界的深刻洞见，我只有一再提醒自己你也会被送进精神病院的才能忍住转发点赞的冲动。后者被净化后连文字也变得凉快起来，我在烈日下费劲地辨认手机屏幕上的文字，深深叹服。</p><p>我怎么能不经同意就把别人随意写进自己的文字呢。我该向他们道歉才对。他们知不知道自己不经意的行动给一个不算熟悉的人带来多大震撼？我通过解读别人的行为来构建自己的世界观，这算什么？我该被狠狠地挨一顿毒打。</p><p>你笑，全世界都陪你笑，你哭，只有你一个人哭。每个人都应该学会在解读日常中娱乐自己。而解读，通常意味着门槛。倘若你承认了这个门槛，就等于把自己置于别人的评判体系下。</p><p>上周凑热闹看了《寄生虫》，结尾有段暴力戏看得我很压抑。不知为何，我突然悲观地感到《进击的巨人》这部漫画可能得不到一个很完美的结局。</p><p>创作者指出了某种对立，这种对立可能暗喻了这个世界的某种矛盾。但是解决方式呢？</p><p>这似乎是个无解的问题。</p><p>《寄生虫》对于矛盾的解决方式是安排一场暴力戏，不管怎么说，这虽然激荡了情绪，也能引发思考，但是对于问题的解决终究是差了点意思。</p><p>《进击的巨人》呢？它也许可以通过安排剧情的反转带来一些惊喜，但对于世界的诠释，难道真的还能产生什么新鲜的东西吗？</p><p>难道真的有什么完美的答案吗？</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>译 - Write Like You Talk - Paul Graham</title>
      <link href="/2019/08/03/T-write-like-you-talk/"/>
      <url>/2019/08/03/T-write-like-you-talk/</url>
      
        <content type="html"><![CDATA[<h2 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h2><p>原文：<a href="http://paulgraham.com/talk.html" target="_blank" rel="noopener">Write Like You Talk</a></p><p><em>October 2015</em></p><p><strong>聊天那样写作</strong></p><p>这是一个可以让你的文字吸引更多读者的小技巧——像聊天那样写作.</p><p>大多数人在开始写作时都会遇到这样的问题，他们用与平时说话时完全不同的遣词造句来写作。在英语语境中，没有人聊天时会把「pen」当作动词使用。如果你和别人吹牛时不说「写（write）什么」而是说「笔（pen）什么东西」，就会有种违和感。</p><blockquote><p>pen 在书面语中也有「写」的含义。如：He penned a letter to the local paper.</p></blockquote><p>比如前几天我就读到了一句难以忍受的句子。原文是这样的：</p><p><strong><em>The mercurial Spaniard himself declared: &quot;After Altamira, all is decadence.&quot;</em></strong></p><blockquote><p>这个变幻莫测的西班牙人自己宣称：「<a href="https://zh.wikipedia.org/wiki/%E9%98%BF%E5%B0%94%E5%A1%94%E7%B1%B3%E6%8B%89%E6%B4%9E" target="_blank" rel="noopener">阿尔塔米拉</a> 之后，一切皆是堕落。」</p></blockquote><p>这句话出自 Neil Oliver 的书籍 <em>A History of Ancient Britain</em>。恕我冒昧，其实我并不想拿这本书来举例。毕竟比起许多其它的书来说，它还不算太糟。先不说这个，请尝试想像一下，当你和朋友吹牛时，把毕加索（Picasso） 称之为「The mercurial Spaniard（变幻莫测的西班牙人）」会是怎样一个场景。聊天时，这样的话哪怕只有一句也会让人感到诧异，人们却就是用着类似这样的句子写了一本又一本的书。</p><p>确实，书面语和口语有差异。不过这种差异真的使书面语变得糟糕了吗？</p><p>如果你期待着别人去阅读并理解你写的东西，那么没错，确实如此。书面语更复杂，读起来也就更费劲。同时，书面语也更正式、陌生，这会让读者难以集中注意力。不过这些问题都还好，也许最糟糕的是：复杂花哨的句子会让你——写作者，误以为自己表达了很多东西。</p><p>并不是复杂的句子才能阐释晦涩的概念。当研究深奥问题的专家们互相讨论各自领域的研究时，氛围其实就如同在聊早上吃了啥一样简单。当然，他们会使用一些生涩的术语，但也仅限于不可避免时。在我的经验里，一个话题越难，专家们谈论起来就越不那么讲究。我认为一部分原因是源于他们的谨慎，另一部分原因则是，一个领域越复杂，能用语言表达的东西就越少。</p><p>某种程度上，通俗的表达就如同思想的小钢炮。</p><p>当然，我并不是说使用口语总能达到非常好的效果。对于诗歌，文字之于它就如音符之于音乐，你自然可以用上许多吹牛时不会使用的言辞。至于散文，也有一些作者能用华丽的文字写出及其精彩的文章。另外还有这样的情况：有时表达者并不想让读者轻易搞懂他们的真实意图——例如公司发布的一些负面信息的声明。又或者，免不了要虚伪一下时，人嘛。不过除此之外，对几乎所有人来说，口语才是更好的写作方式。</p><p>这么说下来，似乎用口语来写作对于大多数人来说有点困难。这里有个不错的方案：先按通常的方式写下初稿，然后逐句细读，一边读一边问自己，「我是这样讲话的吗？」如果你对某个句子给出了否定的答案，那么就想像一下聊天时你会怎么来表达这句话里的意思，然后用新的表达替换掉之前的句子。过一段时间后，这种替换操作就会像一个严谨的机器一样，在你写文章时一丝不苟地工作。每当你敲击键盘，正要写下一些过于书面的句子，这个机器就会「叮当」一声在你的脑海里发出警告。</p><p>发布一篇新文章前，我会大声朗读它，然后修改其中所有聊天时不会使用的表达，甚至包括那些读出来发音尴尬的部分。我也不确定这样是不是过头了，但至少反正也不费什么劲。</p><p>不过这种方式也并不总是够用。我之前没有用口语写作时，句与句之间总是不连贯。对这种情况，有个更激进的解决方案。那就是写完初稿后，试着向一个朋友解释你刚刚写下的东西，然后把草稿换成你刚刚对朋友说的话。</p><p>经常有人告诉我说读你的文章就像是在和你聊天。这展现了人们很少用口语写作这一值得讨论的事实，否则每个人所写的东西读起来都应该像是在和作者聊天。</p><p>如果你能想办法用口语去写作，那你就超过了 95% 的写作者了！这做起来也非常简单——确保你写下的每一句话都像是在和读者聊天。</p><p><strong>Thanks</strong> to Patrick Collison and Jessica Livingston for reading drafts of this.</p><h2 id="其它"><a class="markdownIt-Anchor" href="#其它"></a> 其它</h2><p>[update-2020-02-10]</p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>地铁上的你</title>
      <link href="/2019/08/02/20190802/"/>
      <url>/2019/08/02/20190802/</url>
      
        <content type="html"><![CDATA[<p>「人的视线总是会被信息量大的东西吸引。平时我都盯着手机，不方便时我就看交通路线图和注意事项。比如前天，我站着研究了半个多小时地铁的部署，明明是从北到南的一整条，居然从中间断开分为三号线和七号线，啥玩意儿啊。当然也有今晚这样的时候，脚掌最好贴着地板移动，不然抬起来就连脚尖也放不下去了。我开始怀念在学校旁边的站台，大概都是青涩所以还保持着点浪费公共资源的矜持，不至于把这铁皮当作沙丁鱼罐头。这种情况下能干什么呢，看窗外吗。有时候会有亮着的屏幕从外边闪过，夸张的人像保持着端庄的仪态。之后便是长时间的黑，我们就都从另一旁的镜像世界浮出来了。人的视线不是总会被信息量大的东西吸引吗，我一时大意，视线便收不住手飞向那边的你。那后脑勺有注意到我吗？你在想些什么呢？这样的喧嚣里怎么也能轻巧地翻动书页？为什么看了一眼指示牌？会在哪一站下？揣摩着这些东西，我便躁动着弄丢了今晚的闲暇。终于，三站后，你起身了！我一心急，紧随你踏了半步出去，想要占据这个空位。没想到这个时候一位大姐远远地喊了句，诶！这里有座位。这句话仿佛是定身的咒语，我被控制着收回了自己的臀部与抬起来的脚，看着她走过来，坐下去了！然后我就单脚站立直到终点站。」</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 故事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 故事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>梦开始的地方</title>
      <link href="/2019/05/26/yo/"/>
      <url>/2019/05/26/yo/</url>
      
        <content type="html"><![CDATA[<p>在这趴着睡了一会，醒来颌关节发痛。干，太惨了。</p><p>在微博上放纵，偶尔装模作样似乎也能显得有趣，被别人搭讪了几句便觉得自己搞不好真有这样的天赋，能靠着人格魅力交些朋友。比方说觉得该讲些自己的事情了，而对方也很遵守社交规则做出了很感兴趣的样子，但是在张嘴的一刹那突然发现自己似乎丧失了倾诉的能力。</p><p>这就很奇怪。也许是不知道啥时候起了「不就这么回事嘛」的念头，于是所有的，那些自以为的孤单无助悲伤固执苦闷，一下子就成了常人都会有的情绪起伏。</p><p>问题在于，记忆总是模糊的。在大脑里，那些负责存储记忆的细胞突触不断地接触，曾发生过的一切被高明地剪辑。记忆总是被美化。虽然我在自己的记忆里从来不是什么讨喜的角色——懦弱，势利，沙雕。可这可能也是记忆的保护机制在起作用呢？它让我误以为曾经发生的一切都是不可控的，如果有遗憾，那也是没有办法的事。</p><p>有时候我也会在和别人吹牛时展现自己的牛皮，我吹嘘自己中学时曾被班上其他所有的男生围着打过。这种在全世界任何一所学校都经常发生的事，因为带了一种似乎夸张的描述，属于青春的痛感便不那么强烈了。当然这并非事实，我其实只是想尝试着在那个男孩们憧憬「一个打十个」的年纪里为自己开扩出「三十个打我一个」这样的传奇。</p><p>神奇的是我居然在很长的一段时间都以为这是真实的。我究竟挨没挨打？他妈的，有时候我还真期望有拳头落在我的身上，把我打个鼻青脸肿。然后我就做出悲剧英雄的模样，在十字架上燃烧，我在临死前一定要昂着头，我懒得向人群中张望。苟延残喘的人啊，嘲笑我吧。</p><p>只有我暗恋的女孩啊，不要悲伤，你的爱人是为了理想献身的……等等，女孩呢？他妈的，这帮狗比把女生全都赶到教室外面去了，还美其名曰这是男人之间的事。</p><p>理都被你们占了是吧？</p><p>算了算了，那时候我还太小，没学会长情。</p><p>不过，事实究竟如何呢？</p><p>无所谓了。</p><p>那个时候我确实还太小，对世界的认识不足导致我对自己本身认识过于钻牛角尖。我乐观地觉得换了新的环境我他妈就能重新做人。我从来没觉得自己与周围的差异是自己的原因。我知道为什么那些本来还能一起弹弹珠的小屁孩为什么突然就不和我玩了，有些隔壁班的崽子甚至靠着课间操的十多分钟来踢我一脚表明自己的阵营。我知道这是为什么，但我他妈就是不说。要问为什么，可能是因为我牛皮吧。</p><p>我知道我们其实都是一样的，都觉得自己是活在学校这个围栅里的牲口。那个时候我是自认为的文学青年，这些家伙只对偶像剧和黄片感兴趣，我不一样，我喜欢读书。而且我只读「故事会」、「鬼故事」这种高级读物。他们这些小屁孩只会欣赏「故事会」后面的小广告图片，我不一样啊，我读字儿。在我有限的青春狗血文学阅读历程中，早已了解到一件事：这就是青春啊！</p><p>不管我愿不愿意，这就是青春。既然青春里总有一个被忽视的家伙，为什么这个家伙就不能是我呢。</p><p>挑选一个人去针对，这就是小屁孩们在学校里自己悟出来的生存之道。当我现在以一种自作悲悯的眼光去看以前，唯一能让我感到宽慰的是，他们并不是针对你，这种操作并不是针对个人的。他们只是为了让自己的团体更加和谐而去找些事做而已。这些狗比仅仅是因为你长得帅，就忍不住要揍你。而由于我的容貌过于出众，我的脸便成了大家增强团队凝聚力的训练基地。</p><p>我没得法。</p><p>不得不说，人就是聪明。当一个人认识到自己个人的力量是有限的的时候，就会思考外界的力量。</p><p>比如我很长一段时间都曾在心里埋藏着强烈的恶意。我把积攒了一周的零花钱——虽然只有一块，扔进了在我回家的必经之路的那座山的山腰处的庙里的功德箱。</p><p>这座庙太破了，里面的神像被坏家伙们偷得只剩一两个还站在里面。</p><p>真的是，这坏家伙怎么到处都是。</p><p>但是我也来不及担心神像少了威力是不是就会减弱，我仍以最狠毒的诅咒期盼着这些家伙要是能够因为犯了什么事被开除就好了，这样我就碰不到它了。不过很久以后我才发现，寄希望于义务教育能开除学生，也就比买彩票的概率大点。</p><p>这他妈什么事儿啊，我成了一个被仇恨蒙蔽双眼的坏孩子了。</p><p>于是我只能期盼着狗日的赶快什么时候能离开这。我日，本来应该是最该享受的年纪，全他妈毁了，让我活在仇恨里还不够，我还要活在逃避里。</p><p>可是真的有什么地方会更好吗？</p><p>我有个非常优秀的启蒙老师，小学一年级时她就灌输给小朋友们在大城市不能乱扔垃圾，而且要把垃圾分类的相关知识。</p><p>后来我去了隔壁县城读高中，这是我第一次长时间进入一个城市——我一度小心翼翼地把垃圾扔进不同的回收箱。但是过了一阵子我突然发现，尼玛，根本没人分类，这他妈「可回收」、「不可回收」俩标签根本就是个摆设。有些家伙更坏，能把垃圾扔进垃圾桶就已经不错了！</p><p>我天真地认为这是因为这个县城还不够大。</p><p>后来来到省城读大学，我继续观察。尼玛，还是根本没多少人在乎扔垃圾时扔的是「可回收」还是「不可回收」。</p><p>由于我经常观察垃圾桶，有一次我他妈还发现一个垃圾桶虽然左右各一个口，分别写着「可回收」、「不可回收」，但是他们下面居然是连通的。尼玛，连通的！也就是说不管你投「可回收」还是投「不可回收」，垃圾都是堆在一起的！</p><p>卧槽。</p><p>我以为大城市里的不良少年们跟村里的不一样，他们读加缪，读塞林格。就像小说里描绘的一样。</p><p>结果全他妈假的，过时了。</p><p>他们扔垃圾还是不会分类。只是吐痰的时候不能像在村里一样吐在田里。</p><p>如果我再年轻点，我就可以靠着各种隐喻抱怨一切。可随着时间流逝，我已经从一个小屁孩长成了大孩子。</p><p>干！</p><p>回想这一阵子，看动画，读闲书，在回寝的路上发出应答谁的声音假装自己有朋友。从不考虑明天，尝试着和一些酒精过敏的家伙建立理想中酒肉朋友般牢固的情谊。聊童年和校园暴力，戏谑一切。用暧昧的言语和无聊的话题，互相探测彼此那一目了然的内心。旁若无人地在路上咆哮，争着发表自己对这个世界高深的见解。路过年轻异性时，不自觉地加强声带的震动。以一种自以为滑稽的表演方式说话，模仿老师，领导，传递指示的室长，以及一切说着正经话题的人。</p><p>真是大人模样了。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 故事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 故事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单谈谈秒杀的减库存</title>
      <link href="/2019/05/24/kill-me/"/>
      <url>/2019/05/24/kill-me/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>作为之前在 <a href="/2019/01/14/seckill/#%E4%BC%98%E5%8C%96">秒杀系统简单实现</a> 一文的补充……</p><p>本文就简，不考虑各种高级优化……仅仅立足减库存这个操作谈谈我的理解……</p><h2 id="0x01-秒杀操作"><a class="markdownIt-Anchor" href="#0x01-秒杀操作"></a> 0x01 秒杀操作</h2><p>在讨论各种优化之前，先捋一下这个操作的逻辑。</p><p>一开始，用户们从前端点击秒杀按钮，操作传入服务端处理，在 Java Web 中，最后是由一个 Servlet 来处理的。</p><p>Servlet 默认是 单例多线程。（当然也可以设置为多例）</p><p>需要注意的是，在 Java Web 开发的各种框架中，比如 Spring，不管是 Controller 层的实例还是 Service 层的实例，本质都是 Servlet。</p><p>所以说这里最后还是由 Servlet 来处理。</p><blockquote><p>单例多线程是什么意思呢？这里不多说，讲讲它的效果。</p></blockquote><p>比如在进行秒杀操作时，前端 <s>可能</s> 会有很多个用户同时进行秒杀，每一个秒杀操作都是一个 HTTP 请求，这数个 HTTP 请求（秒杀操作）到了服务端，全部由一个 Servlet 实例来处理——这就是单例。而每一个 HTTP 请求都对应一个线程——这就是多线程。</p><p>不过注意，这里的多线程并非无限制创建的。</p><p>首先要知道，Servlet 是运行在 Servlet 容器里的。</p><blockquote><p>参考 Tomcat</p></blockquote><p>实际上，Servlet 容器会通过调度线程（Dispatchaer Thread） 管理一个线程池，通过调度线程池中等待执行的线程（Worker Thread）给请求者实现多线程。</p><p>也就是说，Servlet 的多线程还是由线程池管理的，只不过一般来说，用户不可见。（因为这个线程池由 Servlet 容器管理）</p><h2 id="0x02-事务控制"><a class="markdownIt-Anchor" href="#0x02-事务控制"></a> 0x02 事务控制</h2><p>我们回到秒杀。秒杀这个操作至少包含两步：</p><ol><li>减库存</li><li>插入购买信息到订单表</li></ol><p>一般这两步会写在 Service 层。我们看下伪代码 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> SkillService&#123;</span><br><span class="line">  Kill()&#123;</span><br><span class="line">    减库存;</span><br><span class="line">    插入信息到订单表</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，这里有两个步骤，而上面提到 Servlet 的执行是多线程的，那么这里就可能会出现数据不一致问题。</p><blockquote><p>为什么?</p><p>因为这里多线程并发执行秒杀操作时，不能保证操作的 原子性。</p><p>比如?</p></blockquote><p>为了保证数据一致（原子性），我们可以使用事务。</p><blockquote><p>事务是啥?</p></blockquote><p>比如 Spring 中，我们可以通过使用注解为方法开启事务支持。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">Kill()&#123;</span><br><span class="line">  减库存;</span><br><span class="line">  插入信息到订单表;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事务具有 ACID 四大特性，而其中的 隔离性 是通过锁机制来实现的。</p><p>当进入被事务控制的这个方法时，会对数据进行加锁。</p><blockquote><p>使用了事务，就代表里面的操作是一个整体了。（原子操作）</p><p>进入这个开启了事务支持的方法体，就会获取方法体中用到的数据的锁。</p></blockquote><h2 id="0x03-锁"><a class="markdownIt-Anchor" href="#0x03-锁"></a> 0x03 锁</h2><p>并发的 HTTP 请求（反映到 Servlet 就是多线程），在进行秒杀操作时执行事务，通过竞争数据库的锁来执行秒杀操作，从而保证了数据的安全。</p><blockquote><p>什么是锁</p></blockquote><p>到这一步，不考虑超大的并发量，已经能够保证秒杀安全地执行了。</p><blockquote><p>InnoDB 默认行级锁，也支持表级锁。</p><p>MyISAM 默认 表级索，不支持行级锁 --&gt; 不支持事务</p><p>分布式事务</p><p>……</p></blockquote><p>继续优化。</p><h2 id="0x04-存储过程"><a class="markdownIt-Anchor" href="#0x04-存储过程"></a> 0x04 存储过程</h2><p>注意，上面是在 Service 层开启事务。</p><p>事务里面有两个操作，需要与数据库交互两次。</p><p>我们可以把两个操作通过一条 SQL 来执行。</p><p>怎么做呢？用存储过程。</p><blockquote><p>什么是存储过程?</p><p>怎么使用?</p></blockquote><p>打个比方，这里有两袋苹果，之前我拿上一袋回家，再过来拿另一袋回家。现在我则拿着两袋就往家里跑。</p><blockquote><p>具体怎么回事我还不是很清楚</p></blockquote><p>这里通过存储过程优化了事务行级锁持有的时间。本来在 Service 执行的操作，我们放到 SQL 层来做，在更底层执行，效率会高一点。</p><blockquote><p>数据库里，行级锁是什么？</p><p>更底层效率更高一点，为什么?</p><p>（因为封装到更抽象的层次，会加上许多为了方便用户操作但对实际执行效率没影响的行为。）</p></blockquote><p>但是不管是哪里，都并不建议大量使用存储过程。（逻辑确实很简单时，可以一用。）</p><p>阿里巴巴 Java 开发手册 甚至禁止使用 存储过程。</p><blockquote><p>为什么?</p><p>存储过程没有版本控制，版本迭代的时候要更新很麻烦。存储过程如果和外部程序结合起来用，更新的时候很难无感升级，可能需要停服。存储过程不利于将来分库分表。存储过程的功能不一定够强大，业务扩展之后可能会发现无法继续用存储过程实现了。存储过程可能无法和许多中间件、ORM 库一起使用。某些特殊的兼容 MySQL 的实现可能根本就不支持存储过程，那就更不用说了。</p><p>……</p><p><a href="https://www.zhihu.com/question/57545650" target="_blank" rel="noopener">知乎 — 为什么阿里巴巴 Java 开发手册里要求禁止使用存储过程？</a></p></blockquote><h2 id="0x05-锁竞争"><a class="markdownIt-Anchor" href="#0x05-锁竞争"></a> 0x05 锁竞争</h2><p>我们现在是通过数据库层面的锁来保证秒杀的安全，但是当并发量上来后，大量的线程竞争锁，会导致数据库的吞吐量受到影响。注意，是数据库的吞吐量。也就是说，一个商品的竞争，影响了整个数据库的性能。（影响到其它的商品）</p><blockquote><p>为什么?</p><p>数据库竞争锁会导致 TPS 下降，RT 上升，数据库的吞吐量受影响。</p></blockquote><p>那么如何解决呢？</p><p>可以通过把热点数据隔离出来，使之不影响其他数据。</p><p>但这治标不治本。</p><p>我们从另一个角度思考一下。</p><hr><p>从头梳理。</p><p>大量的并发请求来了，操作时为了避免数据安全问题，我们使用了锁机制。</p><p>锁，是为了保证同一时刻只有一个线程读写数据。</p><p>而锁竞争，现在会导致严重的问题。</p><p>那我们能不能不使用锁，又能保证同一时刻只有一个线程读写数据呢？</p><hr><p>叮咚！如果能通过某种方式把并发的请求转换成串行执行就可以达到了。</p><p>如何转换？可以使用一个队列来对请求排队。</p><h2 id="0x06-排队并发转串行"><a class="markdownIt-Anchor" href="#0x06-排队并发转串行"></a> 0x06 排队——并发转串行</h2><blockquote><p>PS：Redis 就是通过把请求串行执行实现的并发。</p></blockquote><p>同样，可以在数据库层排队，也可以在服务层排队。在数据库层——这个更底层的层面排队，效率肯定更高。</p><blockquote><p>阿里的数据库团队开发了 InnoDB 的补丁程序（patch），可以在数据库层上对单行记录做到并发排队。</p></blockquote><p>另外，应用层只能单机排队，数据库层则可以全局排队。</p><blockquote><p>排队与锁竞争都需要等待，为什么排队效率就要好点?</p></blockquote><hr><p>排队当然要使用队列，回到前面，Servlet 是单例多线程，<strong>多线程环境下应该使用并发包下的队列</strong>。</p><p>比如 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.util.concurrent.ConcurrentLinkedQueue</span><br></pre></td></tr></table></figure><p>搜索资料时，许多博客都说「对请求进行排队」。</p><p>一个很容易想到的操作便是使用拦截，在 HTTP 请求进入 Controller 层之前把 HttpRequest 压入队列排队。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ConcurrentLinkedQueue&lt;HttpRequest&gt; que &#x3D; new ConcurrentLinkedQueue&lt;HttpRequest&gt;();</span><br></pre></td></tr></table></figure><p>不过， <strong>如果把 Http 请求放到队列，就会导致产生大量未释放的 HTTP 长连接。</strong></p><p>这样不太好，实际使用，是把 <strong>秒杀数据</strong> 进行排队。</p><p>在秒杀操作时，我们其实只需要 HttpRequest 提供的相关的秒杀信息，比如 商品 ID，用户 ID……并不需要持有整个 HTTP 请求。</p><h2 id="0x07-异步消息队列"><a class="markdownIt-Anchor" href="#0x07-异步消息队列"></a> 0x07 异步——消息队列</h2><p>不错，现在排队了，但是现在有个最重要的问题我们还没考虑。</p><p>回头看一下。</p><p>无论怎么写代码，最终的目的是给用户提供良好的体验。</p><p>但是用户在秒杀界面等待着服务端执行完秒杀后返回的秒杀结果，这一个最影响体验的操作还没有得到解决。</p><p>现在的秒杀，就相当于我去我们村里的信用社办理业务，大家都在窗口前排着队，前面的人办完业务才能轮到后面的人。</p><p>但是想象一下大城市里的银行，用户先领取一个排队号，然后坐到一旁玩手机，等到窗口呼叫用户的排队号码时，用户才上前去办理业务……</p><p>这就是 <strong>消息队列</strong> 的概念。</p><p>我们把秒杀的数据放入一个消息队列，然后直接向前端返回信息，告诉用户「我们先帮你排队执行秒杀，待会告诉你结果，你先去干其他的事吧。」</p><p>真棒。用户现在可以去干其他事了。</p><p>过一阵子，用户可以通过主动查询或者被动通知，了解到自己的秒杀结果。</p><blockquote><p>比如可以使用前端轮询</p></blockquote><p>不过这里值得注意的是，消息队列最主要的功能是提供了一个异步执行的操作。</p><p>消息队列的使用将秒杀真正的操作与这个用户的行为解耦了！</p><blockquote><p>为什么要强调主要是为了解耦，下面会提到。</p></blockquote><p>同时，消息队列也能够把秒杀数据进行排队。</p><h2 id="0x08-rabbitmq"><a class="markdownIt-Anchor" href="#0x08-rabbitmq"></a> 0x08 RabbitMQ</h2><p>再重复一下前面提到的，Servlet 是单例多线程，引入消息队列后，多线程把 秒杀数据 放入消息队列就完事了，然后告诉用户我们正在帮你排队。具体的秒杀执行逻辑则由消息队列来做。</p><p>稍微准确点，实际是消息队列提供的 <strong>消费者</strong> 按照队列的顺序，把 队列 里的秒杀数据拿出来，对秒杀数据执行秒杀的逻辑。</p><p>OK！</p><p>下面拿具体的消息队列框架 RabbitMQ 谈谈。</p><p>在 RabbitMQ 中，默认 <strong>单线程串行消费</strong> 。</p><p><strong>也就是单线程，串行来执行队列里的秒杀数据来秒杀。</strong></p><p>这样子在理论上，秒杀操作就无需加入事务控制了。</p><p>因为现在已经是串行，不会产生竞争啦！</p><blockquote><p>这里面当然还有很多细节，比如如果抛出异常、秒杀执行失败，是继续尝试执行呢？还是直接秒杀失败？</p><p>又比如既然引入了消息队列，那当请求来了时就可以直接判断队列中的秒杀数据的个数与库存比较，直接拒绝用户的秒杀操作……</p></blockquote><h2 id="0x09-消息积压"><a class="markdownIt-Anchor" href="#0x09-消息积压"></a> 0x09 消息积压</h2><p>不过引入消息队列，又有可能遇到消息队列的一些问题……</p><p>比如消息过多，造成消息积压。</p><p>一种解决方式就是引入<strong>多线程处理消息</strong>。（当然消息队列自己还有多消费者等等细节）</p><p>可是引入多线程了，那是不是又会有线程安全的问题呢?</p><p>确实如此。</p><hr><p>测试了一下，发现 消费者使用 多线程，的确会有数据不一致问题。</p><p>我用 int 和 AtomicInteger 做了个测试。</p><p>当 RabbitMQ 默认单线程时，int 数据正常计算。</p><p>当多线程时，int 数据计算不正常，但是 AtomicInteger 计算正常。</p><hr><p>所以我在前面提到消息队列只是用于解耦，并不能保证线程安全。（虽然默认 <strong>单线程串行执行</strong> 肯定是线程安全的）</p><p>如果使用多线程，那就又回到并发的问题了……</p><p>使用事务?</p><p>……</p><p>再往后就没继续思考了……</p><p>到此为止。</p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Projects </tag>
            
            <tag> Web 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue CLI3 使用 Marked 渲染 Markdown 格式数据</title>
      <link href="/2019/04/02/marked/"/>
      <url>/2019/04/02/marked/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h2><p>需求是需要把 Markdown 格式的内容解析为 HTML，于是使用 Marked.js 完成该操作。</p><p>仓库：<a href="https://github.com/markedjs/marked" target="_blank" rel="noopener">Marked.js</a> ，引入使用之类的不提。</p><p>默认解析出来的内容不大美观，所以需要再渲染一下。</p><p>下面提供了我尝试过的三种引入方式，主要是渲染样式的使用方式不同。</p><p>按渲染方式分：方式一和方式二都是使用 Marked 自己的功能实现的。而 <strong>方式三只是粗暴地用 CSS 覆盖了默认样式。</strong></p><p>方式一对每个展示的 Vue 文件都需要引入一次样式，而方式二和方式三用了 <code>main.js</code> 引入的方式实现了全局样式。但是方式二只能全局，方式三则用 CSS 覆盖实现了自定义样式。</p><p><strong>其实主要就分为方式一和方式二，分别对应单独配置与全局配置。方式只不过是在方式二全局配置的基础上，使用 CSS 为单独组件覆盖了全局配置。</strong></p><p><strong>一般来说大家都是全局统一渲染样式吧？所以我推荐使用方式二。</strong></p><p>下文以引入渲染样式 <code>github-markdown.css</code> 为例。</p><h2 id="方式一"><a class="markdownIt-Anchor" href="#方式一"></a> 方式一</h2><p>单个 Vue 文件即可实现.</p><h3 id="indexvue"><a class="markdownIt-Anchor" href="#indexvue"></a> index.vue</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; index.vue &#x2F;&#x2F; 只需要这个文件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;post&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;title&quot;&gt;</span><br><span class="line">      &lt;h2&gt;&#123;&#123; this.article.title &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;markdown-body&quot;&gt;</span><br><span class="line">        &lt;div v-html&#x3D;&quot;compileMarkdown&quot; v-highlight&gt;&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;ecmascript-6&quot;&gt;</span><br><span class="line">import Marked from &quot;Marked&quot;;</span><br><span class="line">&#x2F;&#x2F; 这里引入想要的样式</span><br><span class="line">import &quot;..&#x2F;..&#x2F;..&#x2F;node_modules&#x2F;github-markdown-css&#x2F;github-markdown.css&quot;;</span><br><span class="line">let renderMd &#x3D; new Marked.Renderer();</span><br><span class="line">Marked.setOptions(&#123;</span><br><span class="line">  renderer: renderMd,</span><br><span class="line">  gfm: true,</span><br><span class="line">  tables: true,</span><br><span class="line">  breaks: false,</span><br><span class="line">  pedantic: false,</span><br><span class="line">  sanitize: false,</span><br><span class="line">  smartLists: true,</span><br><span class="line">  smartypants: false,</span><br><span class="line">  &#x2F;&#x2F; 引入样式</span><br><span class="line">  highlight: function(code) &#123;</span><br><span class="line">    return require(&quot;highlight.js&quot;).highlightAuto(code).value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      article: &#123;</span><br><span class="line">        content: &quot;加载中……&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    compileMarkdown() &#123;</span><br><span class="line">      return Marked(this.article.content, &#123; sanitize: true &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created: function() &#123;</span><br><span class="line">    this.$ajax(&#123;</span><br><span class="line">      url: &quot;&#x2F;api&#x2F;article&#x2F;id&quot;,</span><br><span class="line">      method: &quot;get&quot;,</span><br><span class="line">      params: &#123;</span><br><span class="line">        id: this.$route.params.id</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(res &#x3D;&gt; &#123;</span><br><span class="line">      if (res.status &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class="line">        this.article &#x3D; res.data;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F;报错</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.post .title &#123;</span><br><span class="line">  margin-top: 50px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  font-size: 24;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="方式二"><a class="markdownIt-Anchor" href="#方式二"></a> 方式二</h2><p>方式二、方式三都需要三个文件。</p><p>方式二是全局定义渲染样式，方式三则可以覆盖全局渲染样式。</p><h3 id="indexvue-2"><a class="markdownIt-Anchor" href="#indexvue-2"></a> index.vue</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; index.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;post&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;title&quot;&gt;</span><br><span class="line">      &lt;h2&gt;&#123;&#123; this.article.title &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;markdown-body&quot;&gt;</span><br><span class="line">        &lt;div v-html&#x3D;&quot;compileMarkdown&quot; v-highlight&gt;&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;ecmascript-6&quot;&gt;</span><br><span class="line">import Marked from &quot;Marked&quot;;</span><br><span class="line">&#x2F;&#x2F; 不用下面这种引入样式了</span><br><span class="line">&#x2F;&#x2F; import &quot;..&#x2F;..&#x2F;..&#x2F;node_modules&#x2F;github-markdown-css&#x2F;github-markdown.css&quot;;</span><br><span class="line">let renderMd &#x3D; new Marked.Renderer();</span><br><span class="line">Marked.setOptions(&#123;</span><br><span class="line">  renderer: renderMd,</span><br><span class="line">  gfm: true,</span><br><span class="line">  tables: true,</span><br><span class="line">  breaks: false,</span><br><span class="line">  pedantic: false,</span><br><span class="line">  sanitize: false,</span><br><span class="line">  smartLists: true,</span><br><span class="line">  smartypants: false,</span><br><span class="line">  &#x2F;&#x2F; 这个配置实际放到 highlight.js,然后在 main.js 引入</span><br><span class="line">  &#x2F;&#x2F;highlight: function(code) &#123;</span><br><span class="line">  &#x2F;&#x2F;  return require(&quot;highlight.js&quot;).highlightAuto(code).value;</span><br><span class="line">  &#x2F;&#x2F;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      article: &#123;</span><br><span class="line">        content: &quot;加载中……&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    compileMarkdown() &#123;</span><br><span class="line">      return Marked(this.article.content, &#123; sanitize: true &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created: function() &#123;</span><br><span class="line">    this.$ajax(&#123;</span><br><span class="line">      url: &quot;&#x2F;api&#x2F;article&#x2F;id&quot;,</span><br><span class="line">      method: &quot;get&quot;,</span><br><span class="line">      params: &#123;</span><br><span class="line">        id: this.$route.params.id</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(res &#x3D;&gt; &#123;</span><br><span class="line">      if (res.status &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class="line">        this.article &#x3D; res.data;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F;报错</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.post .title &#123;</span><br><span class="line">  margin-top: 50px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  font-size: 24;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h3 id="highlightjs"><a class="markdownIt-Anchor" href="#highlightjs"></a> highlight.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; highlight.js import Hljs from &#39;highlight.js&#39; &#x2F;&#x2F; 这里引入css import</span><br><span class="line">&#39;highlight.js&#x2F;styles&#x2F;github.css&#39; let HighLight &#x3D; &#123;&#125;; HighLight.install &#x3D;</span><br><span class="line">function (Vue) &#123; Vue.directive(&#39;highlight&#39;, function (el) &#123; let blocks &#x3D;</span><br><span class="line">el.querySelectorAll(&#39;pre code&#39;); blocks.forEach((block) &#x3D;&gt; &#123;</span><br><span class="line">Hljs.highlightBlock(block) &#125;) &#125;); &#125; export default HighLight;</span><br></pre></td></tr></table></figure><h3 id="mainjs"><a class="markdownIt-Anchor" href="#mainjs"></a> main.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; main.js …… &#x2F;&#x2F; highlight.js 路径相应更改 import HighLight from</span><br><span class="line">&#39;@&#x2F;utils&#x2F;highlight.js&#39; Vue.use(HighLight); ……</span><br></pre></td></tr></table></figure><h2 id="方式三"><a class="markdownIt-Anchor" href="#方式三"></a> 方式三</h2><p>在 <code>highlight.js</code> 中定义的实际上是全局的 Markdown 解析样式，如果其他地方需要自定义渲染样式，引入 Vue 就行。</p><h3 id="indexvue-3"><a class="markdownIt-Anchor" href="#indexvue-3"></a> index.vue</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; index.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;post&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;title&quot;&gt;</span><br><span class="line">      &lt;h2&gt;&#123;&#123; this.article.title &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;markdown-body&quot;&gt;</span><br><span class="line">        &lt;div v-html&#x3D;&quot;compileMarkdown&quot; v-highlight&gt;&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;ecmascript-6&quot;&gt;</span><br><span class="line">import Marked from &quot;Marked&quot;;</span><br><span class="line">&#x2F;&#x2F; 不用下面这种引入样式了</span><br><span class="line">&#x2F;&#x2F; import &quot;..&#x2F;..&#x2F;..&#x2F;node_modules&#x2F;github-markdown-css&#x2F;github-markdown.css&quot;;</span><br><span class="line">let renderMd &#x3D; new Marked.Renderer();</span><br><span class="line">Marked.setOptions(&#123;</span><br><span class="line">  renderer: renderMd,</span><br><span class="line">  gfm: true,</span><br><span class="line">  tables: true,</span><br><span class="line">  breaks: false,</span><br><span class="line">  pedantic: false,</span><br><span class="line">  sanitize: false,</span><br><span class="line">  smartLists: true,</span><br><span class="line">  smartypants: false,</span><br><span class="line">  &#x2F;&#x2F; 这个配置实际放到 highlight.js,然后在 main.js 引入</span><br><span class="line">  &#x2F;&#x2F;highlight: function(code) &#123;</span><br><span class="line">  &#x2F;&#x2F;  return require(&quot;highlight.js&quot;).highlightAuto(code).value;</span><br><span class="line">  &#x2F;&#x2F;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      article: &#123;</span><br><span class="line">        content: &quot;加载中……&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    compileMarkdown() &#123;</span><br><span class="line">      return Marked(this.article.content, &#123; sanitize: true &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created: function() &#123;</span><br><span class="line">    this.$ajax(&#123;</span><br><span class="line">      url: &quot;&#x2F;api&#x2F;article&#x2F;id&quot;,</span><br><span class="line">      method: &quot;get&quot;,</span><br><span class="line">      params: &#123;</span><br><span class="line">        id: this.$route.params.id</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(res &#x3D;&gt; &#123;</span><br><span class="line">      if (res.status &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class="line">        this.article &#x3D; res.data;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F;报错</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&#x2F;&#x2F; 直接引入样式覆盖。</span><br><span class="line">@import &quot;..&#x2F;..&#x2F;..&#x2F;node_modules&#x2F;github-markdown-css&#x2F;github-markdown.css&quot;;</span><br><span class="line">.post .title &#123;</span><br><span class="line">  margin-top: 50px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  font-size: 24;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h3 id="highlightjs-与-mainjs"><a class="markdownIt-Anchor" href="#highlightjs-与-mainjs"></a> highlight.js 与 main.js</h3><p>同方式二。</p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 配置与操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 配置与操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 项目打包为 Docker 镜像</title>
      <link href="/2019/04/02/springboot-docker/"/>
      <url>/2019/04/02/springboot-docker/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h2><p>先提一下整个流程。</p><p>Spring Boot 项目构建 jar 包，Docker 再把 jar 包打包为 Docker image。</p><p>流程是这样，再提一下细节。</p><ul><li>jar 包可以在 java 环境直接执行 <code>java -jar appname.jar</code> 启动。而 Docker 的任务就相当于封装 jar 包，java 环境， 以及 <code>java -jar appname.jar</code> 这条指令。</li><li>Docker 打包 jar 包需要一个 Dockerfile 文件，这个文件相当于一个配置，告诉 Docker 应该如何打包，如何启动 jar 包。</li><li>本地生成了 Docker image，想要把这个镜像部署到服务器，需要把 image 导出。这属于 Docker 命令了，这里不提。</li></ul><p>既然知道流程了，怎么实现呢?</p><p>两种方式，第一种很直观，自己构建 jar 包，然后在本地手动打包镜像。</p><p>第二种，则是通过配置（这里使用 Gradle），实现整个打包的流程。</p><h2 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意</h2><p>流程大致可以分为两步，生成 jar 包，生成镜像。每一步都会遇到坑，慢慢来……</p><p>首先确保生成的 jar 包可以通过 <code>java -jar appname.jar</code> 执行。</p><blockquote><p>可能会遇到 找不到主类等错误……</p></blockquote><h2 id="方式一"><a class="markdownIt-Anchor" href="#方式一"></a> 方式一</h2><h3 id="一-构建-jar-包"><a class="markdownIt-Anchor" href="#一-构建-jar-包"></a> 一 构建 jar 包</h3><p>首先构建 jar 包，</p><p>可以 build artifacts。</p><p>建议在根目录下执行 <code>gradle build</code> 或者 <code>gradlew build</code> 。</p><p>先测试一下 jar 包能不能正常运行。</p><p><code>java -jar appname.jar</code></p><p>可能会出现找不到主类之类的问题。</p><h3 id="二-创建镜像"><a class="markdownIt-Anchor" href="#二-创建镜像"></a> 二 创建镜像</h3><p>然后把 jar 包与 Dockerfile 放在同一目录下</p><p>如</p><p>docker/blog.jar</p><p>docker/Dockerfile</p><p>执行</p><blockquote><p>docker build -t [要生成的镜像名] .</p></blockquote><p>注意哈，后面有个点「.」。</p><p>Dockerfile 是打包 docker image 所需的配置文件</p><p>比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">## Dockerfile</span><br><span class="line">FROM aglover&#x2F;java8-pier</span><br><span class="line">VOLUME [&quot;&#x2F;tmp&quot;]</span><br><span class="line">ADD blog.jar app.jar</span><br><span class="line">## blog.jar 是目录下的 jar 包</span><br><span class="line">## app.jar 是 jar 包存放在 Docker 里的名字</span><br><span class="line">ENTRYPOINT [&quot;java&quot;, &quot;-Djava.security.egd&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom&quot;, &quot;-jar&quot;, &quot;app.jar&quot;]</span><br><span class="line">## 这一条就是 Docker 里执行 jar 包，相应的 后面的 app.jar 就是 Docker 内 jar 包名</span><br><span class="line">EXPOSE 8082</span><br><span class="line">## 暴露端口 无所谓吧，Docker 启动容器可以自定义</span><br></pre></td></tr></table></figure><p>这里很明显也能看出 Docker 内部还是用的 <code>java -jar appname.jar</code> 来运行。</p><h3 id="三-运行"><a class="markdownIt-Anchor" href="#三-运行"></a> 三 运行</h3><p>注意，运行需要指明 REPOSITORY TAG，</p><p><code>docker run -p 8082:8082 -t REPOSITORY:TAG</code></p><p>如</p><p><code>docker run -p 8082:8082 -t cn.hqweay/blog-backend:1.0</code></p><blockquote><p>注意啊，不这样会启动失败……这问题搞了好久。</p></blockquote><h3 id="疑问"><a class="markdownIt-Anchor" href="#疑问"></a> 疑问</h3><p>我在操作过程中去除了创建 Spring Boot 项目时自带的 Tomcat 依赖，不去不知道能不能行。</p><h2 id="方式二"><a class="markdownIt-Anchor" href="#方式二"></a> 方式二</h2><h3 id="springboot-gradle-docker-配置"><a class="markdownIt-Anchor" href="#springboot-gradle-docker-配置"></a> springboot + gradle + docker 配置</h3><h3 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h3><p><a href="https://juejin.im/post/5b27b7ac51882574c32c6588" target="_blank" rel="noopener"><a href="https://juejin.im/post/5b27b7ac51882574c32c6588" target="_blank" rel="noopener">https://juejin.im/post/5b27b7ac51882574c32c6588</a></a></p><h3 id="说明-2"><a class="markdownIt-Anchor" href="#说明-2"></a> 说明</h3><p>这里配置可以根据项目信息自动生成 Dockerfile，也可以指定本地 Dockerfile。</p><p>配置的主要目的是解决了手动把 jar 包打包为镜像。</p><h3 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h3><p>见仓库配置文件 <a href="https://github.com/hqweay/blog-backend/blob/master/build.gradle" target="_blank" rel="noopener">https://github.com/hqweay/blog-backend/blob/master/build.gradle</a></p><p>根目录执行</p><p><code>./gradlew clean build dockerBuilder --info</code></p><p>即可打包。</p><p><code>./gradlew build</code> 这条命令是构建 jar 包。</p><p>能看出，整条命令就是先打 jar 包，再执行 dockerBuilder 生成 Dockerfile 文件（或者使用指定的 Dockerfile 文件），再打包为 Docker image。</p><p>当然，本地安装了 Docker，就会使用本地 Docker 来完成打包。</p><p>如果本地没有 Docker ，idea 可能会自动引入吧。我没试过……</p><h3 id="注意-2"><a class="markdownIt-Anchor" href="#注意-2"></a> 注意</h3><p>理解打包的这个流程，配置中的各项就很清晰了……照搬配置会出很多问题的……</p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 配置与操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置与操作 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串常量池到底保存的是字符串对象还是字符串对象的引用？</title>
      <link href="/2019/03/22/string/"/>
      <url>/2019/03/22/string/</url>
      
        <content type="html"><![CDATA[<h2 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论</h2><p>在 JDK 6 及以前版本，字符串常量池保存字符串对象；JDK 6 之后的版本中，既保存了字符串对象，又保存了字符串对象的引用。</p><h2 id="证据"><a class="markdownIt-Anchor" href="#证据"></a> 证据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String s = <span class="keyword">new</span> String(<span class="string">"1"</span>);</span><br><span class="line">    s.intern();</span><br><span class="line">    String s2 = <span class="string">"1"</span>;</span><br><span class="line">    System.out.println(s == s2);</span><br><span class="line"></span><br><span class="line">    String s3 = <span class="keyword">new</span> String(<span class="string">"1"</span>) + <span class="keyword">new</span> String(<span class="string">"1"</span>);</span><br><span class="line">    s3.intern();</span><br><span class="line">    String s4 = <span class="string">"11"</span>;</span><br><span class="line">    System.out.println(s3 == s4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JDK <span class="number">6</span> 输出 : <span class="keyword">false</span> <span class="keyword">false</span></span><br><span class="line">JDK <span class="number">7</span> 输出 : <span class="keyword">false</span> <span class="keyword">true</span></span><br></pre></td></tr></table></figure><h3 id="jdk-6"><a class="markdownIt-Anchor" href="#jdk-6"></a> JDK 6</h3><p><code>String s = new String(&quot;1&quot;);</code> 这种创建字符串的方式实际生成了两个字符串对象。首先，构造器中传入一个字符串对象 <code>1</code>，它被放在字符串常量池。然后 JVM 会在堆中再创建一个字符串对象 <code>1</code>，字符串变量 <code>s</code> 指向堆中这个字符串对象 <code>1</code> 的首地址。</p><p>当调用 <code>s.intern()</code> 时，由于字符串常量池已经存在字符串 <code>1</code> 了，所以会将字符串常量池中的字符串对象 <code>1</code> 返回。（JDK 7 的情况有所不同，后面会讲。）</p><p>再通过 <code>String s2 = &quot;1&quot;</code> 来给变量 <code>s2</code> 赋值时，会将字符串常量池中对象 <code>1</code> 的首地址返回给 <code>s2</code>。</p><p><strong>由于 <code>s</code> 指向堆中字符串对象 <code>1</code> 的地址，而 <code>s2</code> 指向字符串常量池中 <code>1</code> 的地址，调用 <code>s == s2</code> 的返回值当然是 <code>false</code>。</strong></p><p>在 <code>String s3 = new String(&quot;1&quot;) + new String(&quot;1&quot;);</code> 中则涉及字符串常量池中的对象 <code>1</code> 以及拼接而成、保存在堆中的字符串对象 <code>11</code>。当调用 <code>s3.intern();</code> 时，由于字符串常量池中没有 <code>11</code>，此时会在字符串常量池中生成一个字符串对象 <code>11</code>。</p><p>同理，<strong>由于 <code>s3</code> 指向堆中字符串对象 <code>11</code> 的地址，而 <code>s4</code> 指向字符串常量池中 <code>11</code> 的地址，调用 <code>s == s2</code> 的返回值当然是 <code>false</code>。</strong></p><h3 id="jdk-7"><a class="markdownIt-Anchor" href="#jdk-7"></a> JDK 7</h3><p>判断 <code>s==s2</code> 与上文一致，但是在执行 <code>s3.intern();</code> 时，虽然字符串常量池中还没有字符串对象，由于在上一步 <code>String s3 = new String(&quot;1&quot;) + new String(&quot;1&quot;);</code> 中已经在堆中生成了一个字符串对象 <code>11</code>，所以<mark>会将堆中的字符串对象的引用保存到字符串常量池。</mark></p><p>这时调用 <code>s3 == s4</code>，两者都指向的是堆中字符串对象 <code>11</code> 的首地址，所以返回值是 <code>true</code>。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>在 JDK 6 中，当调用字符串的 <code>intern()</code> 时，若字符串常量池先前已创建出该字符串对象，则返回字符串常量池中该字符串对象的引用。否则，将该字符串对象添加到字符串常量池中，再返回该字符串对象的引用。</p><p>而在 JDK 7 中，当调用 <code>intern()</code> 时，如果字符串常量池先前已创建出该字符串对象，则返回池中的该字符串的引用。否则，若该字符串对象已经存在于 Java 堆中，则将<strong>堆中对此对象的引用</strong>添加到字符串常量池中，然后返回该引用；如果堆中不存在，则在池中创建该字符串并返回其引用。</p><h2 id="引用"><a class="markdownIt-Anchor" href="#引用"></a> 引用</h2><p><a href="https://tech.meituan.com/2014/03/06/in-depth-understanding-string-intern.html" target="_blank" rel="noopener">深入解析String#intern</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 自己浅见 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日记</title>
      <link href="/2018/11/28/diary/"/>
      <url>/2018/11/28/diary/</url>
      
        <content type="html"><![CDATA[<p>「虽然开玩笑说每天要说够一定量的废话，谁说不够谁不开心。其实我并不太适合靠和朋友谈天说地来缓解压力，尤其是一直以来都是靠着自己调整情绪在过活。情绪交换势必会让自己的时间向别人妥协，没得法。即便每个人都在妥协。有可能吧，因为种种原因，比如对别人不信任，死读卡耐基，精神不对等什么的……有的人就放弃了自己吐槽的权利，在一段关系中变成了一个单向垃圾桶。这种人表现得精力充沛的样子，其实维持这种样子就得消耗大量精力。成年以前，在一个封闭的环境，我还可以每天冷脸三点一线，并且享受这种效率带来的快感。可是现在刚刚成年，要忙着为未来做准备吧，要玩耍吧，要谈恋爱吧，还要建立自己的道德体系……」</p><p>「我似乎就是这样的矛盾体。刚来学校时，社团招新，我准备告别中学时的郁郁不得志，于是毫无准备就投身到各个报到点。面试的时候那个学长问我哦，说你觉得你是一个什么样的人？」</p><p>「哪有这样的问题啊！我是怎样的人，不就是你看到的这样一个人吗？可是当时我萌新嘛，于是就仔细斟酌了一下，告诉他说，我是一个挺矛盾的人吧。当时说出这个答案把我自己吓了一跳，就急忙解释，可能我这样说有点奇怪……」</p><p>「没想到那个学长说，这完全不奇怪哦！大家都是这样的。然后吧，当时我就震惊地看着他，脸都红了，尴尬地不得了。同时内心也很高兴，原来大家都是这样，真好啊，我终于不是异类了，我终于来到充满了爱和包容的大人世界了！」</p><p>「哎，我那时真是一个无可救药的傻瓜。这样的言语其实不过是骗新生交部门建设费用的安慰剂而已。当时实在太年少了，一直觉得这些大我们一两岁的年轻人比我们懂得更多一些。其实单纯的年龄增长在人格健全方面根本毫无贡献嘛！」</p><p>「那个时候的我却感动得不行，立马交了十块钱的社团经费。不过那已经不是我了哦，而是一个被情绪驱使的我，情绪这种诡异的东西占据了我的躯体，我才会做出交钱这种不含蓄的事。」</p><p>「然后他拉我进了一个叫做『XX 猫粮销售 XX 地区代理』的 QQ 群。还催促着我改群名片。我愣了一下，说我们不是『保护小动物协会』吗？他说那种事我们有空了也做，不过你难道不想在大学赚点零花钱用吗？我们去年是 XX 地区的销售冠军哦！」</p><p>「我期待中温柔的学姐照顾小兔子的场景就这样在我眼前变成泡沫。」</p><p>「这太让人失望了吧！」</p><p>「我就是这样的人啊。倾向于坦诚的关系，有效率的交流。即便是对那种在心灵鸡汤上被划分为弱关系的人。」</p><p>「这样的代价就是有可能会失望啊。对于他们来说，做人好像就是一场零和游戏，与人建立关系就是为了在这段关系能达到顶峰时抛售，然后获取利益。可是我不想这样啊，如果每个人都能坦诚的话……这当然不可能，不过为什么我都把自己的底牌亮在自己脑门上了，他们还是不愿意对我坦诚呢。甚至还觉得我已经暴露底线了，我完蛋了。」</p><p>「你听说过那个形容吗？『房子好像突然变得不高兴。』我当时情绪就是有这么低落。」</p><p>「像一条狗一样。」她加了一句。她的意思似乎是，她离开了，但是被戏弄的感觉久挥不去。</p><p>我看着她在我的面前进行情绪表演，心里产生了一种令人作呕的快意。我对她的厌恶似乎是与生俱来的。有些时候就是这样，你都不知道自己为什么会对一个人没来由的生厌。她似乎行为得体，其实也说的上是作风优良了，处事都是三好青年的风范，可我就是对她产生不了好感。她的言行在我看来都是做作——特别是言，每当她充满感情地向我喋喋不休地倾诉那些我并不感兴趣的东西，每一帧都让我感到生理上的不适。</p><p>「就是呢。」我笑着回答她。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 故事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 故事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路灯</title>
      <link href="/2018/09/19/street-light/"/>
      <url>/2018/09/19/street-light/</url>
      
        <content type="html"><![CDATA[<p>她走得很慢，影子刚好靠在我的右边肩膀。我保持着这来之不易的瞬间，灯光却不解风情又轻而易举地托起她的影子往前跑去。我让她的速度慢下来了，然后欣喜地盯着影子又跃上我的肩头。</p><p>身后传来她温柔的声音「走这么快干嘛。」</p><p>句子从她的嘴里吐出，一半变成弓箭刺向我的心脏，一部分悄悄地从我的耳朵钻进去。我的脑子朦朦胧胧的，靠着胸口的刺痛才能勉强维持理智。</p><p>我开始支吾。一半是斟酌了半天的话不知道怎么开口，一半是脑袋在疯狂地运算怎么去回答这个问题。</p><p>什么是社交恐惧症，是不想和别人交流吗？可我此刻非常想和她说话，只是不知道从哪里开口。</p><p>她知道我的心情吗？</p><p>我像是回到了去年的语文考场，因为是第一堂考试，整场我都激动地发抖。而此刻的我就像是在做一道高考语文的分析题，担心词不达意，担心鲁莽唐突，又担心说的话用上了超过我们现在关系该用的词汇。</p><p>我给自己鼓励，张嘴呀，说话吧，一，二，三……好！下个路口就向她攀谈，马上就到了，马上就到了，十，九……</p><p>「那个……」</p><p>她突然开了口。</p><p>我有点失望，又有点庆幸。</p><p>「怎么了？」</p><p>影子似乎转了一圈，现在停在我右肩靠后的位置。我向右后方瞥了一眼，收回视线向左，她在我左边五十多公分外。我一边做出认真听她讲话的样子，一边慢慢降速，假装不经意地来到她的左边。</p><p>她用手指了指右处，路灯在她纤细的手指上抹了一层压抑的灰。</p><p>有桂花的香味飘了过来。</p><p>两个影子缩在我们的脚下。</p><p>「那，我走这儿。」她这样对我说。</p><p>我注意到她说这句话的时候睫毛抖了几下。</p><p>「这样啊……嗯……」</p><p>只有道别了吧，虽然有点不甘心。</p><p>这是去年的事了。那时候刚刚中学毕业的我一直坚信着倾听是维护一段关系的良方，但总有些时刻是不得不开口的。</p><p>那个时候我确实是鼓起勇气说了一些东西。我是怎么做的呢？</p><p>我不记得她的脸了。她的身高？和我差不多吧。但是我还记得和她一起走过那段路的感觉。我躺在那种舒适里，连她的侧脸也忘了装进记忆。</p><p>我抬起了头，没敢和她正视。</p><p>「嘿！」我唤她，「看星星勒！」</p><p>我不确定是否真的能看到星星，但依稀记得似乎有一轮圆月挂在远处。</p><p>我紧张了。</p><p>我开了口，胆子又大了些，「那个，你看！」</p><p>我的脸通红。</p><p>「你看这星星像不像两百块钱？」</p><p>我不知道她是不是有抬头，她应了一声「啊，对了，我还欠你两百块钱，马上转给你。」</p><p>我抬着脖子不敢看她，「啊，那个啊，不急，你不说我都忘了。」</p><p>她说，「那哪行啊，我这就转给你。」</p><p>我仍抬着头，感觉到口袋里的手机传来一阵震动。</p><p>我们终于道别，她转身向右。我的脸还有点发烫，感觉到一阵燥热聚集在耳根处。我用脚尖揉地上的桂花，抬头望光线的痕迹，透过树枝的缝隙远眺天空，目光随着她渐远。她把两手收进了衣服口袋，在我的眼睛里渐渐模糊，分离。</p><p>我有点遗憾，因为她始终没有回头。</p><p>从恍惚中回过神来，我掏出手机，点了确认收账。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 故事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 故事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于成长他唯一记得的是</title>
      <link href="/2018/08/08/grow/"/>
      <url>/2018/08/08/grow/</url>
      
        <content type="html"><![CDATA[<p>在网络时代以前，名言警句还大多来源于名著，这些隽语里，「人」这个字似乎出现得要更频繁些。如果把现在的所有名言统计下来，「人生」这个词的出现频率一定远远大于其他词汇短语。这当然是信口开河，我没有做过统计，也不打算深究，只是想当然觉得好像是这么回事。</p><p>人生的终点是时间不确定的唯一项，可路上还有许许多多其他的终点等待着我们去攀登或者路过，倒也不会寂寞。每结束一段路程，心情总是会低落一阵子。如果有一个开心测量仪，平时的开心指数会在 0 到 0.5 之间徘徊，而这段时间的开心指数会突破 -1。</p><p>时间回到一年前，我在差不多的时间开始折腾这个博客，一年不过是转眼间的事，没意外的话，校园生活也进入了倒计时，这种被时间追赶的感觉我还没适应过来，身边的一切事物就开始已不可见的震动发出声波传送至我的耳朵，内容翻译成中文的大意是「抓紧扶牢，时间它要加速了。」</p><p>我在这个博客的第一篇博文提到刚结束一门课程，今年也是如此。说出来可能有点搞笑，我的情绪低落来源于今天结束了课程，明天，终于要迎来暑假。我怀疑自己是不是过于早熟，以至于提前开始怀念自己的校园时光。大概不是这个原因。但我确实在象牙塔感受到安全感，在朝九晚五的日子感受到充实。</p><p>宫崎骏里的台词说就像一趟车，陪伴你的人会不断地下车。我不怎么讲命运这个词，但是人能够相聚到一起，确实是一个很了不起的概率。</p><p>当我下车的时候，总有一种双手无处安放的局促。好像突然从某天开始，就从一个无忧无虑的小孩坐到了宇宙管理委员会会长的座位上，每天都得签署一堆关乎宇宙命运的文件。</p><p>纠结于下车的时机，在终点间奔波。突然意识到所谓的成长，已经不再是装作很喜欢喝啤酒，而是不得不独自做出各种决定，并且承担它带来的任何后果。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6 月 9 日</title>
      <link href="/2018/06/09/nothing/"/>
      <url>/2018/06/09/nothing/</url>
      
        <content type="html"><![CDATA[<p>前几日正值高考，可惜我的人际范围里已经没有高三党了，满腹祝福无人可倾，只好修改下遣词造句以备将来。</p><p>其实当时还是有不少遗憾的，有时候甚至还会把自己现在的不如意甩锅给从前。不过毕竟是个过来人了，似乎已经领取到了讨论这件全国性的大事件的资格证。而常言道，拥有的东西总是不过尔尔。千言万语也就化为无法免俗的客套。</p><p>六月总体来说是个伤感的月份，虽然比起六月的炎热，情绪的变化有些微不足道。有时候想些莫名其妙的东西，常怀疑身处其间时的感情和之后的回忆是两回事。看着过去在社交软件留下的动态，觉得当时过得似乎挺开心的，但不知为何，这些年回想起来，总是几件不那么愉快的事情占据脑海。以前看到一个说法，青春就是回忆过滤掉愁苦与纠结。可能我太幼稚了，有那么一段时间心智还停留在童年。只有小孩会为不值得的事浪费时间。</p><p>父打电话说旁边的高中因为高考放假了，问我放了没。母上周周末和我对话，埋怨我放假怎么都不往家里打电话。我安慰自己不要把假期当做思念的借口，把与家人联系当做一件很正常很普通的事 —— 我对人与人之间关系的定义大多如此，即真正的感情不需要刻意的维护。但是仪式感还是很重要的。很重要。</p><p>上周在图书馆外面遇到拍毕业照的青年，和别人谈起来都觉得时间真是越来越快，似乎花了中学时的一学期就过完了两年。谈起两年后，又都是玩笑。就像关于离别的话题本该这样。</p><p>我有时在操场上排泄盐分，回想人类的情绪表演，便展现出惊人的共情天分，表情像是可以随时替他们流泪。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>真相不重要</title>
      <link href="/2018/05/27/truth/"/>
      <url>/2018/05/27/truth/</url>
      
        <content type="html"><![CDATA[<p>直觉大部分的争论在于对话双方对自己结论的深信不疑，不过也有人是对自己结论的来源深信不疑。</p><p>交流是建立在对自己的想法存疑这个前提上的。否则就会陷入「没有一张嘴能说服谁的耳朵」的状态。或者一方以退让作为回应，而另一方还沾沾自喜。</p><p>就我自己经验，很多事情都没有一个是非黑白，所以便觉得真相不重要了。</p><p>情绪被媒体左右，随着新闻不断反转而不断打自己的脸——慢慢觉得自己离真相其实很遥远。毕竟是信息时代了，现在有爆炸的资讯。以前人家通过创造信息来忽悠，现在人家通过筛选信息来忽悠。</p><p>不管是没有确定的事实，还是难以抵达真相。不如把这些东西当做细枝末节抛开，比起是什么，专心于为什么。</p><p>对事件本身没有想法，几千字的论证只记住了最后的结论。面对墙外的广阔天空，不加辨别的全篇接受。都不好。</p><p>不过这都是作为吃瓜群众来讲。作为当事人（特别是新闻里的），那这就是事实，没什么说的。当事人最好还得尽力发声并维护使事实不跑偏——「跑偏的事实」太可怕了。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我理解的预测与推荐</title>
      <link href="/2018/05/27/recommendation/"/>
      <url>/2018/05/27/recommendation/</url>
      
        <content type="html"><![CDATA[<h2 id="推荐"><a class="markdownIt-Anchor" href="#推荐"></a> 推荐</h2><p>怎么做推荐呢？实际开发过程中，我们一边学习推荐相关的知识，一边先按直觉做了几个 demo。</p><p>在第一个版本中，用模糊查询实现。根据用户的相关信息到数据查询。大概是因为逻辑判断太多了，速度非常慢。</p><p>第二个版本，尝试优化查询语句，建立索引。</p><p>第三个版本。因为前面已经通过多元回归计算出了用户的工资区间（虽然很不准确就是了），我们拍脑袋觉得对于一份工作来说，工资是很重要的，于是直接按工资区间到数据库查询…</p><p>前两个版本，模糊查询的推荐结果还不错，至少能一眼看出与用户的信息有关。但是速度实在太慢了。</p><p>第三个版本，因为前面做的预测结果本来就不准，所以效果更差劲…而且这个思路太想当然了。</p><p>但至少现在已经有这样一个功能模块了!!于是接着尝试真正的推荐。</p><h2 id="我理解的推荐"><a class="markdownIt-Anchor" href="#我理解的推荐"></a> 我理解的推荐</h2><p>因为水平不到位，不能从比较宏观的角度解释，下面都只是我在这个项目中的感受。所以，推荐以「推荐 Job」为例…</p><p>我理解的推荐，就是为用户建立一个模型——「我最喜欢的 Job」。系统不断优化这个模型，试图找到用户心中最中意的那个 Job。（这只是个理想化的模型，实际的系统当中可能并不存在）然后从系统中找出与这个模型最匹配的 Job，推荐给用户。</p><p>那么问题来了，计算机怎么判断用户是不是中意某个 Job 呢？</p><p>我们看看协同过滤算法中的基于用户的推荐算法。</p><h3 id="基于用户的推荐算法"><a class="markdownIt-Anchor" href="#基于用户的推荐算法"></a> 基于用户的推荐算法</h3><p>最简单的一种，如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">小明 喜欢 A、B、C。</span><br><span class="line">小红 喜欢 A、B、C、D。</span><br></pre></td></tr></table></figure><p>我们发现小红的喜欢和小明的喜欢重叠度很高，小明可能也会喜欢 D，所以把 D 推荐给他。</p><p>但是这种判断的粒度太大了，再细一点可以这样:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">小明 非常喜欢 A</span><br><span class="line">小明 有点喜欢 B</span><br><span class="line"></span><br><span class="line">小红 非常喜欢 B</span><br><span class="line">小红 有点喜欢 A</span><br></pre></td></tr></table></figure><p>在计算机中，可以简化为这样的三元组 <code>&lt; 用户 ID， 物品 ID， 用户偏好 &gt;</code> 表示:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">用户   JobID   偏好值(权重)</span><br><span class="line">小明    001    15</span><br><span class="line">小明    002     0</span><br><span class="line"></span><br><span class="line">小红    001     0</span><br><span class="line">小红    002     15</span><br></pre></td></tr></table></figure><p>那么这个偏好值怎么来呢？</p><p>肯定需要严格的算法…</p><p>我们可以粗略举个例子来理解，比如用户点击一次某个职位，我们假定他是被这个职位所吸引，把他与这个职位的权重相应增加。</p><p>这样在计算机内部就得到用户与 Job 的关系。</p><p>用这样的数值来量化之后，我们就可以通过做一些矩阵运算，根据用户自己的列表和别的用户的列表，把口味相似的用户关注的职位推荐给用户。</p><p>好了！暂且到这一步。</p><p>我们回过头来看，基于用户的推荐算法，需要满足两项。</p><ol><li>用户（使用推荐功能的用户）的喜好</li><li>别的用户的喜好</li></ol><p><strong>这就是冷启动需要解决的问题。</strong></p><p>它不仅需要用户自己有信息，还需要别的用户有信息…</p><p>考虑到我们做的这个小项目根本不可能有那么多用户，测试起来也麻烦，看来这个方式不合适…</p><h3 id="基于内容的推荐算法"><a class="markdownIt-Anchor" href="#基于内容的推荐算法"></a> 基于内容的推荐算法</h3><p>基于用户的推荐算法，是通过比较各个用户的喜好，把别的用户关注的东西推荐给有共同喜好的用户。</p><p>而基于内容的推荐算法，就是把用户的喜好直接与 Job （物品）比较。</p><p>还是看个最简单的:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">小红       喜欢 哲学书籍</span><br><span class="line">《大问题》  是   哲学书籍</span><br></pre></td></tr></table></figure><p>所以把《大问题》推荐给小红。</p><p>同样，我们可以更细粒度一点:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">小红       非常喜欢   哲学书籍</span><br><span class="line">小红       有点喜欢   小说</span><br><span class="line"></span><br><span class="line">《大问题》   是       哲学书籍</span><br><span class="line">《爱的教育》 是       小说</span><br></pre></td></tr></table></figure><p>我们优先推荐《大问题》给小红…</p><p>而在计算机内，可能是这样表示的:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">用户标签权重</span><br><span class="line">小红Java 10</span><br><span class="line">小红Web  9</span><br><span class="line"></span><br><span class="line">Job标签权重</span><br><span class="line">001Java 0</span><br><span class="line">001Web10</span><br><span class="line">002Java10</span><br><span class="line">002Web9</span><br></pre></td></tr></table></figure><p>通过计算向量距离，得出用户和 Job 的相似度，生成推荐。</p><p>基于内容的推荐需要解决两个问题。</p><p>第一个仍然是<strong>冷启动</strong>，用户需要打上标签。我们考虑过根据用户的行为——历史记录，点击记录等来生成用户标签。</p><p><strong>不过都没时间做…</strong>（太真实了）</p><p>其实提到这个场景，我想到的是各种信息流 app，注册时让用户选择一堆感兴趣的话题，相当于打上标签。于是我也模仿这样做了个…</p><p>我们只做到了用户和某个标签产生联系，如标签 <code>Hadoop</code> ， <code>Java</code> …</p><p>存在数据库里 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用户 ID标签Id有无 // 标志用户有没有选择某个标签。。。</span><br><span class="line">0010010</span><br><span class="line">0010021</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>第二个问题就是提取出 Job 的标签，并且提取权重。</p><p>这个是重点也是难点…</p><p>从抽象的角度来看，Job 其实也只是一串文本描述的一样物品。</p><p>粗略地做，我们可以进行简单的词频统计…</p><p><strong>常用的更标准的方式是使用 TF-IDF。</strong></p><h3 id="比较"><a class="markdownIt-Anchor" href="#比较"></a> 比较</h3><p>SQL 模糊查询是基于元数据的推荐。比如推荐书，紧紧按出版年份来推荐是不太合适的。(大多数情况下)</p><p>而协同过滤，是基于标签，更合理些(理论上)。</p><p>我们做出来的效果，感觉模糊查询似乎看起来科学点…至少能在推荐的结果找到我们的输入的信息。</p><p>通过后面的方式得到的推荐结果（因为我们技术不到位的原因）看起来有点没头没脑…</p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 自己浅见 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>褛衣夜行</title>
      <link href="/2018/05/25/one-night-in-blog/"/>
      <url>/2018/05/25/one-night-in-blog/</url>
      
        <content type="html"><![CDATA[<p>之前和伙伴整天对着电脑造玩具，总担心落下了基础，最近啃书又怕耽搁实践。不由觉得那些贩卖焦虑的网络写手真是精通心理的学家。本来没什么感觉，被这些爆文一忽悠，就突然意识到「焦虑」这种情绪的存在了，并且觉得到处都是这玩意，难以摆脱。</p><p>究其原因大概是因为在一个大部分都还皆有可能的环境下，我仍抱有能把这些麻烦事一件件处理完的期待。</p><p>叹气着「麻烦呀真麻烦」，但当别人说「麻烦的话，不做不就好了。」又觉得别人多嘴。</p><p>这是宫崎骏在某个采访里说的话，印象很深。</p><p>毕竟「重要的事情总是很麻烦。」</p><p>这类金句还挺常见的，《电脑线圈》的最后一句台词是「能感觉到疼痛的地方一定会有出口。」</p><p>这种口头禅式的抱怨只是情感宣泄的一种方式。就像网上流传的聊天达人的技巧，当别人抱怨时，你顺着对方的话说就行了。要是当真了一本正经的解释，反倒无趣。</p><p>这种交流方式太累人了，我没尝试过。不过想来应该没差。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小卖部略显冷清</title>
      <link href="/2018/04/21/meet/"/>
      <url>/2018/04/21/meet/</url>
      
        <content type="html"><![CDATA[<p>清明节假期和两个小伙伴约着见了一面。</p><p>确实只是见了一面，少不了的吃肉环节，然后骑着共享单车绕了某城一圈。</p><p>去了省字号大学，惭愧的不行。一所大学能成为一个省会的标志性地点，真酷。</p><p>去了某书店。刚来念书的时候第二个见见世面的地点，说起来也隔了大概 18 个月了。上次是一个人，这次是三人行。心境也和当时截然不同。</p><p>我认为不管哪方面来讲，「不可替代性」是很重要的。毕竟很多人都喜欢用「每个人都是独一无二的」这种话来打气。一个地方，一件事，如果没有「不可替代性」就没有去拜访，去做的价值咯。</p><p>当然啦，「不可替代性」这种东西仍然是很私人的东西，就像一条普通的毛衣，因为是母亲手打的，对于某个人来说就是不可替代的东西。</p><p>现在的我总觉得这地方几乎每个缝隙都插着几个假装看书摆拍照片的人，这让我很不爽，因为他们挡着我自拍了。于是我认定这地方对我来说不再有不可替代性。</p><p>晚上又吃了顿肉。快要各回各家了，气氛大体还是愉快。</p><p>热情的林酱给我们一人一个拥抱。</p><p>不过其实这并不算真正意义上的离别，一个城市，一个多小时车程，唯一阻止我们的只有钱而已。</p><p>「那时间呢？」</p><p>我说我闲的抠脚，天天靠吹牛逼取乐。</p><p>又洋溢起快活的气息。</p><p>突然想起见面的时候太过熟络了，完全没有好久不见的感觉，所以忘了寒暄一下，「最近好吗？」</p><p>这问题太蠢了，还好我没问出口。</p><p>21 点，高峰期。</p><p>归校，小卖部略显冷清，老板娘在数零钱取乐。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最后几十分</title>
      <link href="/2018/04/20/live/"/>
      <url>/2018/04/20/live/</url>
      
        <content type="html"><![CDATA[<p>和小伙伴参加了一个比赛，今天算是告一段落了。波波老师说结局如何不重要的，反正这阵子学到了很多东西。扪心自问，我对这个过程也算是乐在其中，不过最给我动力的还是「能够发朋友圈炫耀的收获」这种渺渺小小的希望。</p><p>「不管如何，既然要做，就要做到现有条件所能达到的最好状态。」</p><p>抱着这种想法，就可以愉快地接受失败了。以后也不会拿「如果」「要是」这种词汇来搪塞此时的愚蠢。</p><p>以前有老师对我说过，「不要想着去拿最后那几十分，保证前面的分都拿到手，你就不错了。」这话要是用在主角的身上，搞不好会来个咸鱼翻身、怒上名校、写回忆录时谈到「我能有今天的成就全靠某老师当初的激励……」等等剧情。</p><p>不过我真的很会接受别人的建议，甚至发现这句话真是我这类不思进取的人之良药，并把它运用到生活的方方面面。坚信着我前十多年的人生就是因为过于追求后面那几十分，所以失去了太多本可以拥有的东西。</p><p>没错呀，要是整天抱着「比特币 3000 软一个的时候我就想买了可是没钱」这种想法，人生岂不是没有活头了。</p><p>这样真挺好了。等于是把「不要为过去的悲伤流眼泪」转换成了「不要为不可控的事情流眼泪」。话说银行卡上就写着「战争，自然灾害等不可控因素造成的损失不予赔偿」之类的话呢……</p><p>诶，挺好的。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性格</title>
      <link href="/2018/03/26/character/"/>
      <url>/2018/03/26/character/</url>
      
        <content type="html"><![CDATA[<p>一个人突然性情大变是可能的。</p><p>前几天吹牛，波波老师说他年长我好几岁，因为当初经常转学，留了几次级。我打趣说大家都是这样，前二十多年的人生，不断地和一群熟悉的人分开，奔向另一个地方重新开始。</p><p>我用了「重新开始」这个词，因为当时想到了上面的那个问题。到了一个新的地方，换个性格重新开始。</p><p>我觉得性格就是一套与人相处培养出来的行为准则。我不改变是因为处于这种舒适区并且觉得改变带不来什么好处（好处的定义由三观决定）。要是有人改变了性格并且不断地从中获取正反馈，不就一直这样下去咯。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 的简单使用</title>
      <link href="/2018/02/01/git/"/>
      <url>/2018/02/01/git/</url>
      
        <content type="html"><![CDATA[<h2 id="前戏"><a class="markdownIt-Anchor" href="#前戏"></a> 前戏</h2><p>下载安装 Git。</p><p>PS：Gitee、Github、Coding 这类 Git 协作管理工具原理都一样。</p><h2 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h2><h3 id="全局配置"><a class="markdownIt-Anchor" href="#全局配置"></a> 全局配置</h3><p>该配置是全局配置，对于不同的管理工具，只要用的一套邮箱和密码，都可以使用。</p><blockquote><p><code>git config --global user.name &quot;在 Github 等站的名字或昵称&quot;</code> &gt; <code>git config --global user.email &quot;在 Github 等站注册使用的邮箱&quot;</code></p></blockquote><h3 id="针对项目配置"><a class="markdownIt-Anchor" href="#针对项目配置"></a> 针对项目配置</h3><p>需要在项目根目录下进行配置。</p><blockquote><p><code>git config user.name &quot;Your Name&quot;</code></p><p><code>git config user.email &quot;Your email&quot;</code></p></blockquote><p>注意：如果你配置了全局的用户名和邮箱，仍可以针对项目进行配置，Git 会优先考虑针对项目的配置，找不到才会去使用全局的配置。</p><h3 id="查看当前配置"><a class="markdownIt-Anchor" href="#查看当前配置"></a> 查看当前配置</h3><blockquote><p><code>git config --list</code> 查看当前配置</p></blockquote><h2 id="本地生成-ssh-公钥并在-github-等站配置"><a class="markdownIt-Anchor" href="#本地生成-ssh-公钥并在-github-等站配置"></a> 本地生成 SSH 公钥，并在 Github 等站配置</h2><p>在配置好用户名和密码后，可以进行生成公钥。</p><h3 id="为什么要配置-ssh-公钥"><a class="markdownIt-Anchor" href="#为什么要配置-ssh-公钥"></a> 为什么要配置 SSH 公钥</h3><p>配置 SSH 公钥后，本地仓库与远程仓库可以通过 SSH 链接进行交互（pull，push 等操作）。</p><blockquote><p>SSH 链接示例： <code>git@github.com:hqweay/MarkAll.git</code></p></blockquote><p>反过来说，如果你通过 SSH 链接关联远程仓库与本地仓库，就必须配置 SSH 公钥，才能进行 Git 操作。</p><p>另一方面，如果你通过 HTTPS 链接进行关联，你就无需配置 SSH 公钥。</p><blockquote><p>HTTPS 链接示例：<code>https://github.com/hqweay/MarkAll.git</code></p></blockquote><p>若你通过 HTTPS 链接对本地仓库和远程仓库进行关联，在进行 push 操作时，Git 将会提示你手动输入密码以验证权限。</p><p>所以通过 SSH 与 HTTPS 链接关联远程仓库库与本地仓库的区别就显而易见了，通过 SSH 链接，一次配置后以后就无须重复输入密码，同时，不必输入密码，也在一定程度上保证了安全。</p><h3 id="生成公钥"><a class="markdownIt-Anchor" href="#生成公钥"></a> 生成公钥</h3><blockquote><p><code>ssh-keygen -t rsa -C &quot;xxxxx@xxxxx.com（你的邮箱）&quot;</code></p><p>连续按三次回车，使用默认配置即可</p></blockquote><h3 id="查询公钥"><a class="markdownIt-Anchor" href="#查询公钥"></a> 查询公钥</h3><blockquote><p><code>cat ~/.ssh/id_rsa.pub</code></p></blockquote><p>这一步是查询公钥，把显示的东西全复制下来即可。</p><p>如果操作系统是 Windows，可以打开 <code>C:\用户\Users\.ssh\id_rsa.pub</code> 文件查看公钥。</p><h3 id="配置-2"><a class="markdownIt-Anchor" href="#配置-2"></a> 配置</h3><p>然后把公钥粘贴到 Github 这类网站配置 SSH 公钥的的对应位置即可。</p><h2 id="基本操作"><a class="markdownIt-Anchor" href="#基本操作"></a> 基本操作</h2><ul><li><p><code>git clone git@github.com:hqweay/MarkAll.git&lt;仓库链接&gt;</code></p></li><li><p><code>git pull orign&lt;remote&gt; master&lt;branchName&gt;</code></p></li><li><p><code>git push origin&lt;remote&gt; heng&lt;branchName&gt;</code></p></li></ul><p><strong>PS：了解下 rmeote 概念就行了。</strong></p><ul><li><code>git merge &lt;想要合并到当前分支的分支名&gt;</code></li></ul><h3 id="其它"><a class="markdownIt-Anchor" href="#其它"></a> 其它</h3><ul><li><code>git init</code></li><li><code>git remote</code></li><li><code>git branch</code></li></ul><h3 id="提交"><a class="markdownIt-Anchor" href="#提交"></a> 提交</h3><ul><li><code>git add .</code></li><li><code>git commit -m&quot;&quot;</code></li><li><code>git push</code></li></ul><h2 id="常用命令"><a class="markdownIt-Anchor" href="#常用命令"></a> 常用命令</h2><h3 id="将本地库与远程库关联"><a class="markdownIt-Anchor" href="#将本地库与远程库关联"></a> 将本地库与远程库关联</h3><p><code>git remote add origin git@github.com:hqweay/MarkAll.git</code></p><p>origin 为本地库的关联名</p><p>一个本地库关联多个远程库，就是通过更改 origin 这一项的名字实现的。</p><p>比如：</p><p><code>git remote add One git@github.com:hqweay/MarkAll.git</code></p><p><code>git remote add Two git@github.com:hqweay/MarkAll.git</code></p><p>就实现了一个本地库关联两个远程项目，需要进行操作时便分别通过名称 One，Two 来操作。</p><h3 id="关联其它操作"><a class="markdownIt-Anchor" href="#关联其它操作"></a> 关联其它操作</h3><p>删除关联 <code>git remote rm origin</code></p><p>查询关联 <code>git remote -v</code></p><h3 id="clone-某分支"><a class="markdownIt-Anchor" href="#clone-某分支"></a> clone 某分支</h3><p>默认克隆 master 到本地：<code>git clone git@github.com:hqweay/MarkAll.git</code></p><h3 id="回退到某版本"><a class="markdownIt-Anchor" href="#回退到某版本"></a> 回退到某版本</h3><ol><li>使用 <code>git log</code> 命令查看所有的历史版本，获取某个历史版本的 id，假设查到历史版本的 id 是 139dcfaa558e3276b30b6b2e5cbbb9c00bbdca96。</li><li><code>git reset –hard 139dcfaa558e3276b30b6b2e5cbbb9c00bbdca96</code></li><li>把修改（强制）推到远程服务器<code>git push -f origin master</code></li></ol><h3 id="强制-push"><a class="markdownIt-Anchor" href="#强制-push"></a> 强制 push</h3><blockquote><p><code>git push -f origin master</code></p></blockquote><h3 id="设置默认仓库"><a class="markdownIt-Anchor" href="#设置默认仓库"></a> 设置默认仓库</h3><p>以命令 <code>git push -f -u origin master</code> 为例。</p><p>其中 <code>-f</code> 是命令 <code>--force</code> 的缩写，意味着忽略冲突，将本地的内容强制推送，覆盖远程仓库。</p><p><code>-u</code> 的意思是把当前使用的仓库 <code>origin master</code> 设置为默认仓库。</p><p>设为默认仓库后，下次就只需要操作 <code>git push</code> 而无需输入全部命令 <code>git push origin master</code> 达到推送的效果。</p><h3 id="同步云端代码至本地"><a class="markdownIt-Anchor" href="#同步云端代码至本地"></a> 同步云端代码至本地</h3><blockquote><p><code>git pull origin 分支名</code></p></blockquote><h3 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h3><ul><li>删除本地某次 commit(比如最近一次不小心把 密码 add 了)</li><li>删除线上某次 commit</li><li>…</li></ul><h2 id="merge-操作"><a class="markdownIt-Anchor" href="#merge-操作"></a> Merge 操作</h2><h3 id="场景"><a class="markdownIt-Anchor" href="#场景"></a> 场景</h3><p>假如本地仓库有一个分支 master 对应远程仓库的一个分支 master。</p><p>现在需要将远程仓库的另一个名为 master-new 的分支 merge 到本地分支 master。</p><h3 id="操作"><a class="markdownIt-Anchor" href="#操作"></a> 操作</h3><p>// 新建分支</p><p><code>git branch add master-new</code></p><p>// 切换到该分支</p><p><code>git checkout master-new</code></p><p>// 此时新建的分支还未与远程分支关联</p><p>// 把远程分支 pull 回来 默认就关联了</p><p><code>git pull origin&lt;remote&gt; master-new&lt;远程仓库名&gt;</code></p><p>// 切回原分支</p><p><code>git checkout master</code></p><p>// 把新分支的内容 merge 回来</p><p><code>git merge master-new</code></p><p>// 然后按照冲突进行解决即可</p><h3 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意</h3><p>如果要将远程仓库的一个分支 merge 到本地，需要保证远程分支的 commit 是较新的版本。</p><p>新到那种程度？</p><p>新于本地分支和被 merge 的分支的主干分支。</p><h3 id="其他命令"><a class="markdownIt-Anchor" href="#其他命令"></a> 其他命令</h3><p>查看项目的分支们(包括本地和远程)<br><code>命令行 : $ git branch -a</code></p><p>删除本地分支</p><p><code>$ git branch -d &lt;BranchName&gt;</code></p><h2 id="fetch"><a class="markdownIt-Anchor" href="#fetch"></a> fetch</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch origin master:temp</span><br><span class="line">$ git diff temp</span><br><span class="line">$ git merge temp</span><br><span class="line">$ git branch -d temp</span><br><span class="line"></span><br><span class="line">$ git fetch origin master</span><br><span class="line">$ git <span class="built_in">log</span> -p master..origin/master</span><br><span class="line">$ git merge origin/master</span><br></pre></td></tr></table></figure><h2 id="submodule"><a class="markdownIt-Anchor" href="#submodule"></a> submodule</h2><h3 id="添加"><a class="markdownIt-Anchor" href="#添加"></a> 添加</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add &lt;url&gt; &lt;path&gt;</span><br></pre></td></tr></table></figure><h3 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h3><p>克隆父项目后，默认子模块目录下无任何内容。需要在项目根目录执行如下命令完成子模块的下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure><h3 id="更新"><a class="markdownIt-Anchor" href="#更新"></a> 更新</h3><p>进入子模块的目录下 <code>git pull</code>。</p><h3 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h3><p>有时子模块的项目维护地址发生了变化，或者需要替换子模块，就需要删除原有的子模块。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm -rf 子模块目录 <span class="comment"># 删除子模块目录及源码</span></span><br><span class="line">vi .gitmodules <span class="comment"># 删除项目目录下.gitmodules文件中子模块相关条目</span></span><br><span class="line">vi .git/config <span class="comment"># 删除配置项中子模块相关条目</span></span><br><span class="line">rm .git/module/* <span class="comment"># 删除模块下的子模块目录，每个子模块对应一个目录，注意只删除对应的子模块目录即可</span></span><br></pre></td></tr></table></figure><p>执行完成后，再执行添加子模块命令即可，如果仍然报错，执行如下：</p><blockquote><p>操作完在执行 git rm --cached 子模块名称 前，需要先提交一下更新。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached 子模块名称</span><br></pre></td></tr></table></figure><h2 id="使用-github-的网络问题"><a class="markdownIt-Anchor" href="#使用-github-的网络问题"></a> 使用 GIthub 的网络问题</h2><h3 id="科学上网"><a class="markdownIt-Anchor" href="#科学上网"></a> 科学上网</h3><h3 id="使用镜像"><a class="markdownIt-Anchor" href="#使用镜像"></a> 使用镜像</h3><ul><li><p><a href="https://github.com.cnpmjs.org/" target="_blank" rel="noopener">https://github.com.cnpmjs.org/</a></p><p>如命令 <code>git clone https://github.com/hqweay/MarkAll.git</code> 可以用 <code>git clone https://github.com.cnpmjs.org/hqweay/MarkAll.git</code> 代替。</p></li></ul><h3 id="改-dns"><a class="markdownIt-Anchor" href="#改-dns"></a> 改 DNS</h3><h3 id="骚操作"><a class="markdownIt-Anchor" href="#骚操作"></a> 骚操作</h3><p>使用 Gitee 等将 Github 的仓库同步过来，然后通过 Gitee 等提供的链接 clone 仓库。</p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 配置与操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置与操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《来自新世界》</title>
      <link href="/2018/01/17/lai-zi-xin-shi-jie/"/>
      <url>/2018/01/17/lai-zi-xin-shi-jie/</url>
      
        <content type="html"><![CDATA[<p>本来想看动画来着，觉得读原著可能更节约时间，所以找来小说阅读。说起来之前一直以为这是部轻小说 —— 没想到居然是正经的严肃文学（如果可以这么称呼的话）。</p><p>三口气读完，非常畅快，在这里写下自己的一点感想。</p><p>提示：以下可能包含剧透。</p><h2 id="反乌邦托"><a class="markdownIt-Anchor" href="#反乌邦托"></a> 反乌邦托</h2><p>至此时我仍然不能好好地理解「乌邦托」这个词，因为我想像不出这个词描绘的是怎样一个世界，或者说怎样维持这样一个理想世界……就像想像不出宇宙的边界那样……太费脑子了，我就不多说了……</p><p>在我看过的为数不多的科幻作品里有两部通过设定「生物之间的相互信任」来搭建故事。比如《三体》中三体人通过特殊方式交流，思想对同类是透明。而《来自新世界》设定了「愧死机制」和「攻击抑制」避免同类间相互伤害。所以三体人表示「不能理解」什么是「欺骗」。这部书的主角在听说古人类（相对于他们来说）会说谎时惊叹「不可能！」。</p><p>几千年后的新人类拥有着超能力（念力），但是却发展出了一个限制使用念力的社会。这点非常有趣，第一，如今的人类都拥有念力，是因为淘汰了那些没有念力的人，而淘汰的方式 —— 异常血腥。第二，反过来又要限制念力（对同类的使用）。</p><p>发展到现在这个社会是很不容易的，管理层想要维持，而主角一行人受好奇心的驱使，不断探索，便展开了这个世界的原貌。</p><p>原貌自然是黑到发紫。</p><p>我觉得这里出现了一个问题，这群新人类这样表示：你知道真相了吧，真相就是这么黑暗。我们好不容易才发展出了现在的社会体系……所以我们一起维持现状吧！</p><p>可是……地球终究有一天是会毁灭的……你们应该考虑地球外面的星辰大海啊！</p><blockquote><p>超能力漫画作品《我的英雄学院》也有类似的观点，大意是：「如果没有超能力，我们现在应该已经住在太空了吧。」</p></blockquote><h2 id="主角"><a class="markdownIt-Anchor" href="#主角"></a> 主角</h2><p>在我看来，主角并不是很讨喜。</p><p>在结局打 Boss 时，主角团的觉准备与 Boss 同归于尽拯救世界，但是女主同情心爆发阻止了觉，于是最好的机会浪费了……然后女主「想出了一个办法」，让旁边的化鼠奇郎丸去送死激发 Boss 的愧死机制……</p><p>很干脆地说，我对女主的反感大部分都来源于这家伙让奇郎丸送死……</p><p>我还以为会有什么不会牺牲的完美解决方案……没想到还是会有牺牲啊……虽然是牺牲化鼠……</p><p>在这部小说的世界观里，化鼠类似于现实里的蚂蚁……可是即便是蚂蚁，你们好歹是同行战斗过的伙伴（日漫之类的不是最讲究伙伴什么的吗）啊！女主至始至终都觉得「化鼠嘛，死了就死了。」。虽然在小说的描写屠杀化鼠的文字里也产生过同情心，但是还是认为「化鼠嘛，死了就死了……」。</p><p>我对女主另外的反感就来源于此——因为这种行为像极了我自己，或者说人类自己也不为过。即便我们接受的教育是爱护动物之类的，偶尔会产生怜悯，但是在面对蚂蚁死了，猪被杀了这类事时还是会觉得「死了就死了」。</p><p>小说的高潮在化鼠的真实身份揭露时产生了一个高潮。其实化鼠是之前没有超能力的人被超能力拥有者转化的……</p><p>女主在了解到这一点后杀掉了化鼠斯奎拉（应该说给他一个解脱） —— 之前 Boss 小真里亚的死已经证明愧死机制的发动是针对执行者所认同的同类来讲，而女主却没事，这说明即便女主知道了化鼠其实就是人类，但是已经并不认为他们是人类了。</p><p>毕竟从很久以前开始就只有能使用念力的人才算是人类。</p><h2 id="化鼠"><a class="markdownIt-Anchor" href="#化鼠"></a> 化鼠</h2><p>即便化鼠不是人类，这场战争在化鼠的立场也没什么错，为了自由而战嘛。化鼠想要存活必得看人类心情，这多糟糕。新人类的立场认为，我们拥有秒秒钟毁灭你们的能力，但是我们没有，我们只杀了你们当中那些不听话的化鼠，这真是太善良了！但是在化鼠看来：「……」</p><p>斯奎齐很厉害。</p><p>奇郎丸只是忠于女王罢了。</p><p>想想，几位主角，村子的管理层，大家在各自的立场都挺「正义」的。</p><h2 id="其它"><a class="markdownIt-Anchor" href="#其它"></a> 其它</h2><p>一部小说要吸引人，重要的是让读者对角色产生同情，之前读者随着几位主角探索，描绘的世界缓缓展开。知道了真相后可能会对化鼠产生同情，觉得化鼠失败了很可惜。可是之前超能力者刚被发现的时候，超能力者也属于弱势群体，被研究啊什么的都会有，而且有的人类认为超能力会影响社会稳定甚至准备了各种武器想要消灭掉所有的超能力者。（想起了《亚人》的故事情节，拥有不死能力的亚人作为弱势群体……本作大概就相当于亚人故事里反抗派最后统治了世界并且把普通人类灭绝了……）</p><p>所以成王败寇啊成王败寇……只不过超能力者在当初那场战争中赢了而已……</p><p>不过超能力会影响社会稳定这点在本作中确实没错，在这个故事中超能力者掌管世界后经历了好几个时代（黑的不行），最后才发展出故事发生的这个社会（通过限制使用超能力，进行愚民教育等维持稳定）。</p><p>我对化鼠的同情来源于想到自己如果在这种社会下一定是化鼠阶级……要是我能在这样的世界里当一个普通人，那还不错。不过村子会对念力掌控不合格的小孩进行排除……想要安稳成年当个普通人也不容易啊。</p><h2 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h2><p>想起之前读的一个短篇，一个人发现自己生活的地方有点不对劲，然后尝试逃离这里……说到这里就能想到很多的类似作品了，楚门的世界，黑客帝国，异次元骇客……这个小说让我记忆深刻之处在于主人公从这个不太对劲的世界逃离出去后，发现自己其实在末世，靠营养液和休眠过活——也就是靠着技术手段做白日梦。真实的世界并不是那么有趣，主角反到希望自己能够再次进入休眠状态。可是这时如果清除主角记忆让他再次进入催眠状态，太危险了……谁知道主角会不会又对这个世界产生怀疑，然后为了逃离这个虚拟世界大肆破坏一番……但是让他不清除记忆再次休眠……已经知道了真相，还能沉浸于虚拟的世界吗？</p><blockquote><p>2019-09-28</p><p>剧透，剧透注意！！今年的动画《爱，死亡和机器人 第一季 Love, Death &amp; Robots Season 1》里就有一个这种结构的故事。</p><p>PS：虽然这种故事结构的内核并不新鲜，主角探索真相，真相揭露后觉得还不如不知道……</p></blockquote><p>即便如此我还是觉得人应该追求真相……这样的世界下面，死亡就其实也不过如此了，或者说正是因为死亡也不过如此，追求真相更显得可贵，并且……有意思些。</p><p>以上，至于对现实的警示什么的就不多提了。</p><p>PS：有个脑洞……未来的世界人类已经进化成可以随时更换身体活下去了，对于他们来说，换身体就像和现在换衣服一样方便……其实未来世界已经被机器人统治了，不过普通的机器人都认为自己是人类。所谓的换身体不过是给储存器换一个机器身体而已……</p><p>友人觉得可以这样：未来的人类已经能与机器结合了……</p><p>但是我觉得机器人统治世界，真正意义上的人类已经灭绝了这种设定更能让人绝望……</p><p>不过仅限于故事啊，我还是希望生活中能多点充满希望的事……</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 观与感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读所思 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>波波老师</title>
      <link href="/2017/12/30/xiao-bo/"/>
      <url>/2017/12/30/xiao-bo/</url>
      
        <content type="html"><![CDATA[<p>「我现在软件写得出神入化，大概 8088 上能做到的一切，我都做到了。自己觉得该告一段落，去写小说了。」</p><p>你说，世上怎么有这么可爱的人？</p><p>这阵子沉迷于王小波无法自拔，读杂文时了解到他为了写小说，自己编了一个码字软件。这让我在满篇的共鸣中又对他添加了一心脏的好感。「今天要是不把那段 C++ 程序调通，老子就不睡了……」类似的句子总让我脑补出他坐在一台老式 PC 前抓耳挠腮的画面，似乎下一步就要开始挠挠脚趾头。</p><p>这家伙对电影极其热爱，观影量 1000+，而且大部分都是留学时看的原声。有篇杂文他提到了 3D 动画电影，大概内容说可惜现在做一部 3d 动画需要很多人，以及很高性能的电脑，他是一个喜欢编故事的人，要是以后技术更好了就可以考虑自己做部出来。当时读到这有点难过，想到他如果还在的话，现在说不定会就有个互联网大佬王小波，或者搞独立动画的王小波之类的。</p><p>王小波的文章里多次提到伍迪艾伦，我觉得他要是拍电影一定也会和后者的片子一样有趣。他经常借伍迪艾伦来批评美国的商业片——读到这些，我感叹，「好莱坞的套路这么多年都没变过嘛。」</p><p>他写过不少关于影视的文章，其中像是「电视上全是『太君好』……」这类的又让人忍俊不禁起来。真想告诉他，二十多年来，这种情况都没啥改变。</p><p>很喜欢他的杂文。读起来有一种「卧槽这个念头以前也有人想过」的感觉，要是共鸣就意味着高潮，那我简直是在他的文字里高潮不断。</p><p>不过他自己也提到，比起杂文，更喜欢编故事。</p><p>「我觉得自己是个忠厚的人，但是不知道为什么，满脑子都是尖酸刻薄的想法。」我想这就是他幽默的笔触下的故事却几乎都是悲剧的原因吧。</p><p>王小波的人生信条是追求有趣，「有趣」这个词倒是经常在日剧里看到。日剧有很多片子都是讲成年人的婚姻，据说这是因为日本社会结婚率越来越低，所以放些电视剧试图潜移默化来鼓励大家结婚。经常看到这样的台词，找对象的条件，温柔就好，有趣就好。要是像是王小波这种有趣，确实很好。</p><p>据说——唉，又是据说，我写文章真是没有一点考据求实的精神。据说「咪蒙」在写毒鸡汤之前也是个以「有趣」为人生信条的青年，在韩寒那部只发了一期的《独唱团》等刊物写过确实有趣的文章，据说——又是据说，据说那篇文章和现在的风格迥乎不同。</p><p>我想说「有趣又不能当饭吃」这种话来着，可是转念一想还真有不少人拿有趣来赚钱。果然这些话还是自己偷偷想想就好了，别说出来，免得挨打。</p><p>我恰好是个无趣至极的人，倒也正好，可以追求有趣嘛。</p><p>不过要是成天把「有趣」这个词放在嘴里的话，不仅对我起不到半点好处，反而与我另一人生信条相违背了。我还是做一个无趣的人好了，这样，我就是一直在追求有趣的路上。</p><p>2017-12-30-0:50</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 观与感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读所思 </tag>
            
            <tag> 人物 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>别讨论</title>
      <link href="/2017/11/27/do-not/"/>
      <url>/2017/11/27/do-not/</url>
      
        <content type="html"><![CDATA[<p>不知从何时开始，经常看到这样的言论「别讨论（）」。言者或正经或只是玩梗。要是严肃的这样认为，我觉得倒还好。倒是更多的人把这当成一个梗，实在让人哑然。</p><p>最近又发生了关于三种颜色的事件——每隔一阵子就会出现这样的社会事件。我和所有关注着此事件的人一样对此感到痛心。但是正如前面所说「每隔一阵子就会出现这类事情」，我就看着很多人一次次地重复之前做过的事情，最后都不了了之。后来我把几乎所有能带给我社会新闻的咨询通道给屏蔽了，以期望能够获得些许内心的平和。先不说这种屏蔽行为是否确实有效，往往自己在眼神逃避相关字眼时就感到心虚，非常不平和。</p><p>我讨厌一个人不加思考地盲从，成为情绪浪潮里的一朵浪花。当然，我也没自以为是到觉得自己真的异常牛逼，是看透一切，独立思考的成熟青年。我只是感到困惑，对此，我能做什么？有些人回答说做好自己。这种答案说不上错，但总觉得有点没意思。</p><p>从实用主义来说，考虑这些东西对我毫无用处。自然有比我优秀、更加专业的人去思考、研究、解决。要说的话，但行好事，搞好学习才是现阶段最应该考虑的事情。</p><p>至于学习——我之前吐槽说，如今的大学老师嘴上说现在不一样了，你们不能要求老师再来教你们什么，要靠自学。实际上是以此掩饰自己完全教不了什么东西的事实。我希望有人能读懂这里面的夸张，不要误解我是个不学无术只知道埋怨的混蛋（虽然从某种意义上来讲我的确如此😅）。</p><p>人不是单线程生物啊，胡思乱想也有何不可。只是有些困惑不吐不快，见笑了。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>只是为了生存 —— 《荒野间谍》</title>
      <link href="/2017/10/28/just-for-survival/"/>
      <url>/2017/10/28/just-for-survival/</url>
      
        <content type="html"><![CDATA[<p>前阵子在某公众号遇到的推荐，在截图里看着里面动物挺萌的，就起了看一眼的念头。值得一提的是当时已经是半夜，我开着流量打开一集，结果欲罢不能，看完第一集后强制压抑住自己打开第二集的冲动。然而第二天早上还是……囧</p><p>这部纪录片的精彩之处在于主创团队使用了很多个逼真的动物机器人来接近动物们，以此拍下他们在毫无防备的时候的普通生活。</p><p>我的第一感觉首先是有趣。因为这种独特的拍摄手法，片子里面有许许多多有趣的镜头，展现了许多我以前未曾想象过的动物们的行为。这种有趣也来自于动物和人的对比。我惊讶地发现，爱，同情，怜悯，伤心，甚至是自私，嫉妒，这些情绪动物们都有！</p><p>第一集里有一个猩猩和一只年幼的小奶猫一起玩耍的镜头，当另外的猩猩粗暴地对待这只小奶猫时，这只猩猩甚至会去阻止，并且带小奶猫去更安全的地方。</p><p><img data-src="http://wx3.sinaimg.cn/mw690/a9a29bb9gy1fkyaiw7ex2j21hc0u0npd.jpg" alt="猩猩"></p><p>我最有感触的是一只雄性企鹅。雄性企鹅们上岸后会在岸边争夺占领干燥的的土地，并捡石子来筑巢，以等待雌性企鹅前来进行交配繁衍。有一只雄性企鹅因为来晚了，已经没有一块干燥的地方可以筑巢了，只好找了一块潮湿的地方 —— 潮湿的甚至可以说是个小水池。但是无妨，只要能捡到足够多的石子，也能把这里做成一个好巢。于是这只企鹅就去捡石子。可是周围的石子已经被捡完了，企鹅只好到很远的地方捡。在这只企鹅走远后，发生了震惊的一幕！一只小偷企鹅在这只企鹅走远后，偷偷地把他之前捡的石子偷走了！！这让我感到好震惊！好气愤！</p><p>过了一阵子，雌性企鹅们来了，有一只雌企鹅在这只老实企鹅那打量了好一阵子。可她怎么可能会选择他呢？他的巢甚至还没做好。更尴尬地是，这只雌企鹅选择了之前的小偷企鹅，因为小偷企鹅偷了很多石子的关系，巢又大又温暖。旁白说，也许小偷企鹅没有羞耻心，但他有豪宅啊。</p><p>老实企鹅决定与小偷企鹅打一架，为了尊严，也为了最后挽回一下雌企鹅。然而最后的结果是老实企鹅在一旁看着这两只企鹅交配。</p><p><img data-src="http://wx3.sinaimg.cn/mw690/a9a29bb9gy1fkyaiq7n9bj21hc0u0hdt.jpg" alt="企鹅"></p><p>这是老实企鹅站在一旁的镜头，心都碎了！！！</p><p>但是即便如此，这只老实企鹅并没有放弃，他选择继续去捡石子，把自己的巢搭建好。</p><p>也是从这一个片段开始，我重新审视这部片子。很多镜头确实有趣，可是有趣之下呢，动物们只不过是在生存而已。</p><p>看这类纪录片如果带入个人情感，就会变得很奇怪。这一刻，豹捕食野狗，我们替野狗感到担心，为野狗的友情，亲情感叹。下一刻，我们又伤心于没有食物的豹子。但当看到豹子攻击人类等镜头时，又会抱怨这些动物的残忍。</p><p>眼见为实，人类总是基于自己看见的东西做判断。</p><p>这部纪录片拍了猩猩照顾小奶猫这样的镜头，也拍下了猩猩生食狒狒这样的镜头。要是简简单单地评价，这样做好坏呀，这个谁好可怜啊，也太偏见了。</p><p>动物有着与人类类似的情绪，猴子会以为机器人猴子死了而像对待真猴子死了那样对待他（而此时机器人猴子对他们来说只是个陌生人）。动物也有极高的智力，猩猩能使用人类的锯子，有种鸟能自己制造钓虫子的工具……</p><p>在《人类简史》中写到人类与动物的一个巨大不同点在于动物可能很聪明，甚至会生活在一起，有非常严格的等级制度，但他们不能聚集成一个巨大的组织（人类社会这种成亿成员计算）。</p><p>人类不断进化，在社会下的各种规则中，把生存变成生活。因此和其它动物区别开来。</p><p>主创团队花了很长的时间，极大的精力，甚至冒着生命危险才拍下这部纪录片。第五集是对各种机器动物的揭秘，展示了他们的制作以及主创团队是如何把他们安放到真正的动物旁边的。其中有一幕是两个人在拍一只豹子时，豹子向他们袭击了过来，还好其中一人是拥有丰富经验的动物学家，通过扔帽子吸引豹子的注意力躲过这生死一劫。</p><p>还有团队人员亲自下水到有大量鳄鱼的河流里安放机器动物等行为面临的种种危险。在拍摄过程中的存在的各种困难，特别是各种不可预料的意外 —— 机器动物不可能每个都达到预想的效果，各种安排也不可能一帆风顺……很多决定甚至都只能凭借团队人员的经验甚至是直觉来做……</p><p>啊，感谢这群人带来这么优秀的一部纪录片！</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 观与感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 看片所想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>——从勾搭开始</title>
      <link href="/2017/10/26/cong-gou-da-kai-shi/"/>
      <url>/2017/10/26/cong-gou-da-kai-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是中考后在 QQ 空间写的日志，本来被我清理黑历史的时候打扫掉了，没想到新浪博客上也发过一份——自我意识过剩总让人不好意思，同时热情越来越分散的今天我也几乎不会对一样东西投入到能产生把它在所有社交平台上分享一遍的欲望（Gakki 除外），我将它贴在这，作为某些情绪的存证。</p></blockquote><p>老文是一个很热心的人。我曾经向他请教过关于勾搭的学问，他非常高兴地告诉我了一些诀窍，然后对我说这就是为师的毕生所学，你去练习练习吧。当时我正在异乡的一所高中中考，于是我充分地发扬了少年人的说做就做精神非常高兴地先睡了一觉。</p><p>我所在的考室里坐了近三十位学生，三十位中有差不多十五位来自我校，十五位中有差不多十位来自我班。虽然我的亲友团在人数上十分强大，战斗力也十分顽固，但是很不和谐不团结。后来我对这次失利的行动进行思考总结出了一个道理，那就是这世界上最不靠谱的东西就是人数，因为十个里面至少有六个都是挂机。</p><p>我选取的练习目标是坐在我前面的同学，老文昨天说近水楼台才能先得月。我看了看附近的形式，然后掏出为数学而准备的三角尺，量了一量心道没错了，是他是他就是他，我们的朋友娃哈哈。</p><p>我严格按照老文的指示，拍了一下前面同学的背，说，朋友你座位号多少啊。</p><p>他看了看说，16。我说我是 17 诶，我们好有缘啊！</p><p>老文昨天给我讲解到这的时候说明了两种情况，一种是对方是傻逼，那么他会回答我说有缘有缘；一种是对方是有缘有缘，那么他会回答我说你个傻逼。</p><p>事实表明他属于后者 。所以当天考完所有科目回家的时候我仅仅回头看了一眼这个和我擦肩而过的高中。这一眼是为一位好心的学长瞟的，他在我睡的那张床上的被子里贴心地放了三张一块钱的毛爷爷，当时我激动地告诉了室友们这个消息，他们比我还要激动几分，于是我们立马展开了深刻的讨论。在各种推断都被推翻后，他们终于达成了共识。</p><p>“你捡钱也不容易，就请大家吃顿火锅吧。”</p><p>当时他们是这么说的。我拿着三块钱看着他们五人流下了感动的泪水。</p><p>不过我也不是一个容易被金钱所诱惑的小人，为了展现我的优秀道德品质，我把钱整齐地放了回去。我是一个很有好奇心的小人。所以我偶尔也会很小人地猜测，会不会是班主任告诉他们这间寝室要住的是某某校的学妹，所以这里才会如此整洁呢？</p><p>有时间我也会突然伤感起来，这种感觉是我的同桌在我浑浑噩噩时带给我的。有一天他对他前面有事没事喜欢找事的两位女生说，你们尽管来打我吧，不然以后想打都打不成了。说这句话时我仿佛看见他浑身散发着光芒，好大义凌然的样子。不过这种样子没持续几秒就被断断续续的惨叫声破坏了。</p><p>说到这里就不得不谈谈我的同桌了，他是个非常卑鄙的人，这点从他主动被女生打而从不主动求男生收拾就可以看的出来。</p><p>有一次我和他大战前排两位女生，他一个打两个，我一个打半个，最后我们以半个的优势赢得了战斗。我觉得在这场战斗中我发挥了至关重要的半票，他却总是不承认。</p><p>言归正传，其实在回家的路上我也是很伤感的，毕竟这就毕业了呀。不过他们脸上发表的帖子太多了，我也不怎么好找切入点下手。</p><p>有人发帖，你看那些傻娃还在念书呐，我们毕业了毕业了，哈哈哈哈。 一般这种帖子先是会有腹黑男跟帖，你等着，我会让你在高中付出代价。 然后会有矫情女跟帖，孩子，你现在扔掉的，是我们无比怀念的曾经。</p><p>也有人发帖，再见了我的青春。 这种帖子一般都只能吸引到文艺青年，都是跟帖几句酸不溜揪的诗啊句子啊什么的。</p><p>我也写了几句酸不溜揪的诗，写诗不是老文教我的，这玩意是百度教我的。本来我百度的是怎么把情书写好，不过我转了几个网页就翻到了怎么写好情诗。</p><p>有位网友回答的十分精炼且完整，看了我豁然开朗，从此我把这句话封为座右铭。我把这句话分享给大家。</p><p>所谓写诗啊不过就是把几个没关系的词语加点形容词联系到一堆扯出点关系。</p><p>我试了下感觉不错，挺有打油诗的意思。</p><p>我对你/爱意的小舟/游不尽/你对我/悲伤的河流</p><p>我坐在车上当机立断，用这种方法写下了我对这次经历的感悟。</p><p>上满发条的车轮/停下来了/我的青春却/还在奔跑</p><p>想出这么个句子后，我心满意足地望向了窗外。不管是坐地铁坐公交还是坐大巴坐三轮，车窗外总是少不了风景，每每会给人一种外面有另一个世界的感觉。浓郁的麦田森林，安静舒适的湖泊，依然温暖的阳光，淡蓝温柔的天空，看不着影子的人潮，幸运的月亮，星辰，弥漫着花香的空气。</p><p>它让我觉得即使一分钟就能到达的小路也是一场旅行。</p><p>也许这本来就是一种旅行。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 故事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《流星 蝴蝶 剑》简记</title>
      <link href="/2017/09/29/wuxia/"/>
      <url>/2017/09/29/wuxia/</url>
      
        <content type="html"><![CDATA[<p>上午去图书馆找 TP- 类书籍，顺便在小说区逛了好一阵子，最后借了本古龙的《流星 蝴蝶 剑》。午睡完开始偷闲阅读，一下子就沉迷其中，掩卷时天已漆黑，时针指向 8 点。</p><p>看完这本，突然觉得武侠不是种分类，而是一种载体。作者通过武侠这个载体可以表达的东西有很多很多。本来看过的武侠小说就不多，再加上看过的武侠电视剧，电影也有限，所以之前就狭义地认为武侠只是打打杀杀快意恩仇。这本书则打破了我这种被禁锢的思维，让我感到新奇。</p><p>一，故事充满反转，情节紧张，让我有种在读悬疑小说的错觉，十分刺激。</p><p>二，反转总是伴随着背叛，这让人防不胜防。不断的背叛，让人感到非常致郁。</p><p>三，写故事，也写情绪。说起来，小说从头到尾都带着一股悲伤。看这部小说，我觉得似乎在看王家卫的片子，脑补时总不禁想给孟星魂加上墨镜王那独特的镜头。虽然这样想，但哪有时间。阅读时沉浸其中，总感觉压抑的很，难受的很，而故事又发展的那么紧凑，催着人不停翻页。</p><p>故事结束了，读者却还没走出那个江湖。仿佛自己就是那男主角，忧伤又寂寞。</p><p>唉，想什么呢。现实也不比书中好过多少，还是要继续学习呀。</p><blockquote><p>「很静，静得几乎听得见花瓣开放的声音。」</p><p>「蝴蝶永远只活在春天里。」</p><p>「她是宁可忍受寂寞？还是来独自享受寂寞？」</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 观与感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读所思 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>与格式化相关</title>
      <link href="/2017/09/16/about-format/"/>
      <url>/2017/09/16/about-format/</url>
      
        <content type="html"><![CDATA[<p>今天看的 CS50 课程里简要说明了硬盘的运作，并且讲到了硬盘的格式化。有同学提到一个问题，当我点击格式化的时候，发生了什么？</p><p>略去电流传输，把信号送达到硬盘等流程，我们仅仅关注硬盘是怎么进行格式化的。当硬盘进行格式化操作的时候，它实际上只是修改了开头的分区表上的几千个字节的信息。这些信息起着一个目录的作用，让你的电脑知道文件和文件夹被储存在哪里。所以当你格式化你的硬盘，所做的只是在为新数据的储存做准备。这种格式化可能并没有除去你的旧数据。</p><p>既然说的是可能，那自然有会除去你的数据的情况。</p><p>其实这里提到的格式化只是比较常见的一种，也是普通用户会用到的一种。硬盘的格式化分为高级格式化和低级格式化。每块硬盘在出厂时，已由硬盘生产商进行低级格式化，因此通常使用者无需再进行低级格式化操作。（你当然可以自己进行低级格式化操作，但这种操作并不被建议——即便现在硬件的发展程度已经足够高了，但过多地进行低级格式化操作仍然会损害你的硬盘。）</p><p>而高级格式化则可以分为快速格式化和普通格式化，前文中所提到就是快速格式化。</p><p>快速格式化并没有完全清除你的旧数据。同时，如果知道了硬盘中0和1的排列规则，你甚至能恢复大量的数据。（前提是你还没有写入的数据覆盖掉它们所储存的区域）这也是所有的数据恢复软件的工作原理。</p><p>值得一提的是，快速格式化虽然带来了巨大方便，特别是对那些误删文件的人群来说。但同时也会有隐私安全的问题。你删除了某些私密文件，别人又给你恢复了，那多可怕呀。好在对于这种情形，我们还有普通格式化。</p><p>普通格式化会将硬盘上的所有磁道扫描一遍，清除掉硬盘上的所有内容。这种操作下的数据会完全删除，不可恢复。当然，因为要从头到尾扫描硬盘，所以时间花费会长一点。但是更长的时间消耗带来的不仅是完全删除数据，还可以检测出硬盘上的坏道。所以如果你怀疑自己的硬盘有坏道，那么也可以尝试普通格式化。</p><h4 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h4><ul><li>快速格式化，可恢复文件。只是删除了硬盘上的分配表文件，耗时短，一般建议使用该操作。</li><li>普通格式化，不可恢复文件。如果你需要完全删除硬盘上的文件或者怀疑硬盘有坏道，可以进行该操作。</li><li>低级格式化，不建议使用。</li></ul><h4 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h4><p><a href="http://blog.sina.com.cn/s/blog_59a245dc0100idh7.html" target="_blank" rel="noopener">快速格式化与普通格式化与低级格式化，及恢复</a></p><p><a href="https://www.zhihu.com/question/38408332" target="_blank" rel="noopener">电脑硬盘格式化数据能恢复吗？</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 简单总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《卡罗尔》——像是夏天碰撞的手肘</title>
      <link href="/2017/08/22/Carol-like-the-beer-in-spring/"/>
      <url>/2017/08/22/Carol-like-the-beer-in-spring/</url>
      
        <content type="html"><![CDATA[<p>2017-08-22-22:55</p><p>村上春树用过一个比喻，春天里的熊。抛开我糟糕的文笔，来形容一下观看这部片子的感觉，也许可以用「夏天碰撞的手肘」来描述。这个句子缘起室长的一次经历。在回家的客车上，他和一位女孩坐在一起，一路上，两人的手肘隐约挨着，若即若离。而当时尚值酷暑，于是短袖触碰薄纱。也许都没有在意，也许谁都心知肚明。总之谁都没有主动撤开。室长回到家后和我们谈起这件事，玩笑又带着当时怂的惋惜。</p><p>我第一次见人把咸猪手解释的如此清新脱俗，但同时突然想起某个年级的夏天，也曾和同桌手肘相靠，电风扇哗哗地吹，声音特别大，甚至盖过了老师讲课的声音。我心猿意马，心里起了无数个念头，当想到最后一个时，老脸一红，悄悄撤开。虽然现在想来，似乎当年的每位同桌都是男生。唉，没想到夏季才最容易陷入春梦。</p><p>《卡罗尔》，近两个小时的故事，婉婉叙来，节奏缓却畅快。看这部片子的时候，感觉非常舒适，像有一只猫住进了心脏。电影有哀，有温暖。心情也随着起伏。</p><p>我个人非常非常喜欢特瑞斯这个人物。也许是演员太有魅力了，总感觉她的每个眼神里都蕴含着无数的言语。</p><p>片子表达情绪十分克制，我对这几个镜头印象还挺深的，特瑞斯从克罗尔家回去时坐在火车上哭泣，接电话时的小心翼翼，偷拍卡罗尔时的小表情……总让人感到心疼，又在心里默默为她加油打气。</p><p>特瑞斯在片子中说「<strong>我从来不会拒绝。我什么都可以接受，又怎么知道自己想要什么呢。</strong>」。但我并不觉得特瑞斯是个没有主见的人。老实说，在片中似乎一直是卡罗尔在两人的关系中占主导地位，但是踏出的每一步特瑞斯都没有犹豫过，也从未对做过的任何事感到后悔。她在感情里表现得勇敢又坚定。</p><p>也许这就是特瑞斯吸引人的地方，脆弱与勇敢并存。</p><p>配乐也特别到位，随着情绪起伏。配乐和电影大概也是互相成全。有些电影配乐虽然本身素质就很好，但是经历过电影的这一层解读，观众在电影之外再次听到后，就会有更强烈的感受。</p><p>我把这段感受用在了《影视音乐鉴赏》课的作业，说大概这就是时至今日，有那么多的几分钟帮你看完一部电影的节目，而我们仍愿意花几个小时在屏幕前的原因——我们可以几分钟就了解一部电影的剧情，却难以在听到一段熟悉的配乐时产生惊人的共鸣。</p><p>值得回味好一阵子了。</p><p>00:50</p><p>// ps：感觉鲁妮玛拉的眼睛会说话，真厉害。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 观与感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 看片所想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈到过往</title>
      <link href="/2017/08/19/past-time/"/>
      <url>/2017/08/19/past-time/</url>
      
        <content type="html"><![CDATA[<p>2017-08-19-22:00</p><p>逛到新浪博客，兴起，寻来许嵩十年前的文字开始阅读。页卷不停，时间跑了起来，思绪也回到从前。年幼的时候总是满怀憧憬，却又觉得日子还长，不肯把心思放在未来。如今又总是念旧，念在旧时有梦。虽然现在看来都是遗憾。</p><p>回忆是作家的灵感库。每个人都有独特的经历，收获的感悟也不尽相同，写出来更是花样百出。曾经的日子不总是美好的，但我偏向于认为它更好。时常节约一段安静的时光出来细数从前，用无数个表示假定的词汇畅想自己本该拥有的无数个未来。直到有一天，我突然对这种强加的美好感到厌倦。我知道自己并不是个想象力丰富的人，这样做，只不过是借此宣泄对现状的不满。</p><p>我没能活成自己曾期望的样子，这个念头让我感到无奈又悲伤。</p><p>日剧《求婚大作战》讲述了一个男人不停穿越，尝试挽回年少时的遗憾的故事。我作为一个旁观者，无力看着已经成人的主角一次次地穿越，又一次次地犯着和以前一样的的错误。主角改变不了自己。「<strong>自己的心意，考虑问题的方式等，在短时间内是不会改变的。</strong>」</p><p>即便再来一次，也还是会做出一样的决定。</p><p>那些选择，都是我当时认为的最优解啊。</p><p>「做决定前，想想自己以后会不会后悔。」这句话像是一句鸡汤似的废话，毕竟对部分人来说，不管做了什么决定，只要不顺利，都会后悔。但是有些后悔我们是能提前预知的，不是吗？常有人开玩笑说自己现在流的泪，都是当初做决定时脑子里进的水。也偶有人像我一般把希望寄托于自己别的可能性这种虚无缥缈的东西之上。也许不管我们做了什么决定，都会变成现在这种样子呢？唉，这种事情也无人可知。</p><p>北岛说，<strong>那时我们有梦，关于文学，关于爱情，关于穿越世界的旅行</strong>。我尝试回忆自己的「那时」，「那时」的我是怎样的样子呢？我能记起一堆做过的事，像是夜里窝在被子下打开手电筒看小说，像是放学后总要在路上玩一阵子才回家，但我却只能以第三人称的视角观望，难以回忆起当时的心情。遗忘是怎样一回事呢？大概像是我在路上留下的脚印，后来那条路被填上沙浆和水泥，铺上了柏油。我找不到自己的脚印，甚至难以想象曾在那里走过。</p><p>不过敢肯定的是，我在以前绝对没有思考过以后会怎么看待那时候的自己。仔细回想，身边确实不断地有人提醒我，你应该如何如何做，这样做对你的未来没有好处。但当时的我乐在其中，着实难以听进别人的意见。充满向往的少年，一心只想往未来跑。而大家都知道，奔跑是一件特别费时费力的事，我正全力以赴呢，哪还能挤出时间和精力用来思考？</p><p>00:35</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的好友说他要卸载QQ</title>
      <link href="/2017/08/14/Inner-activity/"/>
      <url>/2017/08/14/Inner-activity/</url>
      
        <content type="html"><![CDATA[<p>2017-08-14-22:55</p><p>打开一个网站，在访问某些内容的时候被告知：您必须注册账号。于是我不得不开始进行繁杂的操作——填写一大堆资料，最后再做一个验证确保自己不是机器人。做完上述步骤后，点击确定，又被告知：抱歉，您的邮箱已被注册。我恍然大悟，返回尝试登录，却发现自己常用的密码根本登录不上。我紧张地点向旁边的「忘记密码」，还好，可以修改。输入了两遍我的新密码，点下最后一个确认键。正准备要松一口气，却再次被警告：修改的密码不能和以前一样。</p><p>什么鬼！</p><p>这是刚刚我在访问一个网站时面临的糟糕情形。</p><p>密码越来越多，秘密却越来越少。这总让我回想起以前网络还没普及到如此完善的日子。那阵子总希望自己能在网上拥有一席之地。感谢祖国的飞速发展，如今的我拥有了一堆账号密码，甚至不得不准备好几种密码来应对不同的保密机制。</p><p>一次又一次的注册，在网络的世界里便有了一个又一个不同的身份。「密码越来越多，秘密却越来越少」——我在一些社交平台上的好友要是听到这句歌词，一定会有所触动。</p><p>前些天，QQ 上的一个好友在空间说到：我要卸载 QQ 了，有事电话联系。</p><p>我从内心欣赏那些真的能从网络社交中脱身而出的人，他们一定有着常人不能及的毅力。我以前也做过这样的事。但是在我卸载后，事情却有点不一样。我发现一个问题——并没有人会电话联系我。所以我又决定清理一次手机上的联系人。之后没过多久我就把 QQ 又安装上了。很奇怪，明明在 QQ 上几个月也不会和谁联系一句，但当我卸载了它，心中还是空落落的。内心隐隐期待，患得患失。</p><p>装上 QQ 后，迫不及待地发表说说：自从卸载了 QQ，才发现手机原来还有打电话的功能。</p><p>我试图用这种暧昧的言语假装自己已经卸载了一段时间。然后等着别人来点赞，获得极大满足。</p><p>唉，有些事情明明大家都心知肚明，但就是心照不宣。</p><p>00:15</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观关动物</title>
      <link href="/2017/08/13/watch-animals/"/>
      <url>/2017/08/13/watch-animals/</url>
      
        <content type="html"><![CDATA[<p>2017-08-13-22:30</p><p>前些天和班上的小伙伴被院里安排去参加一个「增加团队凝聚力」的活动，地点位于一个很洋气的基地。</p><p>午饭后，负责人告诉我们，还有两个小时才开始下午的活动，大家自由活动一下吧。然后用手指向门外说，顺着这条路往上走能看到不少动物，有孔雀哦。我和几个小伙伴顺着他的手指向外望去，只见密集的竹子夹着一条小路延向远处。大家没有犹豫，怀着期待开始行动。</p><p>顺着小道走了半天也没有发现任何孔雀的踪迹。我是最容易半途而废的那个人，呼吁着大家别找孔雀了，去找个有空调的地方坐一下吧。没空调，找个阴凉的地方一坐，休息休息也好哇。我虽然一路劝慰大家，不知不觉中却也走到了终点。远远地就闻到一股臭味，顺着这略刺鼻的味道来到一个不大的铁笼子。靠近看，里面原来关着两只鸵鸟。那浓厚的味道大概就是这俩家伙的排泄物发出的了。其中一只靠着笼子，似乎想把头伸出来。有人就开始对着鸟头拍照。友人介绍说北京有的人家四合院里就养着鸵鸟。我突然想起一个场景 —— 一只大鸵鸟在马路上狂奔。这是电影《老炮儿》里的场景，地点就在北京。冯小刚把圈养在四合院的鸵鸟放出来，然后喊道「撒丫子跑吧您内！」</p><p>记得鸵鸟害怕的时候，会把头埋在地上的沙子里。这只大鸟面对着我们，昂扬着头，丝毫没有害怕的意思。大概是知道有一个笼子把这群人围着，它安全的很，也自由的很。</p><p>看完大鸵鸟，满足了不少。但有人还想找孔雀，我们便随意走。</p><p>一路上自然又看见一些动物。</p><p>有两条狗也被关在笼子里，笼子只有不到三平方米。笼子外挂着牌子，写着狗的简介。狗狗是外国的品种，它的名字里有它的国籍。看着这个名字我眼前就浮现出了以前看的那些视频里狗狗奔跑的样子。我盯着它看了好一阵子，它没打算理我。只是自顾自地躺在笼子里。天热的紧，我心里也一紧。我想看它接飞盘的样子，可惜在这个圈里打个盹都费劲。</p><p>三只雪狐被锁在一个稍微凉快点的地方。铭牌上同样是简单的介绍，其中一句说雪狐能耐零下几十度的低温。我们一行人里有人便开始笑，我也苦涩地笑。这几只雪狐这辈子怕是没有用武之地了。</p><p>再走了段路，发现一个供人休息的地方，摆着好几把椅子。我找了一把，坐上去就不想再起来。</p><p>「还没看到孔雀呢。」</p><p>可是我一点也不想看到孔雀了。心里甚至还有点期望这里根本没有孔雀。</p><p>23:40</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从写什么开始写起</title>
      <link href="/2017/08/11/start-with-what-i-write/"/>
      <url>/2017/08/11/start-with-what-i-write/</url>
      
        <content type="html"><![CDATA[<p>2017-08-11-22:20</p><h2 id="一"><a class="markdownIt-Anchor" href="#一"></a> 一</h2><p>虽然标题给人一种随性的感觉，但它也不是我拍脑袋想出来的。我打算为自己的学习生涯开个好头，所以前晚设好了闹钟，今天也很到位地早早醒来。躺在床上，费了九牛二虎之力，我终于想到这个超级厉害的标题。但是当我起床并敲下这行字准备作文一番时，我的大脑很没有志气地开始短路了。从这写起 —— 好像也没什么写的嘛。</p><p>看来坚持写博客这件事对我来说，最难的不是「坚持」，而是无话可说。</p><h2 id="二"><a class="markdownIt-Anchor" href="#二"></a> 二</h2><p>刚开始的话，就随性写吧。像我这样的人，保持热枕是最重要的事情。很多像我一样的新手常常询问大神们怎样才能保证每天写一篇博客。大神们表示菜鸟还是慢慢打好基础吧，花一个月写三十篇口水话不如花一星期写一篇有水平的东西。</p><p>大神们的建议自然有其价值。我甚至可以体会大神们的心情。刚开始的时候因为水平不够花费了很多时间，走了很多弯路。后来水平提上去了就会觉得，要是当初把那些走弯路的时间都用在正确的方向就好了。虽然时光无法回头，但是他们可以把这些经验传授给后来人。部分热心的人会有这样的念头，我不会骗你，这条路是错的，我走过，你回去吧。但是对于很多如我愚昧的菜鸟来说，不自己踩一遍坑，而仅仅是听别人的言语，绝对不会信邪。</p><p>另外，我觉得不管在哪方面，学习的初期，保持练习是非常有效的手段。好也罢，坏也罢，至少我写下去了。坚持做这件事，把它做成一种习惯（当然，得排除自我感动，欺骗自己的大脑那种。），慢慢从这段不适应阶段度过去。很多时候，作文并不是一件有趣的事。不过令我高兴的是，我正在尝试把它做的有趣。</p><h2 id="三"><a class="markdownIt-Anchor" href="#三"></a> 三</h2><p>写什么呢？</p><p>内容尽量写一个主题，这一点我一定要坚持。曾翻到过以前写的文章，都是随心写，想到哪写到哪。老实说今天写这篇博客时，几次我都想把话题带歪……在这一点上，宁可少写，也得做到。</p><p>再写点自己的点子吧。</p><ul><li>多学习别人的文章。看书不要再流于故事，多学习写作技巧，多感受别人的作品。</li><li>尝试写书评，影评。写写自己喜欢的人物。</li><li>尝试写编程中的经验，浅薄见解。</li><li>尝试不同的风格。</li><li>偶尔也可以试试随心写作。</li><li>坚持下去。学习是件孤单的事。</li></ul><p>23:17</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客记录 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
