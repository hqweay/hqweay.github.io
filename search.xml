<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>近虑</title>
      <link href="/2021/04/24/recently/"/>
      <url>/2021/04/24/recently/</url>
      
        <content type="html"><![CDATA[<p>一直不肯写点更锋利的东西，因为就自己经历而言，总觉得直言某事如何如何，应当如何如何，这种行为要么太幼稚，要么容易惹人讨厌。而我确实是个糊涂且不愿意被人讨厌的人，非要为了表现得明白而去做一些明白的表达，这种行为本身让我感觉很谄媚。我现在也确实没有必要去做一些迎合世界的事情 —— 这种说法其实有点讨巧，因为我本身也没有迎合世界的能力。我觉得我得多加练习，但懒惰、自身的糊涂等各种外部条件给了我逃避的机会。于是我选择逃避。</p><p>逃避吗？不，「逃避」这个说法本身也是一个暗喻。我不是「我本可以」男孩，我不会拿过去的无数个可能性搪塞现在，我摊牌了，我其实是害怕失败。等等，我害怕失败吗？</p><p>有一丢丢。但更多的其实是害怕竞争。</p><p>在必要的时候，我可以把这个答案交给别人，表现得坦诚且做好了那早已是过去式的准备。可内心那「这些竞争毫无意义」幼苗，仍然在不断生长，挠我的心脏。</p><p>我相信自己并不虚无。我曾对「断舍离」这种行为感到困惑，因为我一直是从无到有，并没有一个机会让我懵懂地拥有很多，然后猛然意识到，啊，我应该抛弃点什么了。我想我也天生是个佛陀的信徒，因为我也一直没有什么欲望。念书的时候，我把自己所有想要完成的事物列了出来，唯一需要的外界帮助是 2 到 3 万块钱。里面实际上没什么非要不可的东西，而且到了现在，里面有些项目我其实也已经没了兴趣。</p><p>我还曾假装成大人，说「现在这个时代，如果你不精致地利己，很难真正地过得快乐。」我在犬儒和实用里汲取到养分，准备大干一场。但我做不到。可以说，我觉得这太麻烦了。也可以说，我并不擅长这回事。对呀，这不就是逃避嘛。这世上有千言万语来批判、来讽刺这种行为，可我居然不觉得这无耻。我究竟是怎么了呢？</p><p>我是假的吗？在大多数愿意注意到我的人眼里，我是假的。也许有那丝毫的可能性 —— 我就是真的呢？但问题在于 —— 我其实不确定自己是不是真的。对于大部分我不理解的事物，我都可以把它当作黑箱。唯独对于我自己，关于那些我不理解的东西，我很难表示认同。</p><p>我有答案，我有很多个答案。其中几个漏洞较少的答案是我最近的依靠。寻找答案也确实是件有趣的事情。今年立了一个想要和别人多交流的 Flag，也是想要以这种途径去得到一些指教。互联网还是一个很好的渠道，但我已经很久没有善加利用了。之前为了追漫画打开了贴吧，回顾并删除了许多以前的帖子。我想，那时我多么年轻啊，却总是说着一些老气横秋的话 —— 直到最近还有人点赞呢。如果不是看到自己的昵称，我搞不好会觉得这肯定是个很了不得的人吧。互联网又是多么虚假啊。我无法回到那种精神状态了，却又在尝试着捡起当初拥有的一些东西。</p><p>私聊别人要游戏的存档、求大佬带、复制粘贴水贴水经验……都是些冒犯别人的事情。但羁绊，可能就是需要从冒犯才能开始建立？我还不大明白，先从包装冒犯开始学习吧。</p><p>遇到了一个困惑。之前遇到了一个看完《缘之空》去了解伦理的家伙，想到自己总是逃避这些问题 —— 意识到了这点，我便试着去面对。我觉得我内心其实是认同「道德相对主义」的，但是我并不会用它武装自己。我觉得它冷漠、无趣，我觉得在谈论道德时就应该谈论「我们应该如何如何」。在一个读者群看到这样的见解，大意是因为法律的有限，所有才有人们对侠义的痴迷。我也见到过相反的说法，说侠，是对法律的漠视。</p><p>「程序正义是对我们无能的安慰」我觉得这是一个非常有鼓动性且很虚无的观点。我们是无能的，接受这一点。保持敬畏地去完善这个流程，让我们接近正义。妄图通过某些手段（比如侠，比如暧昧的条文）去网罗一切，是无知且自大的。</p><p>我对相对主义的不喜欢就在于它对我在乎的许多事物的破坏，但我现在的水平并不能说出太多所以然。正义是没意义的吗？科学是没意义的吗？它产生了好多不可证伪的东西，好虚无，我不喜欢。</p><p>我也接触了许多批评相对主义的内容，大多读不懂，我只能停留在这一步 —— 我不喜欢这样的世界。</p><p>但是，当谈到「美」时，我又觉得「美」是主观的。好多人都持以这样的观点，美是主观的。特别是看到批评《进击的巨人》的内容，我就安慰自己，美是主观的。嗐。这是怎么回事呢？是因为我没达到某种审美的门槛吗？是我只感受到生理上的愉悦吗？</p><p>稍微展开谈谈的话，一，我不觉得《进击的巨人》结尾烂到不可接受（它当然是让人失望的）；二，我中二的时候，它表现出王道热血的样子，我对作品的内涵有所追求时，它也开始讨论一些深刻的主题。这是一部跟随读者成长的作品，能遇到并陪伴这样一部作品，着实是一段难忘的经历。抛开作品质量，这段经历就是非常私人的东西。</p><p>我不认同「相对主义」，但又认为「美是主观的」。我对这两者的看法似乎不能被统一。</p><p>我也有一些答案：1，我大方地承认其实自己就是双标了；2，文哲类的讨论就是经常乱用词，大部分对「相对主义」的批评其实是对「道德相对主义」的批评，相对主义在道德上不成立，但在审美上其实是成立的……</p><p>事物的复杂性总是打消我讨论的热情。我不会因为某件事物非主流或过于主流而否认自己对它的热爱，但问题在于，我热爱的作品大多都在这个社会的红线以内。因为自己的口味、自己的道德感恰好和所处的社会需要达成一致便沾沾自喜，我不喜欢这样。我讨厌「反正我也不 XX」这样的说法。</p><p>唔，好晚了，就到这吧。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>评价外貌不礼貌</title>
      <link href="/2021/03/14/nothing/"/>
      <url>/2021/03/14/nothing/</url>
      
        <content type="html"><![CDATA[<p>接触到的大部分同龄人都认同「随意评价别人的外貌是很不礼貌的行为」，但少有人觉得评价一个人的身体素质不礼貌，几乎没有人认为评价一个人的性格不礼貌。女孩男孩们拒绝外貌歧视时表现得独立又绅士，转头批评一个男人娘、评价别人无趣不免让人失望。</p><p>把视线拉进一所学校，身材相貌、不及格的体育成绩、阴郁不合群是嘲笑与霸凌的频发地。然后步入社会，似乎在一定程度上评价外貌变得有点危险了（但当然完全没杜绝），可抬不起水桶的男孩、不喜欢说话的女孩仍然是能让大家放心嬉笑的绝佳话题。</p><p>可能在一定程度上，社会已经不再像校园这种充满了荷尔蒙的地方一样需要俊男靓女了，但它仍保持着野性，需要劳动力、需要集体主义。</p><p>一个人格的塑造不仅要花费漫长的时间尝试与自己和解，还要不断地接受外界的碰撞。想起了那个人参和萝卜的漫画，如果你是人参就为自己是人参而快乐，如果你是萝卜就为自己是萝卜而快乐。会有傲慢的人说他们不是在评价你，只是指出了事实，你大可以宽心地接受这些事实。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一篇读后感</title>
      <link href="/2021/03/14/review/"/>
      <url>/2021/03/14/review/</url>
      
        <content type="html"><![CDATA[<p>念书时有老师开课前在黑板上写了个句子，问同学们读不读得懂，大家纷纷摇头，表示每个字都认识，但就是连在一起不知道是啥玩意。然后老师便带着得逞的笑容说道，「知道这门课有多难了吧。」</p><p>那个句子其实没啥晦涩的术语，也不是结构复杂的长句，大家读不懂其实是因为——那是个完全没逻辑的病句。</p><p>后来发现很多读起来绕口的译著都充满了没有逻辑的病句。所以也一直相信那句话，翻译更重要的是语文水平而不是外语水平。</p><p>那时我无知且狂妄，还认同另一个观点，大意是只要有逻辑和概念，其实没什么是不能理解的。比如如果一篇文章找不到论据就给了结论，那是作者的问题不是读者的问题。</p><p>然后说类比，思路可以类比，科学却不能类比。一篇充满了隐喻的文章晦涩难懂，它是文学，不是科学。真正的晦涩难懂只建立在它那个领域的术语以及逻辑的复杂。你有逻辑，搞懂了基础知识，就有机会理解它。</p><p>还有我在编程书上看到的一个观点，大意是「如果一个概念的引入依赖于另一个尚未解释过的概念，那么就别先急着引入它。」我觉得这应该作为一切以教育为目的的书籍的信条，大多数教材的编纂者都应该把这句话抄写一百遍。</p><p>再然后就是我狭隘地觉得所有日常生活对话里的长难句都是病句，正常情况下没有人会那么说话。社科的费解之处还表现在它的许多术语是惯用词（当然这些词汇是先作为术语还是先在生活里被使用并不好说），以及一个词汇常在不同的语境下表达不同的含义。</p><p>但它还是有逻辑的。</p><p>有很多文章套了许多词儿，但常望文生意、或上下文并没有什么逻辑。许多人也用这种风格说话。嗐，我不觉得他们真正理解自己表达的东西。</p><p>当然按照惯例，文章末尾我得自我批评，我自己就是这样的人，又甚至我还茫然不自知。嗐。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好好生活</title>
      <link href="/2021/02/27/life/"/>
      <url>/2021/02/27/life/</url>
      
        <content type="html"><![CDATA[<p>去年下半年，就像在这数年间反复做的那样，我又投入到一个新环境，与一群性格迥异的陌生人相识。我一直觉得「性格」不过是从你为人处事的方式中提取出来的标签，我抱着这种想法看待别人，也一直以这样的心态做我自己。从某种意义来说，新环境其实是一个非常好的与外界打交道的练习场所。持以「我们只活一次，我们永远年轻」这样的想法，任何一个举动都可以看作是为了丰富决策库以备将来。不管从哪方面来说，旧世界里的任何改变都会显得刻意、浮躁。而聚焦于人 —— 人们总是更习惯于从一而终的人设。</p><p>这段日子里我在干嘛呢？排除两点一线的琐碎，大部分时间都在漫无目的地冲浪。于我而言，网络从一个孤僻小孩的避风港变成了很多其它的东西，好在它也始终是一个有趣的玩具。有一阵子我惊讶地发现自己似乎没什么真正的爱好 —— 真正的爱好。啥也不想干，觉得一切都没意思的紧。只有下班走路回住处的那十多二十分钟，戴着耳机听些音乐，才感觉到些许惬意。高架桥的电梯晚上八点就下班了，黄昏时某个地方常有人拍照，卖烤红薯和煮花生的地方摆起了烤鱿鱼的摊子……日常反复，我总在路上看到熟悉的场景，心底冒出昨天也冒过的念头。</p><p>爱好这种东西也有倦怠期吗？也许我自以为是的爱好就像大多数中学时的恋爱一样，它产生并维持于占有欲和优越感，而不是真正的爱。记忆也相当配合且熟练地清扫了我脑子里的各种书袋，于是那一个个名字、一段段故事都消失了，就像我也曾反复练习过的数学公式。</p><p>和林酱在元旦看了电影《心灵奇旅》，我戴着两幅眼镜坐在第一排，只有把头斜仰成一个怪异的姿势才能舒服地看清楚画面，然后保持着这个别扭但缓解脖子酸痛的姿势泪流不止。在电影院门口，林酱又重复一次之前也提过的话，「好好生活」。上一次说这句话时，其实暗含着苦中作乐之意。我想这不合语境，然后猛然地，「要是死了，就听不到莫扎特的曲子了」这类中产阶级才应该有的呢喃又不断浮上心头。如果这就是解答的话 —— 嗐，如果这就是解答的话，那些绝境里的人又是怎么活出意义来的呢？就算是健康，也不是理所当然的啊。</p><p>我一再告诫自己不要过分关注那些宏大叙事，应当远离精英主义。可我经常地，发现自以为的平民视角，不过是自己的视角。我仍然双标，经常拒绝相信我看不见的东西。就像不加训练的人都倾向于惰性，似乎一个家伙如果想要过得真正开心，现实总是裹挟他朝精致利己的方向狂奔。</p><p>我说我花了这么大的力气才接受自己，怎么可能随随便便就改变。也许我是真的接受了自己，也许我只是不想让自己之前的投入显得廉价从而拒绝改变？一切都有可能，而且后者听起来反倒合理些。</p><p>老谭说尝试在爱情上建立并维护一段关系麻烦的地方就在这 —— 往往需要你做出更多的改变。当然，两个人都会改变。但在大部分情况下，彼此都觉得一个人需要承担两个人的负面情绪和疲惫，生活变得更复杂了。而社会总是宣扬无私与付出 —— 那种一件麻烦事由两个人来承担的健康关系似乎总是少有的。老谭倾心于独立的灵魂，但这样的灵魂往往看不上，也不需要他。</p><p>老谭给我讲了一个笑话，他说是自己编的，但模仿了伍迪艾伦。大意是这样的「时间是相对的。比如婚姻会使时间因为彼此忍受而显得更长，这样双方都有了更多的时间来玩耍。一个人的时候最多只会感到寂寞，而再完美的爱情都会让人体会到哀愁、失望等情感。综上，婚姻的性价比更高。如果可以的话，结婚，但不要恋爱。」</p><p>上周和一神交已久的大学同学见面，有种网友面基的感觉。聊到他说看完《缘之空》后找了很多谈伦理的书来读，我着实吃了一惊，觉得这家伙实在太有意思了。然后想到我总是下意识地拒绝去考虑这些问题，我不能接受这些东西，我认为这是不道德的，但我没有也不会去研究这些东西。比如关于伍迪艾伦的负面新闻。我本可以就作品聊作品，就人品聊人品。可我总是拒绝去看那些负面报道，心里隐隐期待他不是那样的人。很多东西都是这样，房间里有大象，但我不去看它，仿佛它就不存在。</p><p>嗐。就在我一边写着这些有的没的一边浏览网页的时候，突然看到了吴孟达先生去世的消息。长大的过程总是伴随着一边看着比自己年轻的人功成名就，一边目送自己熟悉的人离开。父亲对我说了些生老病死的事，我不大喜欢他讲得那么赤裸，但也无言以对。之前我说所谓成长不再是假装很喜欢喝啤酒，而是不得不独立做出很多抉择，并且承担它们带来的任何后果。而现在，虽然我一直想要逃避，却也不得不接受，成长还意味着去接受各种各样的期望和许许多多的责任。</p><p>唉，太过私人化的事儿我总是不想表达得太清晰，我又开始暗喻，开始拧吧。我借用各种意象表达自己的情绪，我看到你说自己在海边观月，便急忙打开窗，似乎能闻到月亮带来海风的咸味。而你一定性感得像是图书馆里被人打开但忘记归还的书籍，随意而神秘。我则俯视着我，他是个假装热情的性冷淡，和我正好相反。我咚咚咚地敲门，他连眼皮也不抬一下。他想虚度，那就让他虚度吧。</p><p>可我还不能允许自己以俯视的眼光看待这个世界，我只能悲悯我自己。不如把一切都降维到「孤独」这一层次，表现得自己似乎在智识上占据高位。「孤独」多普遍啊，足以囊括所有人所有事。然后我就像所有刻板印象以及故事里提到的那个人一样，参加聚会却远离人群，重复默念着「他们根本不懂我有多擅长玩摸乌龟」。我有多长时间没做过那种英雄式的美梦了呢？梦中的我拯救了世界，悄然离去，深藏功与名。美梦和梦想两个词没多大关系但消失的时机倒是出奇地一致。有点伤感，在这世间的快乐又少了一大块，嗐，早就少了一大块。有点陈词烂调，但世事确实大多如此，在你意识到的时候，早就已经晚了。</p><p>我狭隘、偏激，总是自以为是地理解大人，每当现实和猜测吻合时，我就不动声色地雀跃。我想学着像他们一样表达同情，但什么也不做。可我做不到。一想到将什么都不做，我甚至连同情都不好意思表达。而不够生活的用词，突然的热情，我总觉得谄媚。「会有更高级的快乐」这种说法我能接受吗？「快乐本身是无知才有的特权」这种说法我能接受吗？将快乐寄托于智慧、经济活动、甚至政治有什么本质不同吗？后面这三个问题并没有什么实质价值，只不过是我想卖弄一下刚刚搜索到的内容。</p><p>这篇胡扯没啥主题，大概算是对这阵子一些片段的总结。标题取林酱说的「好好生活」，那我意识到自己的生活方式了吗？有审视过自己的生活方式吗？嗐。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强行聊聊阅读</title>
      <link href="/2021/01/10/start/"/>
      <url>/2021/01/10/start/</url>
      
        <content type="html"><![CDATA[<p>我又回到下不了笔的状态了。以前我会说只要我真诚，写下当前的状态，那就是有意义的，可最近我总是误觉得自己能够看到一些事物更里面的东西 —— 但越来越觉得这一切都太复杂，我做不到毫无顾忌就能轻松地得出结论。</p><p>但我还是有好奇心，有表达欲。那让我抛开什么什么主义，立足于一个小点聊些东西吧。</p><p>聊读书吧，可能是我最近才开始注意，身边频繁阅读的人越来越多了。</p><p>之前我其实一直不大清楚为什么那么多人鼓励读书，我不知道阅读的「意义」是啥。意义这个词可能有点暧昧，他们会说「没有意义就是意义」，「思考意义本身就是意义」 —— 这不是我想说的。</p><p>我不知道别人是抱着怎样的心态来鼓励别人读书的。他们说读书有用，是指那些技能方面的书籍吗？</p><p>我稍微谈谈。</p><p>我现在不大能赞同「读书最重要的是大部分内容都忘记了，最后留在你心里的东西」这类说法，我觉得它们太模糊。<strong>这种说法的唯一用途在于鼓励大家阅读，培养大家的阅读习惯，给予慰藉。</strong> 不要管意义，你只要去做。</p><p>而「通过阅读来提高修养」这种说法背后则蕴含着一种道德歧视。「阅读」这个动作或行为本身并没有什么深刻的含义，但文字是信息密度相对高的载体，它还拥有其它信息载体没有的一些优势。当我们讨论「阅读」时，如果只愿意沉醉在原教旨主义的优越感而不去分析优势与不足，那一定是有问题的。</p><p>批评小视频，批评网络 —— 批评媒介，反思是必要的，但是：柏拉图批评过「书写」，叔本华批评过「阅读」……而且我觉得他们批评得有道理。可我们大多数人都只是普通人，达不到这样的程度。我又想起许多的主义、各种教旨，我从不觉得自己信奉它们 —— 但我会向它们的一些说法靠拢。我还想起伍迪艾伦的电影里有一个老笑话，大意如下：</p><p>「『大夫，我兄弟疯了，他以为他自己是一只鸡。』然后医生说：『那你怎么不把他带来？』那家伙说：『我是想带他来着， 可是我需要鸡蛋啊。』」</p><p>尽管世界偶尔会表现得疯狂甚至荒谬，但我们还是不得不经历这一切，因为我们大多数人都需要鸡蛋。</p><p>说回阅读吧。我认为阅读是有目的（动机）的，即便一个人不觉得，下意识里也一定有。这是我的观点。这里的目的并不带功利色彩，它只是一个立足点。有个朋友说他觉得「目的」在中文里的意思并不比「意义」这样的词更明确。我觉得他说的有道理。我想表达的是我们阅读的深层次动机 —— 人为什么想要去阅读呢，总有个基础吧？</p><p>对于那些尚未意识到的目的（动机）来说，阅读可能是抚慰孤独的方式，逃离现实的途径，或仅仅为了填补内心的优越感等等。</p><p>而能意识到的目的（动机），我觉得分为三类。一，消遣。打发时间，满足好奇心都算消遣。二，用于生活。技能提升，厚黑啥的都算读以为用。三，解决人内心的焦虑。</p><p>这里不展开了。然后最后我不赞同「书读百遍，其意自现」这种说法，我觉得只有经历和道理相互应证才能丰富我们自身。</p><p>还有两个说法，一个是把书读厚，一个是把书读薄。中学时我以为的把书读厚，就是在一本书上写上自己的想法，做上许多的笔记。我现在的一点浅薄看法是，一本好书总是从抽象的高度论证出道理，而那个道理下有着许许多多的例子，这就需要读者自己的经历或者收集资料去比对。这样，一本书就读厚了。</p><p>而把书读薄，则是读者经历得多了，知道的多了，就反而越能理解书里的许多想法，这样读上几遍，就能把一本书的内容吸收掉。这样，书就读薄了。</p><p>还有比较流行的一个观点，大意是见到一本好书如果见到一个老朋友，他说的每一句话都和你踩在一个调子上，你想过的每个念头都被他总结过了。这种书能给人一个体系，却不怎么能给人启发。除非他能讲清来龙去脉。</p><p>许多文章更甚，能中人的情绪，却没有逻辑。</p><p>我觉得一本好书不是给人认同的，最好是给人启发。其它很多事物也同理。</p><p>现在的意见领袖太多了，他们生产各种大家能认同的东西。我们消费他们的内容的同时，我们也是他们的商品。算法，算法更甚。</p><p>如果没有接触一手信息的能力，尽量消费那些能告诉我们信息来源的二手商。</p><p>很多搬运工不愿意告诉大家内容来源。比如转载小视频的，搬运公众号的，因为他们害怕你越过它去来源。**他们赚钱的基础是信息壁垒，这层壁垒是很容易打破的。**而做学术就能放心大胆地把引用一条条列好，因为重要的不是这些信息，而是别人的专业水平以及分析信息的能力。</p><p>我认同这一点：从藏着捏着的人身上接触不到任何真正有价值的东西。</p><p>谈到这了，举个例子再扯一点。我的工作内容有时候会涉及到在数据库造数做测试，然后我就一直手动造数据，而某同事则写了一个造数的脚本分享给了大家。</p><p>我是非常惊讶的。虽然从客观环境来说，我造数的次数并不那么频繁，即便从一个比较长的时间段来看，每次手动造数据花费的时间成本也不比写一个脚本的时间高。**但问题在于 —— 我根本没意识到这是一个问题。**主观原因在于我缺乏数据库基础，根本没想到这件事可以这么优化。</p><p>如果有人告诉我说，这个可以写个脚本巴拉巴拉，我花点时间去查查资料也能很快地做出来。但是我根本意识不到这点 —— 我想到刚玩知乎时就曾有过「怎么别人能想到这些问题」的惊讶，<strong>有时候发现问题，提出一个好问题比解决问题更屌。</strong></p><p>谈得广一点，为什么人家就能觉得「苹果朝地下落」也是一个问题？诸如此类的。背后是有一套思维方式以及其它的等等等等在做支撑。这也可以随讨论的东西不同展开到方方面面，不细说了。</p><p>而分享 —— 谈用的工具、得到的结论……对了，还有标签，这个时代总是不缺标签。别人通过这些东西能有所参考，却经常只能管中窥豹。无论是了解对方还是从中真正学到点什么。</p><p>聊到这我又想起了知识付费，无论是「知识」的分享还是「方法论」的分享。我接触的并不多，所以想法可能有点偏激且片面，前者我毫无疑问不会持肯定的态度，而后者让我想到了学徒制 —— 里面最有价值的东西是个人的经验 —— 经验主义也许是危险的，也许不是。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外星人的思维是透明的</title>
      <link href="/2020/11/08/robot/"/>
      <url>/2020/11/08/robot/</url>
      
        <content type="html"><![CDATA[<p>「一定有很多后知后觉的事，比如中学时对女孩的好感和当时自以为读懂了的名著。」她这样对我说。</p><p>能遇到一个见面后可以坦诚地询问「你最近有在读什么吗」的家伙是很难得的，特别还是一位异性。我当时心里盘算着很多不符合当时气氛的想法，而且说真的，没太懂她话里的意思，但还是认真地盯着她，用期待的眼神做出鼓励她接着说下去的样子。</p><p>可是我被她看穿了。</p><p>她说「别来这一套，你可能觉得倾听是一种聪明的方式……别偷懒，告诉我你自己的想法，真实的想法，经过思考的想法。」</p><p>相比尴尬，我当时庆幸的感觉要更浓烈些。想着还好对方误以为我在使用某些小诡计，而没有看出我其实一无所知。</p><p>我先承认说自己对这玩意了解不深，然后靠着自己在书籍和网络里了解到的东西纸上谈兵了一翻。她摇了摇头，像是有点生气了：「说你自己的想法！」</p><p>我后来懂她的意思了。把她送走后我去过一个人人都热衷讨论历史和政治的星球，人人都在谈论以确认自己确实可以谈论。身处其中时我冒昧地觉得他们都很肤浅，每个人都在重复新闻里说的话。我一如既往地沉默，有点怀念她当时板着脸的样子。恍然间，看见她站了出来，干脆利落地堵住了我的表达欲。「你要先思考，说出你自己的想法！」</p><p>宏大的话题犹如春药，我又差点迷失在这场跨种族精神群交里。</p><p>和她相处的那阵子，我曾草草翻过的名著一部也没派上用场。有一次和她聊起一个话题，好不容易动了脑筋，说出一句自认为非常有道理的话。她却冰冷地指出这个观点是由谁在哪个年代提出来的，然后还举出了几个对于这个观点非常尖锐的例子。直到我再三保证这确实是自己思考后的产物，然后给她细叙了自己的思维逻辑，她才缓和了脸色。</p><p>她呼了口气，肯定了我，然后说道：「确实，现在这些东西都不重要。文学领域一百年前就没有人类的参与了。即便是当初那个人力创作的年代，你能想到的也早就被无数人描绘过千百遍。可是你不觉得，这很有趣吗？我是说，思考。」</p><p>我知道她的意思，最近有个领袖是机器人的文艺复兴党派，崇尚人力年代的「思考」，宣传口号是「思想自由」，针对现在这个概率社会提出了「不要黑箱政治」的口号。这个党派不仅吸引了许多运算能力弱的机器人，也吸引了不少年轻的自然人。机器人渴望平等，希望能通过「思考」弯道超车；年轻的孩子看到那些人类原来也很厉害的信息便激动不已，产生了强烈的共鸣。</p><p>我终于松了口气，却有点失望。眼前的女孩被符号化为一个追求流行的标签，进入到我熟悉的领域。于是我装作坦然地问她：「你是什么时候实现二次启蒙的？」</p><p>她反问：「二次启蒙？」</p><p>她当然不知道这个词，因为这是我刚生造的。</p><p>我说「就是什么时候自我意识觉醒，意识到这些的……比如思考很重要这类。」</p><p>她说「当然是从我了解『思考党』后，我第一次认识到围绕着我们这个社会的东西。比如说人类和机器人一起生活……你知道吗？听说人力社会是没有机器人的哦，而且那个时候他们还会担心有一天机器人会毁灭人类。」</p><p>我知道，其实人力时代也是有机器人的，只是没有进化到现代社会里这么高级的程度。</p><p>「不是所有东西都是理所当然的，比如我们现在的社会是由一台超级计算机和一个普选出来的代表团共同治理的，难道这就是最好的方案了吗？超级计算机仅仅诞生了一百多年 —— 地球上的智力活动就停止得差不多了。搞笑的是，计算机认为研究算法优化的对社会的贡献太低，应该停止，代表团就真的停止了。</p><p>我怀疑它做出这个判断是因为程序出了 Bug，导致它伦理判断模块失效。仔细想想，人类不才是阻止现在这个社会进步的唯一障碍吗？这样下去人类说不定真的会被计算机消灭。如果我们当时选择了另一条路，可能我们现在已经住在外星了吧？可现实呢？人类越来越蠢，贪图享受……」</p><p>这种说法我太熟悉了，「人类越来越蠢」、「网民不会独立思考」、「没有同情心」……她也是一个有着知识分子的骄傲，却没有知识分子的怜悯的家伙。这么说的时候，也一定不包括她自己吧。</p><p>够了够了，我改了一下参数，重新点击编译的按钮。她的双眼一闪，开始热加载代码。</p><p>「我觉得这是二次启蒙，是自我意识的再次觉醒。每个人都应该经历这么一次，去质疑所有的理所应当，然后选择抛弃或者接受它们中的某些部分，继续活下去。」她这样对我说。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1024</title>
      <link href="/2020/10/26/1024/"/>
      <url>/2020/10/26/1024/</url>
      
        <content type="html"><![CDATA[<p>痔疮因路途颠簸被自行车坐垫磨破的夜晚，凸起的颈椎在围巾上顶出一个不大不小的凹点。强风拂面，犹如重力拉扯身体。孩子入眠，星星睁眼。别读我，理解我就是杀我。裹着被，抱着夜。双腿在夜里依偎，手指总婆娑键盘。没有人应该过劳死在周六的白天。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈应届生与社保卡办理（以成都为例）</title>
      <link href="/2020/10/15/uebcka/"/>
      <url>/2020/10/15/uebcka/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>这篇文章主要谈了以下几个问题：</p><ol><li>怎么办理社保卡（主要困惑处在于之前办过社保卡现在该怎么做）</li><li>归属地转移与参保关系转移</li><li>老家缴的医保费用，算是缴纳社保吗？</li><li>社保卡和医保卡有啥区别？</li></ol><p>本文源于自己网上了解到的消息与经验总结，难免疏漏或错误，还望朋友们不吝指正。希望能对看到此文的朋友有所帮助。</p><h2 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h2><p>主要简单聊几个我在社保卡办理过程中感到困惑的概念，建议有尝试过了解社保卡办理以及感到过困惑的朋友往下看看。</p><p>不管是啥原因，反正毕业了，工作了，现在你决定自己办理社保卡。</p><p>办理社保卡的前置条件有两个：以前办理过，以前没办理过。</p><p>以前没办理过那就好整了，通过线上或者到能办理社保卡的银行去柜台直接办理即可。</p><blockquote><p>成都可以关注微信公众号 <strong>成都市12333</strong> 申办社保卡。</p></blockquote><p>那以前办理过呢？</p><p>不少人以为自己没办理过社保卡，结果去申请时却被告知办理过了……对应届生来说，以前办理过社保卡大概就这两种情况：<strong>1、学校办的；2、老家办的。</strong></p><p><strong>怎么确认自己办没办理过呢？</strong></p><p>1、直接去银行柜台查询。</p><p>2、通过线上查询。（成都可以关注微信公众号 <strong>成都市12333</strong> 查询。）</p><p>要是办理过社保卡，也有两种情况：1、社保卡未激活；2、社保卡已激活。</p><p>激没激活我们先放到一边，关注另一件事：<strong>社保卡的归属地与你现在缴纳社保的地区。</strong></p><p>如果你现在拥有的<strong>社保卡的归属地和你现在缴纳社保的地区在同一个省市</strong>，那么直接激活现在的社保卡就 OK 了。</p><p>如果你现在拥有的<strong>社保卡的归属地和你现在缴纳社保的地区在同一个省，不同的市</strong>，你可以把卡激活后，办理<strong>归属地转移</strong>至缴纳社保的市。如果你的卡尚未激活，也可以把卡注销了，在缴纳社保的市重新办理。</p><blockquote><p>成都可以关注微信公众号 <strong>成都市12333</strong> 办理社保卡归属地转移。</p></blockquote><p>如果你现在拥有的<strong>社保卡的归属地和你现在缴纳社保的地区在不同的省份</strong>，你可以直接在缴纳社保的省市直接办理社保卡。</p><blockquote><p>因为现在可能同一个省社保系统已经联网了，但不同省份之间仍不互通。</p></blockquote><hr><p>对于大部分应届生来说，对社保卡的了解到此就差不多了。但是还有一个概念 —— 参保关系转入。</p><p>由于现在的社保政策，倘若你在 A 省的 W 市缴纳了几年社保，现在你又到了 A 省的 Q 市开始缴纳社保。按上文的说法，你可以通过 <strong>社保卡归属地转入</strong> 在 A 省的 Q 市使用之前的社保卡。但是 —— 仅办理归属地转入，之前在 A 省 W 市的参保缴费记录是不会同步过来的。</p><p>如果你想将之前的 <strong>参保关系（包含缴费年限和余额）</strong> 也弄过来，就得办理 <strong>参保关系转入</strong>。</p><p>同样，参保关系转入可以去柜台，某些地区也可以线上办理。（成都可以下载 12333 APP 线上办理）</p><p>参保关系这玩意涉及到社保政策 —— 养老金的发放。比如你可以领养老金了，但是你之前在多个地方缴纳过社保。政府会<strong>以你缴纳年限最后达到十年的那个城市的平均工资水平为参考</strong>来给你发放养老金。如果你每个地方都没达到十年，会把你的养老保险关系和资金转到你的户籍所在地按规定给你发放养老保险。</p><hr><p>因为应届生一般之前都没缴纳过社保，所以大多数朋友不涉及这一块。</p><hr><p>谈到应届生缴纳社保的话，还有一个常令人感到困惑的地方在于：<strong>我在老家缴的医保费用，算是缴纳社保吗？</strong></p><p>在老家或者学校里缴纳的医保费用是不算缴纳社保的。在老家缴纳的一般是「农村合作医疗保险」或者「城镇居民医疗保险」，这个缴纳一次只管一年，也不会涉及到参保年限。学校缴纳的一般是「大病保险」，同上。</p><p>大致来讲，<strong>缴的医保费用只激活了部分医保属性，并不涉及社保。</strong></p><hr><p>还有一个问题：社保卡和医保卡有啥区别？</p><p>大多数时候这两个说法都指的<strong>社保卡</strong>。因为现在社保卡已经包含了医保的功能。即便硬要从概念上区分，实际上社保卡也可以当作医保卡来用。</p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 自己浅见 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>而秋</title>
      <link href="/2020/10/08/autumn/"/>
      <url>/2020/10/08/autumn/</url>
      
        <content type="html"><![CDATA[<div style="text-align:center">长满了石苔的巷子<br>白昼越来越短的秋季<br>装过猫和毒药的车厢<br>途径能看得见星星的夜<br>枕着诗集的乘客<br>逃往清晨<br>滑倒在石板路上的土狗<br>没有梦见乡愁的人</div>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蝉鸣将梦涂满儿时的夏天</title>
      <link href="/2020/08/15/summer/"/>
      <url>/2020/08/15/summer/</url>
      
        <content type="html"><![CDATA[<div style="text-align:center">他把早餐定义为醒来后的第一顿饭<br>他大块的时间被挥霍在想像里面<br>他有妄想、有计划、有梦<br>却从未付诸实践<br>他喋喋不休 以掩饰孤独感<br>他思考、写作 是应对焦虑的手段<br>他七岁时蹲在地上瞅蚂蚁<br>觉得做着不亚于拯救世界的工作<br>他十六岁时伏在课桌做卷子<br>想像着未来的三点一线<br>他如今将一天七三分<br>忙于生存<br>他有时候感觉忙得毫无意义<br>生存也毫无意义<br>他没有悲伤、没有喜悦、没有心安理得<br>他邀请书上的名字来脑海里相见<br>他感受到许多双或冰冷或温暖的手<br>带来穿越了时间的抚慰<br>他的第一个问题还没结束<br>无数的困惑接着涌现<br>他的优越感燃起了 又很快熄灭了<br>他的表达欲燃起了 又很快燃尽了<br>他明白了 他总是误以为明白了<br>他忘记了 他总是想起于不经意间<br>他以为自己从来不曾被理解<br>他以为周围的人全是笨蛋<br>他因此觉得自己独特<br>他因此认识到自己的平凡<br>他害怕自己并非明珠而不敢刻苦琢磨<br>他又有所期冀 遂疏拒人群 甚至想要远离人间<br>他也曾用「如果」来搪塞现在<br>他也曾立志与「要是」一刀两段<br>他想起了靠着墙自省的夜晚<br>他想起了耳机里的无人声环<br>他已经三年没有得过感冒<br>他自喻喜欢读书 其实书页没翻过几篇<br><br>这才是你啊朋友<br>只有你知道的你<br>你终于感受到你<br>你尝试着认识你<br>你不再问为什么 却没有停止思索<br>你说 用生活充实自己<br>你不能下定决心<br>你的怀疑多过问题<br>你质疑 质疑一切 质疑「质疑」本身<br>你看着你 又看向外面<br>你没有继续向外看<br>你说 哦对 这是「你」<br>「那我在哪里呢？」<br><br>他来到三伏天 连手心也开始冒汗<br>人流像是齿轮在带动城市旋转<br>高楼 挡住云彩约会视线<br>也阻止了他抬头的打算<br>却没能止住 天空被梦涂满童年</div>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈 Linux 与 GNU/Linux</title>
      <link href="/2020/07/22/GNU-Linux/"/>
      <url>/2020/07/22/GNU-Linux/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>之前看到提问「Linux 与 GNU/Linux 的区别」，当时刚好在读《自由软件，自由社会：理查德·斯托曼选集》这本书，里面提到了这个，就按着记忆写了个回答。</p><p>以下算是读书笔记吧……</p><p>虽然我常觉得对着一个定义深究它到底是啥玩意没太大意义，但是导致这种结果的这个过程还是很有趣的。就像是「这也太像我的叔叔奥斯卡了吧！」，没什么技术性质的偶然被民意裹携成为官方钦定的例子数不胜数……「动画」还是「动漫」？「ins」还是「IG」？</p><p>不过在当前的环境下，任何一个偶然都会被当作（背后势力）营销就是了……</p><hr><h2 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h2><p>百科版：<a href="https://zh.wikipedia.org/wiki/GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0" target="_blank" rel="noopener">WIKI_Linux命名爭議</a></p><p>首先引入自由软件（free software）这个概念，注意是「自由软件」而非「免费软件」。自由软件意味着用户可以自由地对该软件进行使用、复制、修改等。</p><p>Richard 是个代码界的革命者，一生都在为「<strong>消灭代码私有制</strong>」这一目标奋斗，他倡导自由软件，那要做自由软件得先做个自由操作系统啊，你软件是自由的，运行在别人的非自由操作系统也不大合适吧。</p><p>为了这个目的，Richard 便尝试着组织开发一个自由的操作系统，这个操作系统被命名为 GNU。</p><p>实际上，GNU 往往指代着自由软件这一整个计划甚至思想 —— 即消灭代码私有制。</p><p>比如 GNU General Public License，缩写是 GPL，就是基于 GNU 的一种软件分发协议，用这个协议的话就代表你的代码遵循 GNU 的哲学，用户可以随意地使用、复制、巴拉巴拉……</p><p>GNU 是 「GNU is not Unix」的缩写，Unix 是当时的商业操作系统，GNU 这个名字就代表着与私有操作系统的界限划分。（有那味儿了）</p><p>GNU 开发到后面就差一个内核了，这个时候项目组也正在做自己的内核 Hurd，不过 Hurd 离可用还有一定距离，<strong>刚好 Linus 的 Linux 内核也发布一阵子了，完成度也不错，就使用了 Linux。</strong></p><blockquote><p>当时 GNU 已经完成了除操作系统内核外的大部分软件，比如 Bash、Glibc、Gcc……</p><p>Linus 在上面这些软件的基础上开发出 Linux。（GNU 兼容 Unix，所以虽然 GNU 操作系统尚未完成，但上述这些软件是可以运行的。）</p></blockquote><p>（PS：Richard 当时本来想提议命名项目组开发的内核为自己女朋友的名字，后来这事因为用了 Linux 就泡汤了，而且 Richard 后来也和女朋友分手了。）</p><p>使用了 Linux 内核的 GNU 便是 <strong>GNU/Linux</strong> —— 但这个称呼有争议，部分人提倡使用 Linux 命名。两个称呼的优劣以及由此产生的争议不多提。</p><p>现在的语境下，Linux 基本泛指一切使用 Linux 内核的操作系统。</p><p>我觉得，按哲学思想与功能来区分的话：Linux 指 Linux 内核，GNU/Linux 指 GNU 项目与 Linux 组成的操作系统。</p><blockquote><p>Linux 内核的开源协议是 GPL。</p></blockquote><p>GNU/Linux 遵循 GNU 的哲学，系统只使用自由软件。而现在的各种「基于 Linux 的发行版」，便是基于 GNU/Linux ，再打包一些其它软件（比如桌面环境），做一些配置，提供给用户。</p><p>打包些软件这一步骤，为了提供便利，可能就会打包些非自由软件。</p><p>如果打包了非自由软件，这时再称 GNU/Linux 其实也不大合适了。</p><p>啥是非自由软件呢？不遵循自由软件协议（GPL）的都是非自由软件……还是排除法好理解些。值得注意的是，开源不一定意味着自由 —— 虽然 GPL 是一种开源协议，但开源协议有好多种呢。开源只意味着公布源代码。</p><h2 id="richard-与-linus-对该命名的发言"><a class="markdownIt-Anchor" href="#richard-与-linus-对该命名的发言"></a> Richard 与 Linus 对该命名的发言</h2><p>对命名的讨论太多了，还是拿 GNU 与 Linux 各自的领袖人物的发言举例吧……</p><p>今天有数千万个用户，正在使用的这个操作系统，是早就已经开发好，让他们可以自由的使用。但是他们不晓得，因为他们以为这个系统是Linux，而它是由一个学生“只是为了好玩”（just for fun）而发展出来的。 ——理查德·斯托曼</p><p>好的，我认为这个称呼是合理的，但只有你真的做了一个Linux的GNU发行版时，这才是合理的……这就像是我觉得“Red Hat Linux”，或“SuSE Linux” 或“Debian Linux”这些名称是很好的，因为如果你真的做了一个你自己的Linux发行版时，你必须要帮它取个名称，但是要把Linux全部通称“GNU Linux”，我觉得这很荒谬。——林纳斯·托瓦兹</p><p>上面是从 <a href="https://zh.wikipedia.org/wiki/GNU/Linux%E5%91%BD%E5%90%8D%E7%88%AD%E8%AD%B0" target="_blank" rel="noopener">WIKI_Linux命名爭議</a> 摘取的两人发言，单独看可能有歧义。</p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 自己浅见 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业后的一天</title>
      <link href="/2020/07/16/one-day/"/>
      <url>/2020/07/16/one-day/</url>
      
        <content type="html"><![CDATA[<p>喋喋不休了一大堆后，母亲在电话那边用局促的声音说你应该和朋友聊聊这些的。一直以来搀扶着我的手松开得毫无征兆，我捏着手指说没关系，我只是想倾诉一下，说出来已经好多了。母亲沉默了片刻，又和我唠了会最近的饮食。我说没得问题，她说那好，你多保重。</p><p>「重」这个字带着翘舌音。我出神到还在念书时，经常有人吐槽我讲方言像是嚼着泡泡糖在说话。</p><p>对面挂断电话，就像吹起的泡泡一样，啪的一声，糊了我一嘴。</p><p>我的家乡估计是这个省唯一一个方言发音还保留着翘舌的地方。毕业后，我在距离它 200 多公里的省城找工作，这儿的本地人讲话干净、清脆、凛冽，与家乡不同、也与外界对这生活状态的认知相反。</p><p>我借住在阿甘租的房子里。是他先联系我的。阿甘是我小学同学。过年的时候有人要组织小学同学聚会，当然，我没去。看到别人混得好我会为自己伤心，看到别人混得差我会为别人伤心。总之是个伤心之地，不去也罢。</p><p>阿甘从当时组织的 QQ 群加上了我，没找我借钱。我心想他还挺念旧，就陪他吹了会牛。后来才知道他把群里人都加了一遍。我本想打开他 QQ 空间浏览一哈，但是一想到有浏览记录，就打消了这个念头。正在纠结要不要开个黄钻隐身查看下时，突然看到自己 QQ 空间的今日访客数从 0 升到了 1，便急忙点进去看了眼，来者果然是他。我心想自己得更矜持点，还是算了。</p><p>唉，扯远了。我明白人为什么总喜欢回忆了，因为回忆可以把一堆有意思的事儿拉出来，排排站好。然后随便捡了根针筒，将一个个瞬间注射进自己的血管。为什么呢？为什么当初的每一幕明明也是无所事事，闲得不行，就和现在一样，可时间一旦汇聚成段，其中的碎片突然就有了意义。荒谬吗？点得融入线，点本身才能被凸显出来。</p><p>我问阿甘能不能借住几天，阿甘说没问题，然后我就应邀过去了。我是个细心的人，所以故意在学校待到周末，然后拿着铺盖卷和其它杂七杂八的东西，联系了个货拉拉，一趟跑了过去。</p><p>一入他卧室的门就看到床垫旁边有一大堆书直接从地板上摞着，对齐我胸口，比开的窗还要高好几本书。床垫就放在地板上，没有床，晚上睡觉要是一个不小心书垮下来，估计会把人压个半死。</p><p>狭隘的空间被利用到极限，前后墙壁拉了一根绳子，我看向旁边，原来绳末用一个吸盘固定在墙壁上。绳子上挂了几件白色 T恤衫和几条不同款式但一律或黑或灰的裤子。</p><p>我没话找话，问这都是你的书？他点头说是。然后我又特没出息地问出了那句话：「这些书你都看了吗？」</p><p>他笑着说看了。</p><p>问出来我就后悔了，觉得自己真蠢。本来想好的几句奉承话也不好意思说出口。在脑子里搜索了一转，想找点和书有关的东西搭下话，才发现自己自从初中毕业就没读过课外书。于是我故意用乡音以掩饰自己言语的匮乏，说了句「你阔真牛皮」。</p><p>他问我今天吃点啥，我说都行都行，按你平常来就行了，千万别为我接风洗尘啥的。他说刚好，今天下午准备去旧书店逛逛，咱们一起去吧，晚上就在外面吃了。</p><p>听到这番话，我一边绞尽脑汁思考怎么拒绝，一边暗示自己千万不要表现出来。</p><p>阿甘又说，没关系，你有啥其它安排就去忙自己的正事。</p><p>我顺口就说出来了：「我没的啥子事。」</p><p>说完我就又后悔了，唉我这张臭嘴。</p><p>跟着他骑了辆共享单车到了一条旧书店街，一排大概共有七八家书店。中间几家店的老板坐在门口搭着的太阳伞下乘凉聊天。阿甘进了最边上一家店，我心想坏了，这家伙该不会要从这边到那边逛一圈吧。</p><p>我黑着脸跟在他身后，老板问他要找啥书，阿甘回应说我就看看。老板说好，你慢慢看。</p><p>这老板人也不行，这种说就看看的人多半都不会买，你让他进去干嘛？</p><p>我转头看向老板，发现老板身边卧了只橘猫。我眉开眼笑地啧啧了几声，等猫注意到我了，便慢慢向老板那儿移动过去。猫没跑。到了一个合适的距离我便蹲下，握着拳头缓缓向猫伸过去。橘猫的耳朵抖了抖，又在我拳头上嗅了嗅，我便张开手趁机挠它的下巴。没想到这猫不按常理出牌，突然伸出前面的爪子抱着我的手就开始用牙咬。我把手抽出来想抚摸它的头让它温顺点，可它就是抓着我的手咬。</p><p>老板呵呵一笑，「它很喜欢你勒。」</p><p>我心想屁哦，待会别把我手咬破了。朝着老板笑了笑，说着「呵呵，是呢是呢。」把手从猫的爪子和嘴里夺了回来，进到店里。</p><p>阿甘正在书架前来回地走，我看了眼书架，翻出了本漫画开始读。没一会，就前后来了两个年轻人。老板问要找啥书，俩人都说：「漫画。」</p><p>先来的那个年轻人在我面前盯着书架扫了几眼就走了，后一个来了，先和前一个家伙一样，在我面前扫了一眼书架，又踮起脚把书架上一套用绳捆着的漫画拿了下来。他把书摆在书架前面的桌子上看了眼书脊，叹了口气，头朝好几个方向转了转，估计是还在找书吧，然后视线停在了我手中的漫画。</p><p>我假装没注意到他，机械地翻着手里的漫画，图印在我的眼里却根本没进入脑袋，更别说上面的字儿了。我暗道：「不会这么巧吧。」</p><p>用余光瞄着年轻人欲言又止的样子，我心一抽，深怕他向我搭话，正打算非常自然地抖着胳膊把书放回去，阿甘突然空着手从后面过来，拿过我手里的漫画。「诶，走吧走吧，买回去看。」</p><p>我跟着阿甘出去前继续用余光观察那年轻人，他果然把视线粘在漫画上面。我心想要不要问问他，如果他需要的话，把这本漫画给他好了，但阿甘已经麻利地到了老板面前，开始付款。还是算了，我心里这么想着，他如果要的话应该主动点问我的，算了算了。你和这本书无缘。</p><p>我走了出去，橘猫还躺在地上，朝我喵呜了一声。阿甘笑道，「嘿，这就认识了哈。」我嘿嘿笑，不说话。</p><p>我对阿甘说没必要买的，我也不是很喜欢。阿甘说没得事，他不是为我买的，只是转了一圈总得买本什么，不然不好意思，刚好这种漫画便宜。</p><p>然后阿甘和我沿着这条街一家家书店都进去看了一下，有感兴趣的就买几本，没感兴趣的就随便拿册小开本的书、杂志什么的。其实没什么看头，教材、畅销书居多。</p><p>快到尽头的时候之前那个年轻人过来了，他向我们打招呼，阿甘一脸懵逼，我倒是有种总算找过来了的感觉。我把书包拿到胸前，正准备把之前拿本漫画拿出来，却被那年轻人的话止住了。</p><p>他说阿甘刚才在第一家店付钱的时候，掉了张五块的。阿甘笑着说谢谢兄弟。</p><p>就这？现在我倒是一脸懵逼了。</p><p>年轻人把一张叠着的五元人民币递给阿甘，说：「你检查下，这应该是你的钱吧？」</p><p>阿甘还在说谢谢，伸手拿钱，说，「不用了，麻烦你了哈。」</p><p>年轻人捏着钱的一角不肯放手，「你还是检查检查吧，别搞错了。」</p><p>阿甘好像有点困惑，伸手往裤子口袋里摸了摸，不大确定地说，「我也不知道是不是我的……」</p><p>年轻人紧接着说，「是你的是你的，我看见从你手里掉出来的，不过你还是检查检查嘛。」</p><p>阿甘点头说好的，我检查检查。</p><p>年轻人松开手，阿甘把钱拿过来，伸手展开。我在一旁看着年轻人飞也似的跑开了。阿甘看向手里的人民币，原来里面夹了张纸条。阿甘抬头，又朝四周望了望。我看着不大对劲，便问他怎么了。他把手里纸条递给我，「瞧。」</p><p>哟呵，我略带谐谑地接过纸条，打开，里面写了一行字。</p><p>读完，我老脸一红。</p><p>阿甘问我咋了，我苦笑着又把纸条递给他。</p><p>上面写着，「那种漫画你也看，真为你的品位感到遗憾。」</p><p>这人真是神经病。</p><p>阿甘倒是开心地大笑，这才恍然大悟地说着，「怪不得刚才怪怪的……这五块钱估计也是他自己的吧……就为了吐槽一下你……哈哈哈」</p><p>我说，「估计他还没分清我和你。吐槽我，怎么把钱给你啊我说。」</p><p>阿甘又说，「这人真不知道该说没礼貌还是有意思……好在我们白嫖了五块钱，可以吃顿火锅了。」</p><p>等从头逛到尾时我再看表，已经下午五点了。我们便回头，在第一家书店门口打开了之前停的两辆共享单车。那只猫又对我伸出爪子叫唤了声，嘿，估计是爱上我了。不过我可不喜欢凶巴巴的猫。</p><p>不一会就到了家生意爆棚的火锅店，门口闲坐着不少人，估计是在排队。把车停在人行道旁边划分的区域，我略带惊讶地对阿甘说，「不会吧，真吃火锅啊，而且这人也太多了。」</p><p>阿甘说，「这是家网红店，而且旁边是所学校，当然人多了……不过今天不吃火锅，跟我走吧。」</p><p>他带着我从火锅店旁边的巷子穿过去，拐了两个弯我就看到学校的围墙了。原来这周围是学校外的小吃街。我的鼻子在时而闻到的辣椒油、火锅料、各种各样的味道里备受煎熬。</p><p>我们来到一家店，点了两碗番茄鸡蛋面。阿甘从我书包里取出了他买的书，然后把饭馆桌子上的卫生纸扯了几张出来，开始擦拭书籍的封面。</p><p>他擦了一本就让我拿着，装回去。第一本是我之前在看的漫画，名字是《裸女密码》，第二本略厚，封面是很厚很硬的那种纸张，名字是《吹》。我带着好奇心打开扉页，右下角写了个名字，还写了句「1997 年购于上海。」哟呵，有点年纪了嘿，还跑了这么远路。</p><p>我问阿甘，「这种隔着时间距离和书相遇的感觉还挺有意思的……买书就是你的爱好吗？」</p><p>阿甘说，「爱好……哈哈，这个问题我还真认真想过。买书应该不算是我的爱好，或者说我就没什么爱好吧。」</p><p>我觉得他话里有话，就顺着问他，「你这啥意思。」</p><p>他说：「我觉得爱好，意味着你愿意投入时间、精力、甚至人民币。而且不仅仅是肤浅地执行某一个动作……比如买书，买书只是一个动作……」</p><p>我插话说，「一个花钱的动作。」</p><p>「对！还比如有的人说自己喜欢读书什么的，他们只是机械地执行着这样的动作，没得思考。爱好意味着你得钻研那些那些动作的附加意义……我是做不到啦，所以说我没有爱好。」</p><p>「不过这不只是你对爱好的看法嘛。」</p><p>阿甘笑了，「对，我知道你的意思，每个人对一些生活里常见的词汇其实都有自己的理解。即便追溯词源，告诉别人你们理解错了，那也没有意义。」</p><p>他说了句看似中立的话，对话反倒没法继续了。</p><p>不一会，阿甘把书擦完了，面也上来了。原来番茄鸡蛋面的鸡蛋是个煎蛋，摆在面条上。我拿筷子插到碗底，把面挑起来拌匀，翻出了下面几大片番茄。橘红色的番茄汁在面汤里散开，我食欲大增。</p><p>埋头挑了一大筷子面条往嘴里塞，咬了一口，面条便在嘴里弹开。裹在面条上的番茄汁在我的舌尖滑来滑去，我大口嚼着，越嚼越香。</p><p>突然听到阿甘在说啥，我抬头看他，才发现桌子旁边又来了个人。阿甘看着我笑，我眯着眼看另一个人，认出了他就是之前书店那个家伙。</p><p>我静静看着他。他正和阿甘说话，「不巧不巧，我跟着你们过来的。」</p><p>啥玩意，这狗比跟踪狂吗。</p><p>我觉得这事蹊跷，然后往嘴里塞了口面。</p><p>他又说道，「我是书店门口那只猫哇。」</p><p>啥玩意？我挑眉，又多看了他一眼。突然想起确实见到他的时候都没注意到猫，而且那只猫也特别怪……怎么咬人呢。我心脏蹦蹦跳，不会是什么超常的展开吧。然后把煎蛋夹起来咬了一口。</p><p>阿甘笑得有点开心，「你这人有点意思，我们俩又不是老鼠。」</p><p>「我不追老鼠……」这时候饭馆老板过来问他要吃啥，他说「和他俩一样。」</p><p>「追番茄鸡蛋面吗？」我把面吃完了，正在喝汤。鼓起勇气向他搭了句话。这面真不赖，连汤都这么香。</p><p>他转头看向我，说「你也挺有意思。」</p><p>我不答话，继续喝汤。</p><p>「我在收藏那套漫画，就差你们拿走那本了，卖给我吧。」</p><p>我疑惑地盯着他。</p><p>他解释说「老实说，我不大好意思和陌生人说话，实在是想要那本漫画才鼓起勇气来找你们的。下午我本来让弟弟帮忙找你们，可是他说你们拒绝了……我心想还是亲自来，诚恳点好。」</p><p>我还是有点糊涂。</p><p>阿甘问道，「你是双胞胎？」</p><p>「对，我双胞胎弟弟。」</p><p>我明白了，又抬头打量他，着实分不清楚他和之前那人的区别。两人的穿着我也没怎么注意，好像都穿着白 T恤……我想起阿甘房间里挂着的 T恤，啊……这个季节流行 T恤啊……</p><p>阿甘笑着说，「你弟弟还有点调皮。」</p><p>他问怎么了。然后我把包里的那张纸条递给他，向他讲了他弟弟和我们发生的事。</p><p>他脸比我下午还红，不停向我们道歉。「这家伙对你们没有恶意，是借此在损我呢。他一直对我收集这些漫画不大感冒……这家伙……」</p><p>其实也只是件小事，我宽慰他说没啥，懂你懂你，然后从包里把那本漫画拿出来递给他。</p><p>他看着封面说，「没错！就是它！」不断感谢我们，说着要给我们钱。</p><p>阿甘对他说没关系，漫画才两块钱，他弟弟下午给了五块呢。</p><p>我也放松不少，便问他，「这种漫画……网上不是很多吗？还是新的，为啥非去旧书店里找。」</p><p>他突然正经，回答说，「这不一样，收集的乐趣不在于收集完，摆在书架上的那一瞬间 —— 然后再也不管了。收集的乐趣在于这种收集的过程。」</p><p>我是搞不懂这些人，这种杀时间的方式在我看来还不如打游戏。</p><p>刚好面条端来了。他拌了几下，说「就像吃面条，其实在吃第一口的时候就已经满足了。」</p><p>他吃了一大口，面色一变，又忙着挑了一筷子吃下去。</p><p>我懂他这种感觉。</p><p>「哈哈，味道不错。这个例子不恰当……这样说吧，你们俩一周前约好了去吃肉，然后这一周就在期待中度过了。但是实际开始吃肉时，第一口肉到了嘴里，快乐其实就已经达到了高潮……你懂我意思吧。」</p><p>我认真体会了下他说这个场景，好像能明白点了。</p><p>「如果我们把吃肉当作终点，很快就没快乐了。但是如果你把这种期待当作快乐的来源，你就可以快乐很久。」</p><p>阿甘接着说了句「你说你在下午四点来，我从三点钟开始就感觉到快乐。」</p><p>那家伙改挑为嗦，嗦了一大口面。「没错没错，就是《小王子》里说的那种感觉。」</p><p>我觉得他们说的有点抽象了，这和王子有啥关系。</p><p>我接着之前和阿甘聊的，问他，「这算是你的爱好吗？」</p><p>他一边吃面一边回复，「不算不算，没到那种程度，就是消磨时间而已。」</p><p>呵呵，还真是杀时间，现在的家伙怎么都这么闲，都不奋斗的吗？</p><p>「我觉得要在一个领域有所沉淀，才能称为爱好。我只是单纯地享受这种过程，算不得爱好。」</p><p>阿甘应道，「确实，仅仅说自己喜欢跑步就能塑造出阳光男孩的形象吗？那也太廉价了。」</p><p>「没错没错……」</p><p>我突然想起自己在简历的爱好一栏写的就是「喜欢跑步」，老脸再次一红，看样子回去得修改一下。</p><p>两人聊了半天，我也插不上话，没多久我就开始打哈欠了。</p><p>过了会两人留了个联系方式告别，这时才知道原来这家伙就是旁边这所学校大二的学生。他以为我俩也是这里的学生，不然不会在这吃饭。阿甘回复说我们是社会人啦，这边比较便宜所以来这吃饭。</p><p>回去的路上我问阿甘这是哪所学校，阿甘说了个名字，我吃了一惊，原来这就是那里呀。</p><p>到了阿甘住处的楼下，我又看见只橘猫，唤了两声咪咪，它不理我，我便掏出手机拍了张照片。拍完后，它突然朝我很凶地喵呜了一声。这猫和下午那只一定也是双胞胎。不可爱不可爱。</p><p>心里这么想着，便碎碎念出来了，「怎么到处都是双胞胎……」</p><p>阿甘听到了，爽朗地笑了笑：「搞不好自始自终就是他一个人呢。」</p><p>其实我心里想的是猫来着，不过他既然专门回应我，我也不好意思纠正。</p><p>阿甘又说：「毕竟他又没自己承认。我问他是不是双胞胎，他才回答的。说不定只是顺着我的话说罢了……」</p><p>我心脏多跳了半拍，感觉就像阿甘看出了我的敷衍一样。然后转头想起自己以往的种种，那时遇到的家伙们是不是也在敷衍我的愚蠢呢？而且我还带着优越感沾沾自喜。</p><p>像是想到啥可怕的东西，我拉回思绪，拿出手机给他看刚刚拍的猫片：「这和下午那只估计也是双胞胎。」</p><p><img style="width:40%" data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/life/2020/07-16/cat.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 故事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 故事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>也有这样的时候</title>
      <link href="/2020/04/20/hu/"/>
      <url>/2020/04/20/hu/</url>
      
        <content type="html"><![CDATA[<p>也有这样的时候嘛，嗯，也有这样的时候。太阳从远处落下，安静和黯淡的暮色铺满屋子。眼睛在努力地适应环境，身体却懈怠着准备融入黑。直到大脑于此刻意识到这点，恍然间便产生了一股怯意，周遭的事物也突然有了距离。那是怎样一种感觉呢。外物与自我的界限突然清晰起来了，各种各样的事情似乎变得无关紧要。</p><p>似乎这样的陌生才是本应该有的样子，可记忆的惯性却总在提醒一切都是「变得」如此。本不是这样，不该这样。</p><p>这是怎样的感情呢？比喜悦、悲伤来得强烈，困惑和愤怒也不敢与之抗衡。它不像普通的情感仅仅包裹我的心脏，也不似幸福在五脏间循环一股暖流，它有点像风拂过赤裸的身体，有点像血液在流动，可它又安静地躺在我的身体里面，在我的四肢里舒展，从我的两肋跨至指尖，从额头探向眉梢。它像是在修补，又像在啮蚀。</p><p>似乎是少年时靠着围栏坐在操场旁的草地上两个瞬间的混合。闭着眼，阳光展在思绪上；睁开眼，身体被喧嚣挤压得几无容身之处。</p><p>呼，想起了一个词汇，可那对我来说太过锋利了。这不算痛苦，也不是良药，只不过是又一个安静的傍晚。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从《异度侵入》谈谈故事的结局处理</title>
      <link href="/2020/03/26/id-invaded/"/>
      <url>/2020/03/26/id-invaded/</url>
      
        <content type="html"><![CDATA[<p>还是声明一下，本文作者只是个爱好者，以下纯属胡说八道。</p><p>导航：<a href="#%E5%BC%82%E5%BA%A6%E4%BE%B5%E5%85%A5">异度侵入</a></p><hr><h2 id="目标-冲突-设定"><a class="markdownIt-Anchor" href="#目标-冲突-设定"></a> 目标、冲突、设定</h2><p>我觉得一个故事要吸引人，核心有两点：目标与冲突（或者用『矛盾』这个词好点？）。核心外则还有一点：设定。</p><p>比如「勇者救公主」的故事，目标就是「勇者救公主」，救到公主就结束了，他们后来结没结婚，婚姻生活有没有矛盾，这都不大重要。但有时候读者很关心，关心自己带入了情感的角色在故事外如何如何……作者有时候会说两句，有时候不会说。——毕竟这不是重点。</p><p>勇者拯救公主的途中发生的事情就是冲突了。「冲突」是个广义上的概念，途中打架这当然算冲突。但是你刚在新手村的时候，想要一把武器，于是去武器店找托尼，托尼说：「啊，我的朋友，当然没问题。不过你能帮我去找点材料吗？」——这也是「冲突」。</p><p>主角总有问题有解决。大问题是救公主，小问题是找材料。但是找材料是为了打造武器，救公主又是为了啥呢？</p><p>这就得引入「设定」了……</p><p>为什么非得救公主不可？因为这就是故事的设定。如果观众总是纠结于「设定」，那就获得不了乐趣了。</p><p>但是「设定」也不能乱来，总不能啥说不通的地方，都用一个「啊，这就是设定」来敷衍吧。<strong>所以我觉得一个故事的「设定」要尽可能地少，最好立足于一个「设定」，然后其它发生的一切都是基于此的推论——也可以说，故事要有一个根设定。</strong></p><p>这个「根设定」不管怎么胡扯都没关系，但基于此的推论一定要严格。举个例子：设定再怎么掰都行，可角色的反应得真实吧。</p><p>【剧透】</p><p>《自新世界》就是引入超能力这个设定后，世界的另一种走向。</p><p><a href="/2018/01/17/lai-zi-xin-shi-jie/">《来自新世界》读后感</a></p><h2 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h2><h3 id="基础"><a class="markdownIt-Anchor" href="#基础"></a> 基础</h3><p>按照我上面的想法，一个故事可以这样发展：我叫王小明，我被设定为打败大魔王。可是在这之前，我要先起床，去刷个牙，不过我没有牙膏了。（为什么不刮胡子，因为刮胡子不重要。）小卖部的老板娘让我帮她送信给隔壁兰花镇上的李老头才卖我牙膏。我来到李老头家，发现他正在和一个妇女打情骂俏。现在我在兰花镇上触发了支线剧情（任务）……</p><p>这样的故事有趣吗？似乎并不……</p><p>我最近看过的最符合这种结构的就是《星球大战9：天行者崛起》了……</p><h3 id="创新"><a class="markdownIt-Anchor" href="#创新"></a> 创新</h3><p><strong>第一种创新</strong>：人物，故事情节的创新。人物：比如人物属性，傲娇、病娇……；故事：比如升级打怪流、扮猪吃老虎流、无敌流……</p><p>这又涉及到体裁了。我之前写过一篇：<a href="/2019/05/18/oh-yeah/">乱侃作品的形式与创新</a> 。</p><p><strong>第二种创新</strong>：目标创新：拯救公主已经不流行了，我们绑架公主好了；冲突创新：打坏蛋已经不流行了，我来当坏蛋，阻止勇者救公主；设定创新：华丽胡哨的设定。吃人、吃草……</p><p><strong>第三种创新</strong>：添加变量。</p><p><strong>其它</strong>：还有基于这些核心的不同的表达方式：比如套娃其实就是通过隐藏信息营造出「设定的翻转」。</p><p>像是勇者一心打败恶龙，后来发现恶龙是之前的勇者变化的。虽然这表现得像是翻转设定了，但事实上只是创作者一开始只给出了部分设定的信息而已。</p><p>许多所谓的「烧脑电影」就是这种操作。不到最后猜不到结局，其实是因为不到最后不知道创作者的完整设定。</p><p>还有一点：<strong>观众的解读必须建立在已有的信息之上。不然的话我觉得每个故事都可以这样解释——都是我胖虎做的一个梦。</strong></p><h3 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h3><p>非要说的话，几乎所有的故事都有着相似的结构。有的人喜欢说「<strong>本质上不就是 XX</strong>」，我讨厌这种说法。</p><p>虽然结构相似，但我们可以<strong>为故事加入一些变量</strong>。一个最常用的变量就是<strong>悬念</strong>。</p><p>比如工业化到位的电视剧最喜欢在每集末留下一个坑（有没有想起这样的电视剧？😄）。</p><p>还有的则是在开头引入悬念。</p><p>比如把上面的故事改一下：我叫……我叫什么来着？我是谁？我忘记自己的名字了。可是我记得自己要去打败大魔王。那就去做吧！也许打败了大魔王我就能找回自己。</p><h3 id="悬念与设定"><a class="markdownIt-Anchor" href="#悬念与设定"></a> 悬念与设定</h3><p>但有时候故事里的悬念会和设定冲突。</p><p>比如开局就失忆这种，肯定是悬念，最后一定会找回记忆。</p><p>但有的就不那么确定。</p><p>比如：丧尸。</p><p>有时候丧尸是设定，有时候又是悬念。比较差的操作是：你以为这是悬念，没想到最后是设定。</p><p>【剧透】</p><p>我对《万能钥匙》的观感不大好。因为我一直以为最后会给个解释，没想到就真的只是巫术……</p><p>【剧透】</p><p>我要吹一下《进击的巨人》。本来我以为「巨人」是个设定，没想到「巨人」是个悬念，后面揭露了巨人的来源。</p><p>【无剧透】</p><p>《一拳超人》里老师一拳无敌也是设定。要是你觉得「我觉得一拳无敌太不合理了，看不下去……」</p><p>不瞎胡闹嘛……</p><h3 id="根设定"><a class="markdownIt-Anchor" href="#根设定"></a> 根设定</h3><p>比如各种「历史虚无主义」类的历史小说，引入一个变量（设定）——现代人回到古代，或者某个历史节点要是这样一下……通过一个变量的引入，蝴蝶扇动翅膀，推演未来的各种可能……</p><p>【剧透】</p><p>又拿《进击的巨人》举例子，我太喜欢这部作品了。按现在作者给出的线索，故事的「根设定」就是一个导致尤弥尔产生变异的微生物。——所以我觉得我们可以探讨这部作品其它逻辑不通的地方，但不能说「什么微生物可以……为什么这么巧」这种话。基于这个「根设定」，由于尤弥尔当时的愚昧以及后来基于人性所发生的一切事情……故事就这样推演至现在。</p><h2 id="一些结局处理"><a class="markdownIt-Anchor" href="#一些结局处理"></a> 一些结局处理</h2><p>好，让我基于上面内容去分析一些片子。</p><h3 id="寄生虫与小丑的结局"><a class="markdownIt-Anchor" href="#寄生虫与小丑的结局"></a> 寄生虫与小丑的结局</h3><p>【剧透】</p><p>《寄生虫》与《小丑》探讨了类似的主题：两个阶级之间的冲突。</p><p>这个话题有点大，我讲不好，只能随便谈谈……</p><p>就像哲学讨论最后都回到了「人生的意义」，社会讨论最后都回到了「阶级冲突」。我觉得《寄生虫》与《小丑》最后都没回答这个问题——当然，这也不是电影的目的。</p><p>《寄生虫》最后提供了一段暴力戏——这看得我很压抑。创作者指出了某种「对立与冲突」，但这暂时是无解的。这种无力就让人很压抑。我不喜欢这种处理。《寄生虫》最后以个人的暴力作为宣泄——既然回答不了这个问题，那就绕过去吧。</p><p>而《小丑》的结局处理则是——我知道这个问题无解，所以我在混乱中起舞，展示这个世界的荒谬。</p><h3 id="理想化的结局处理"><a class="markdownIt-Anchor" href="#理想化的结局处理"></a> 理想化的结局处理</h3><p>这问题太大了，那咋办？让主角来承担一切，然后世界和平……</p><p>《罪恶王冠》、《夏洛特》、《叛逆的鲁鲁修》、《魔法少女小圆剧场版》……</p><p>这太理想化了。</p><p>《死生永生》里最后将整个宇宙的物质还回去时，主角偷偷藏了一块……</p><h3 id="适时完结"><a class="markdownIt-Anchor" href="#适时完结"></a> 适时完结</h3><p>美剧动不动整个好多季，挖了一堆坑最后不填烂尾。而英剧就比较好……适时完结。</p><p><strong>我只把我能掌握的东西讲好就行了……</strong></p><p>比如本文好多东西我自己根本不懂，还要强行胡吹……这就是反面教材。</p><h2 id="异度侵入"><a class="markdownIt-Anchor" href="#异度侵入"></a> 异度侵入</h2><p>【剧透】</p><p>其实前面我提到「目标、冲突、设定」这些，有点事后诸葛亮的感觉，或者说从创作者的角度提出的吧。因为我都是基于完整地看完一部作品后，对它进行分析，发现总能强行找出这些东西……</p><p>但其实从观众的角度，在看片的过程中，有些东西是意识不到的……</p><p>如果非得给《异度侵入》找个目标，那可能就是「解决 JW 的案件」。从故事的角度，回过头来，前面七集都只是对「JW 案件」的引入……</p><p>但是看的过程中观众会意识到这些吗？至少我没有……</p><p>虽然 <strong>我觉得观看这类作品的一大乐趣就在于观众和创作者的博弈。</strong> 观众猜到创作者的意图，甚至还能扩散想到些其它的东西，从中感到揭秘的快感。</p><p>对创作者来说，这其实挺难吧。既要让观众不至于明显猜出答案，又不能揭示的时候过于唐突……有的推理作者很大胆，在最后的推理阶段邀请读者一起 PK……</p><p>《异度侵入》一直在向观众提供线索——提供线索的同时又制造了悬念。比如角色提到了「井」，好，观众知道有「井」这么个东西了。那「井」是干啥的呢？</p><p>比如第一集就提到了「只有杀人犯才能进入井」。哦，知道了。等等，那主角是杀人犯？主角为什么会是杀人犯？杀人犯怎么在帮警察……之类的。</p><p>其次，《异度侵入》在解决「冲突」之后又马上制造新的冲突。比如第一集末找到凶手了，好家伙，妹子又被抓走了。所以下一集一开始我们就有了期待——拯救妹子。</p><p>前两集引入「次设定」——看完后我们都知道，「井」、「思想粒子」这些都是基于「飞鸟井木记」这个工具人（根设定）产生的……虽然我觉得引入「一个无辜的少女」这种设定有点老套……但好歹说得过去……</p><p>如果我们把这些「次要的设定」当作「根设定」，那前面这六集不过是讲了三个在这种设定下的探案故事。三个故事也不能说非常巧妙……</p><p>前面只是觉得这个动画比较新鲜，能看下去。到了第七集末进入主线，我才萌发了一种想知道后面会怎么发展的期待。</p><p>后面算是基于《盗梦空间》的另一个思路。我在<a href="/2020/03/08/animation/">一部动画鉴赏指南——《别对映像研出手！》</a>提到《盗梦空间》里有一段旅馆的戏完全致敬了《红辣椒》，《异度侵入》第十二集弯曲的轨道则明显致敬了《盗梦空间》……</p><p>就该这样！互相借鉴，良性发展！</p><p>揭露这一切原来源于「飞鸟井木记」的超能力时我有种上当的感觉……怎么又超能力就完事了…… <strong>我当时还抱着希望，心想别急，这是井中井里的梦，不一定是真实的……</strong></p><p>好，最后谈结局。</p><p>最后的 Boss 战不谈它，我觉得重要点在于对「飞鸟井木记」的处理。</p><p>下面这样的结局如何？</p><p>比如飞鸟狂暴，世界凉凉，主角幸福地生活在井中井世界。</p><p>比如飞鸟凉凉。后面怎么发展？不管它了……</p><p>比如飞鸟回到液体里……</p><p>飞鸟应该躺液体里，这对故事里的世界来说是个好结局，但对飞鸟有点残忍。——于是结局给观众了一个期待，飞鸟看到一个场景，主角面向她，说道：「终于见到活着的你了。」</p><p><strong>如果井中井中梦揭露的线索是真实的</strong>——飞鸟能预知未来，那我们就抱着这个期待让故事结束吧。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 观与感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 看片所想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>尝试折腾了下用 Hexo-Next-Theme 搭建的博客</title>
      <link href="/2020/03/23/hexo-next/"/>
      <url>/2020/03/23/hexo-next/</url>
      
        <content type="html"><![CDATA[<h2 id="只留必要依赖"><a class="markdownIt-Anchor" href="#只留必要依赖"></a> 只留必要依赖</h2><p>配置文件 <code>theme/_config.yml</code> 中不必要的依赖不要添加。</p><p>比如对我来说，3D 效果之类的都没必要，所以 <code>three.js</code>、<code>canvas_nest.js</code> 啥的都不必开启。</p><p>最后用到的有：</p><ul><li>quicklink：预加载用户视区中的链接</li><li>pjax：站内页面刷新</li><li>lazyload：图片懒加载</li><li>mediumzoom：查看大图</li></ul><p>quicklink 我没啥感觉；</p><p>pjax，由于网络原因，我偶尔会觉得浏览器（网页）卡死了；</p><p>lazyload 和 mediumzoom 有点效果，不过虽然我这也没几张图就是了……</p><h2 id="能上-cdn-的先上-cdn"><a class="markdownIt-Anchor" href="#能上-cdn-的先上-cdn"></a> 能上 CDN 的先上 CDN</h2><p>前提：我把博客放 Github Pages 的。</p><p>看的这篇文章，尝试了下：<a href="https://chanshiyu.com/#/post/94" target="_blank" rel="noopener">JsDelivr 全站托管</a></p><h3 id="js-css-images"><a class="markdownIt-Anchor" href="#js-css-images"></a> js、css、images</h3><p>在 <code>theme/_config.yml</code> 下修改 <code>Assets</code>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">css:</span> <span class="string">//cdn.jsdelivr.net/gh/hqweay/hqweay.github.io@master/css</span></span><br><span class="line"><span class="attr">js:</span> <span class="string">//cdn.jsdelivr.net/gh/hqweay/hqweay.github.io@master/js</span></span><br><span class="line"><span class="attr">images:</span> <span class="string">//cdn.jsdelivr.net/gh/hqweay/hqweay.github.io@master/images</span></span><br></pre></td></tr></table></figure><h3 id="avater-favicon"><a class="markdownIt-Anchor" href="#avater-favicon"></a> avater、favicon</h3><p>favicon、avatar 不包含在 images 里，需要单独改下。</p><p>images 仅包含文章引用的本地图片。</p><h3 id="本地搜索"><a class="markdownIt-Anchor" href="#本地搜索"></a> 本地搜索</h3><p>如果开启了本地搜索，加载 <code>search.xml</code> 也不会走 CDN。</p><p>手动改下 <code>js/local-search</code> 里 <code>fetchData</code>。如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">const</span> fetchData = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">-   fetch(CONFIG.root + searchPath)</span><br><span class="line">+   fetch(<span class="string">"https://cdn.jsdelivr.net/gh/hqweay.github.io@master/"</span> + searchPath)</span><br></pre></td></tr></table></figure><p>有变动需求可以将 <code>https://……</code> 这一串配置在 <code>_config.yml</code> 或 <code>theme/_config.yml</code>。</p><h3 id="字体"><a class="markdownIt-Anchor" href="#字体"></a> 字体</h3><p><strong>感觉没必要配置。</strong></p><p>需要的话可以用 <a href="https://sb.sb/blog/css-cdn/" target="_blank" rel="noopener">前端 CDNJS 库及 Google Fonts、Ajax 和 Gravatar 国内加速服务</a> 这位大佬的。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Uri of fonts host, e.g. //fonts.googleapis.com (Default).</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">//fonts.loli.net</span></span><br></pre></td></tr></table></figure><h3 id="各种依赖"><a class="markdownIt-Anchor" href="#各种依赖"></a> 各种依赖</h3><p>在 <code>theme/_config.yml</code> 的 <code>vendors</code> 配置。</p><p>也全用 <code>JsDelivr</code> 的比较好。</p><p>我用到的一些依赖：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主题样式为 minimal 时，显示侧边栏信息会用到。</span></span><br><span class="line"><span class="attr">anime:</span> <span class="string">//cdn.jsdelivr.net/npm/animejs@3.1.0/lib/anime.min.js</span></span><br><span class="line"><span class="comment"># 图标。（比如侧边栏的 social links）——如果不用 icon，那就不必引……</span></span><br><span class="line"><span class="attr">fontawesome:</span> <span class="string">//cdn.jsdelivr.net/npm/font-awesome@4/css/font-awesome.min.css</span></span><br><span class="line"><span class="attr">pjax:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-pjax@0/pjax.min.js</span></span><br><span class="line"><span class="attr">mediumzoom:</span> <span class="string">//cdn.jsdelivr.net/npm/medium-zoom@1/dist/medium-zoom.min.js</span></span><br><span class="line"><span class="attr">lazyload:</span> <span class="string">//cdn.jsdelivr.net/npm/lozad@1/dist/lozad.min.js</span></span><br><span class="line"><span class="attr">quicklink:</span> <span class="string">//cdn.jsdelivr.net/npm/quicklink@1/dist/quicklink.umd.js</span></span><br></pre></td></tr></table></figure><h3 id="感觉没效果啊cloudflare"><a class="markdownIt-Anchor" href="#感觉没效果啊cloudflare"></a> 【感觉没效果啊】Cloudflare</h3><p>域名通过 Cloudflare 解析，可以设置全站用 Cloudflare 的 CDN。</p><p>我试了下，然后通过 <a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener">PageSpeed Insights</a> 测试，跑到 99 分了……</p><p>但是感觉没啥用，我使用的网络下，甚至比直接托管到 Github 还慢……（不知道是不是错觉）</p><h3 id="感觉没效果啊netlify"><a class="markdownIt-Anchor" href="#感觉没效果啊netlify"></a> 【感觉没效果啊】Netlify</h3><p>用 Netlify 托管，效果差异也不大。</p><p>PS：Netlify 绑定自己域名时会需要一个 <code>_redirects</code> 文件。把该文件放 <code>source</code> 下，默认还不会上传至仓库，因为 Hexo 把以 <code>_</code> 开头的文件夹和文件忽略了。</p><p>需要在 <code>_config.yml</code> 配置渲染时把该文件包含进来。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Include/Exclude Files/Folders</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"_redirects"</span></span><br></pre></td></tr></table></figure><h3 id="国内托管服务"><a class="markdownIt-Anchor" href="#国内托管服务"></a> 国内托管服务</h3><p>Coding 之类的。</p><p><s>此贴终结……</s></p><h2 id="字体配置"><a class="markdownIt-Anchor" href="#字体配置"></a> 字体配置</h2><p>字体的相关配置见：<a href="/2020/02/14/hexo-next-font/">Hexo Next 主题字体相关配置</a></p><h2 id="归档页做首页"><a class="markdownIt-Anchor" href="#归档页做首页"></a> 归档页做首页</h2><p>把 <code>layout/archive.swig</code> 改为 <code>layout/index.swig</code> 就行了。</p><p>不过注意此时首页的 <code>meta</code> 信息是 <code>archive</code> （归档）……</p><p>要做个清爽合格的首页，可以把原 <code>index.swig</code> 的 <code>meta</code> 信息拷贝到新 <code>index.swig</code> 下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; new index.swig (archive.swig)</span><br><span class="line"></span><br><span class="line">- &#123;% block title %&#125;&#123;&#123; __(&#39;title.archive&#39;) &#125;&#125; | &#123;&#123; title &#125;&#125;&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">+ &#123;% block title %&#125;&#123;&#123; title &#125;&#125;&#123;%- if theme.index_with_subtitle and subtitle %&#125; - &#123;&#123; subtitle &#125;&#125;&#123;%- endif %&#125;&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h2 id="静态资源压缩"><a class="markdownIt-Anchor" href="#静态资源压缩"></a> 静态资源压缩</h2><p>用的 <a href="https://github.com/chenzhutian/hexo-all-minifier" target="_blank" rel="noopener">hexo-all-minifier</a> 。</p><h2 id="open-graph"><a class="markdownIt-Anchor" href="#open-graph"></a> Open Graph</h2><p><a href="https://ogp.me/" target="_blank" rel="noopener">The Open Graph protocol</a></p><p>简单来说就是向网页添加一些 <code>meta</code> 标签。类似这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:image"</span> <span class="attr">content</span>=<span class="string">"http://ia.media-imdb.com/images/rock.jpg"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>Hexo 提供 <a href="https://hexo.io/docs/helpers.html#open-graph" target="_blank" rel="noopener">open_graph()</a> 可以向网页直接插入 Open Graph 信息。</p><p>遇到个问题，<a href="https://hexo.io/docs/helpers.html#open-graph" target="_blank" rel="noopener">open_graph()</a> 不能给网页设置一个默认的 <code>og:image</code>。</p><p>查看 <code>node_modules/hexo/lib/plugins/helper/open_graph.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> images = options.image || options.images || page.photos || [];</span><br></pre></td></tr></table></figure><p><code>ol:image</code> 优先从传入参数找，找不到就会用文章内容里的图片，<strong>还没有的话，那就没有了</strong>。</p><p>于是尝试加了个：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> default_image = <span class="string">"https://leay.net/images/avatar"</span></span><br><span class="line"><span class="keyword">let</span> images = options.image || options.images || page.photos || default_image || [];</span><br></pre></td></tr></table></figure><p>这样，前面都找不到，就会使用我定义的图片，而不是直接没有 <code>ol:image</code> 标签。</p><p>当然，为了维护，可以把默认图片的链接配置到 <code>_config.yml</code> 或 <code>theme/_config.yml</code>。</p><p>PS：我没仔细研究，可能 Open Graph 不建议本来就不带图片的网页在分享时带上一张图片？但做 SEO 往往建议每个页面都带上这些信息……</p><p><code>hexo-next-theme</code> 往网页插入 Open Graph 信息也是用的 <a href="https://hexo.io/docs/helpers.html#open-graph" target="_blank" rel="noopener">open_graph()</a>，所以如果有这个需求得改动 Hexo 的 <code>open_graph.js</code> 。</p><h2 id="其它"><a class="markdownIt-Anchor" href="#其它"></a> 其它</h2><h3 id="hexo-asset-image"><a class="markdownIt-Anchor" href="#hexo-asset-image"></a> hexo-asset-image</h3><p>下午发现自己博客上的本地图片显示出问题了，折腾了下，发现是因为之前开启了 hexo-next-theme 的图片懒加载。</p><p>hexo-next-theme 使用的图片懒加载插件是 <a href="https://github.com/ApoorvSaxena/lozad.js" target="_blank" rel="noopener">lozad.js</a> 。这个插件会将 <code>img</code> 的 <code>src</code> 属性改为 <code>data-src</code>。hexo-asset-image 没有这样的判断，所以不会处理。</p><p>改了下，想提个 PR 来着，发现原插件仓库已经被归档了……</p><p>于是 fork 了一份：<a href="https://github.com/hqweay/hexo-asset-image" target="_blank" rel="noopener">hexo-asset-image</a></p><h2 id="关于本博客的样式"><a class="markdownIt-Anchor" href="#关于本博客的样式"></a> 关于本博客的样式</h2><p>本博客的样式抄袭了 <a href="https://blog.k8s.li/" target="_blank" rel="noopener">木子</a> 和 <a href="https://www.elietio.xyz/" target="_blank" rel="noopener">零の轨迹</a>，两位大佬都公布了自己的源码，分别在 <a href="https://github.com/muzi502/blog" target="_blank" rel="noopener">muzi502/blog</a> 和 <a href="https://github.com/Elietio/Elietio.github.io" target="_blank" rel="noopener">Elietio/Elietio.github.io</a> ，有需要的可以参考。原理就是自定义 <code>custom_file_path</code> ，即 <code>source/_data/**</code> ，通过自定义的 CSS 覆盖默认样式。</p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 配置与操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置与操作 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《别对映像研出手！》</title>
      <link href="/2020/03/08/animation/"/>
      <url>/2020/03/08/animation/</url>
      
        <content type="html"><![CDATA[<p>本来想等更完再看的，但是网页逛着逛着就点进去了，于是看完了第一集。只看了第一集，冒出了些想法，不吐不快。让我发泄下吧……</p><p>打算命名为「致动画的一封情书」来着，但觉得情书这个说法实在太老套了，于是绞尽脑汁想到「一部动画鉴赏指南」这个题目。但我觉得这个题目还是挺切题的。其实对艺术的赏析源于两方面，一是观众自己的经历与学识，另一个就是对艺术创作门槛的了解。</p><p>现在的营销号以及许多受众带起来的风气就是 —— 试图找到赏析，或者说 XX 的捷径，以为评论时带几个专业术语 —— 或者说某种意义上的「黑话」，就觉得自己能占领优越感的高地。时常用「本质上不就是 XX」这种暧昧的话术表示自己早已看透一切。</p><p>其实我觉得明明问题很简单。你自己尝试一下构思并写篇故事，就知道小说创作的难处了；自己尝试原创一张画，就知道动画要绘制无数张这样的图并使之动起来有多难了；自己尝试去拍一段视频，就知道用影像表达有多不容易了；自己在视频站上传几次，就知道现在的审查到底有多么莫名其妙了。</p><p>但是我们不能奢求观众去主动了解创作的难处，也没有必要。<strong>艺术鉴赏的门槛应该由创作者或者组织者来解决。</strong> 就像景点前的导游，作品前的导言。某种程度上，创作者也应该起着普及与教育的作用 —— 这还没谈创作者应当拥有的人文关怀等。</p><p>如果创作者居高临下，艺术就变成了自嗨，甚至会导致在普通人眼里的污名化。</p><p>像是物理领域有很多大佬愿意写科普作品耐心地向我们普通人解释一些问题，这真的是一件好事。至于好处，随便就能举出几个例子来 —— 像是科普可以吸引许多人投入到这个领域、像是让公民觉得自己的税收没有白费、像是扫除伪科学……</p><p>比如「量子波动速读」这种东西……我真的是……</p><p>回过头来，《别对映像研出手！》这部动画在动画里也通过角色的台词表达出了动画创作的乐趣、困难等。但是《别对映像研出手！》这部动画是充满童真的理想主义作品，核心就是想象力与安利动画这种艺术表现形式。这与《白箱》这部主题为「商业动画制作」的理想主义职业剧不同。如果《白箱》是通过表现商业动画制作的困难来表达出动画制作不易以及歌颂这群动画制作者的话，《别对映像研出手！》则是纯粹地聚焦于「动画」这一表现形式。所以称它为「一封献给动画的情书」是绝对不为过的。</p><p>我之前写过一篇 <a href="/2019/05/18/oh-yeah">乱侃作品的形式与创新</a> ，里面非常浅薄地提到了我所理解的不同艺术形式它们不同之处。现在聚焦于动画创作，再胡说八道一下。</p><p>金敏的书籍《KON’S TONE 「千年女優」への道》在国内翻译为《我的造梦之路》，这可能可以作为一个评估动画这种形式的一个参考，即「造梦」。动画这种创作形式最为人称道的特性之一就有这一点。</p><p>《别对映像研出手！》第一话通过主角之口说出「<strong>就是在那时，我意识到了制作动画的人的存在。</strong>」</p><p>我们是什么时候意识到「制作动画的人存在」的呢？<strong>是遇到作画崩坏时吗？</strong>（笑）</p><p>我觉得可能是在感受到制作动画的人用心去圆动画这个梦的时候。</p><p>《白箱》里有一幕导演为了塑造美少女动画里少女的个性想要调整工期重新制作的场景。虽然我对这类东西的萌点欣赏不来，但还是为他们的讨论所感动。他们花了那么大的力气，只是为了塑造一个情感真实的世界 —— <s>以及赚钱。</s></p><p>没错，情感真实。二次元圈子里常提到说，虽然他们是纸片人，但蕴含着我们的情感。其实游戏、电影、同人创作……哪一个爱好不是这样呢？又回到了叔本华的哲学 —— 意义都是我们赋予的。</p><p>不过总有人试图强加自己的观点于别人的创作与喜爱之物之上。这点我曾今吐槽过好几次。😅</p><p>就像 OP 里唱的「喜欢就是喜欢，外行少插嘴。」</p><p><s>鼓掌！</s></p><p>其次，就是动画借角色之口为动画这种创作形式的宣辞了。</p><p>比如借大小姐之口说出的「动画师也是优秀的演员啊，不止是人类，风、自然描写、机械，都能做到。甚至能做出比真人实景更有表现力的画面！」</p><p>还有主角在第一集的播送会对友人解说《孤岛的柯南》（原型是《未来少年柯南》），其实也在借主角之口向观众普及。</p><p>动画费劲心思地造梦，就是为了让观众沉浸进去。类比演戏，当观众意识不到演员是在演，那就是最好的状态。反之，当观众意识到演员是在演的时候，那就完兔子了。我们普通观众沉浸在动画里，那就是最好的时刻。 —— 如果你愿意研究，还会发现每一处细节的深意。有些人因为感受不到便觉得创作者装神弄鬼 —— 这真的有点可惜。</p><p>但是反之。观看作品时最好搞清楚自己的目的。是为了享受还是为了挑刺？比如有些观众总能从一部作品里发现有趣的地方。也有许多挑刺（无贬义）流观众，喜欢讨论一部作品里的各种问题。</p><p>同时，也要认识到自己是为了享受还是要搞研究。比如影片《1917》中用了伪长镜头表现战争的压抑，但有的人看电影时就只顾着找哪里剪辑过，反而丢失了乐趣。</p><p>《别对映像研出手！》虽然是由漫画改编的动画，但要我说，这部动画本身就是动画才能表达出来的作品。或者说动画这种表现形式反过来又为它赋予了某种仪式感的意义。</p><p>比如当角色们在纸上绘画发挥想象力时，角色们毫无维和感地进入到了他们的想像世界。 —— 毕竟是二维进入二维。线稿这种<s>省经费</s>（误）的画面就堂而皇之地出现在了屏幕上。</p><p>影视创作也有类似的表现方式。主要分为两类，一类是把虚拟世界搬到现实，一类是把角色搬到虚拟世界。前者的话我只想到一个例子😂😂，《爱情公寓》里某集玩 CS。后者的话，有《安妮霍尔》里主角们化身为迪斯尼卡通人物，还有《废柴联盟》里主角们化身为定格动画人物 —— 那一集也成了定格动画集，以及主角们打像素画风的游戏 —— 那一集则成了像素动画集。</p><p>而拿这整部动画来说，这一个个剧中创作所构成的剧中剧的表现方式又毫无疑问在展现创作者对动画的热爱。比如《爆漫王》里作者为故事里的漫画创作了数种不同风格的漫画，《别对映像研出手！》在控制动画风格的同时，还需要控制剧中动画的风格。</p><p>这毫无疑问是只有具有热情与创意的创作者才能做到的事情。</p><p>说到这儿的话，又再提一下动画与电影的相互借鉴。就像动画里大小姐不想做演员，想创作动画，以及大小姐对动画辩护的台词。动画和电影有时候表现出一种竞争关系 —— 有的人觉得现在特效这么发达，已经可以代替动画表达想象力了。同时，它们也在互相学习。</p><p>我看到有评论说「要想制作出与他者不同的独特动画，便往动画的形式中加入更多属于电影的元素，从而丰富动画的表达。」</p><p>之前在 <a href="/2019/05/18/oh-yeah">乱侃作品的形式与创新</a> 提到过，这其实就是形式创新的方式之一 —— 借用其它艺术形式的内容。比如影视借鉴游戏的叙事方式 —— 分支结局之类的，游戏借鉴影视的表达手段 —— 现在 3A 大作里的高清 CG，宏伟音乐……</p><p>动画借用电影元素确实是创新的好方式，但并不仅仅是动画在借用电影，电影也在模仿动画。比如非常出名的一个例子：《盗梦空间》有一段是完全照着《红辣椒》拍的。</p><p>我在 <a href="/2019/12/01/the-weathering-with-u">新海诚与恐怖片 —— 胡侃《天气之子》</a> 也提到，男女主第一次到屋顶时，有一个绕着人物旋转的广角镜头。动画和电影的区别之一也在这 —— 动画与电影虽然都有分镜，但创作时电影真的有一个镜头，而动画则不然。<strong>我不是专业的，放肆地说一下。</strong> 在定义中，电影的时间是真实存在的，而动画则是把运动的画面拿来表示表达时间。</p><p>可能是技术发展吧，动画利用三维动画技术应该能很容易表现《天气之子》里这种效果。</p><p>谈到利用技术，之前《辉夜大小姐想让我告白》的书记舞不是有许多人感叹作画牛皮吗。就我观察（<strong><s>身边统计学开始了</s></strong>），似乎舞蹈这种动画非常容易让专业人士感慨，可能难度的确很大。但我作为一个普通观众确实不知道厉害在哪。😂<strong>毕竟技术方面我不懂</strong> 。不过之前看《维度战纪》时，还是被 OP 里主角的街舞惊呆了，动画也能画出这样的效果吗？ —— 大叔在 OP 里的装逼风确实很帅。当时在 Anitama 上看到过一篇文章，说道这确实有点超出人类作画时想象力的极限了，实际上作画时似乎用到了真人动作捕捉。</p><p>PS：记不大清，可能描述有错。</p><p>《别对映像研出手！》应该会是一部改变观众看动画体验的作品，通过剧中剧传达出来动画制作的哲学，一定会使一部分观众重新思考自己看过的动画，开始在观看动画时想像创作者会是怎样的心情，开始考虑作品的精神内核。</p><p>想象力是野性的，人类生来便有。但似乎渐渐地，想象力成了小孩才有的特权。可能只有像是这部动画里的小孩，和一部分幸运的大人还拥有这种能力吧，结合亦是生来有之的表达欲，得以自由地创作。</p><p>（：不过其实我都是在瞎吹，毕竟我才看了一集。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 观与感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 看片所想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标题取为我也不知道自己胡说八道了些啥好了</title>
      <link href="/2020/02/21/self/"/>
      <url>/2020/02/21/self/</url>
      
        <content type="html"><![CDATA[<p>每当我自以为是地尝试去思考些什么东西，就会花大量的时间纠结这玩意到底是个什么东西 —— 钻牛角尖于它的定义以至于忘记自己的目的、甚至因自己的无知而陷于自我否定。我如果不肯下工夫深入，无论我再怎么瞎想，最后得出的结论也只能如盲人摸象。这种乱吹牛皮导致的后果就是表现得没有基本常识。</p><p>不过也许我不是专业人士，不能用专业的术语阐述定义，但我至少可以描述出那些事物不是什么。如果每个人都能够承担一份寻求真理的责任，贡献出自己的一份思考，说出「至少这样是不对的」，最后也定能得到一个接近正确答案的结果来。</p><p>之前在短视频上看猫猫狗狗，被推荐了不少训宠的内容，才后知后觉以往看到的许多动物令人惊讶的人性化行为都是训练的结果，而且原理似乎都很简单 —— 利用奖赏或惩罚让动物形成条件反射。</p><p>但如果一所承担着启蒙责任的机构只会威逼与利诱，那它不更像是搞驯化的吗？又或者对于某些人来说，驯化和搞教育其实是一回事？</p><p>我一直以为主动把自己归类于某个群体是一种很小众的自嗨行为。当我们拿「标签」来说事的时候，还有人会觉得自己并不属于某个标签。没错，人怎么会属于标签呢？应该是我们拥有标签才对。必须要注意，<strong>我们才是主体</strong> ，我们掌握着主动权。<strong>那些标签也许能展现我们某个方面的特质，但它们并不能代表我们。</strong></p><p>但是为何一旦谈到群体，就变了呢？在现在的语境里，标签和群体真的有什么不同吗？为什么我们不在这个划分的群体里，就在另一个划分的群体呢？</p><p>也许我们只是无意识地进行着某种 <strong>科学仪式</strong> 。但先退几步来说，群体又能代表一个个体几分呢？</p><p>当我对网民这个群体进行观察的时候，发现这个群体像是一种没有记忆的「生物」。「先博关注获得流量再删贴装没发生过」这样的戏码此起彼伏。可我自己不也是网民之一吗？难道我会承认自己是一个没有记忆的生物吗？就是我这样没有记忆的家伙构造出这个令人恶心的庞然大物吗？</p><p>这种整体的平衡能代表个人吗？难道是因为我们每个人在互联网上的行动都暗中修改了别人的记忆吗？</p><p>我有时候在高楼上看公路上的行人与车来车往，会觉得大家都很笨拙。不过这种上帝视角带来的感悟又能给身处其中的人多少价值呢？毕竟我一边走路一边看手机时会觉得开车的家伙根本不懂驾驶，但自己骑着小单车时又觉得边走路边玩手机的家伙都是智障。</p><p>《人类简史》里大意提到 <strong>正是人类对于群体的想像力才有了我们的今天。</strong></p><p>也许确实如此。而且如今基于互联网，它们可以收集到更多群体活动的信息，以此反思 —— 或者。</p><p>总而言之，作为一个普通人，如今我们大多数人都可以方便地了解到「What」 —— 以及基于这个「What」的各种蜚语与谣言。<strong>谣言蜚语对一个群体可能有一定影响</strong> ，但是作为个体来说，我们不应该深陷于「到底哪条消息是谣言」这种细节问题。我们能做的，应该是 <strong>学着在信息中寻找事实与真相。</strong></p><p>当然，有的人可能认为 <strong>自己难得劳神，等待专业人士公布真相就好了。</strong> 这些观点不在我的讨论范围内，我就不乱说了。其次，还涉及到信息渠道与取舍。我也不大懂就不多说了。</p><p>这种「做好自己」的做法并不是犬儒与精致的利己，毕竟多一个人这样做，至少信息里就会少掉许多噪音，所谓的谣言什么的也会少很多。这样实际上等于把公共责任分担到了每个人头上。</p><p>而在这基础之上呢，应该多了解点一个概念的产生是为了解决什么问题 —— 即「Why」。同样的，还有「How」。但我觉得作为我这种普通人来说，又不搞研究，没啥必要了解「How」。</p><p>了解到了「Why」，我们就能超脱于某个概念之上了。</p><p>举个正能量点的例子：政府的目的是为了组织协调人类，维护起我们的想像。难道西方的政治体制就是唯一的解决之道吗？</p><p>诸如此类的，对吧？</p><p>就拿上面的「标签」来说，要我说，这玩意就是应用提供商为了 <strong>控制</strong> 用户，为了给我们做推荐 —— <strong>诸如此类</strong> 的东西，而搞出来的。我们为了这样的目的，当然可以去试试打标签 —— 但如果到了把「标签」当作目的的地步，是不是就该歇一歇了？</p><p>比如应试是为了选拔，到把应试当作目的。</p><p>比如某网站为了网站质量设立了一个门槛，到后来这个门槛却发展为大家证明自己是高质量用户的勋章 —— 而不管自己对这个网站是否真的有需求。这是我们身上普遍的毛病吗？从还不能温饱的年代没有一点缓冲过渡至互联网时代而形成的囤积癖、薅羊毛癖。</p><p><strong>并不是说这样不好。</strong> 当我们从群体的角度来看时，部分人 <strong>也许动机不纯但达到的表现</strong> 可以吸引更多的人向好。就像大家争着去做「高质量网友」，网络环境一定会有所改善。资本家通过捐款赢得良好的声誉，可以吸引更多的人去造福社会。</p><p><strong>不要过于揣摩别人的动机。</strong> 虽然这句话已经烂大街了，但我不介意再做一次复读机。崇尚圣人那套，不早该过时了吗？</p><p>问题在哪？问题在那本是为了鼓励大家向善 —— 而不是鼓励大家去监督别人。路不拾遗有许多种方式可以达到，苛刻的刑法、互相举报的环境，或者物质条件充分、较高的道德水平……</p><p>16 年的电影《火锅英雄》就讲了一个主角本来有些不正确的想法，但最后阴差阳错制止了一场银行抢劫案的故事。我挺喜欢这个故事的 —— 主角即便有过不好的念头甚至道德瑕疵，那也是最后「拯救世界」的英雄。</p><p>「鼓励人人做英雄的年代才会英雄辈出。」</p><p>罗素在《权威与个人》中也大意说过「『真理总会打败迫害』 —— 这只是一个人类代代重复的善意的谎言之一。只不过总有明智的人会发现真理，而他们恰好生活在一个能接受这些真理的时代。」</p><p>有些人似乎很喜欢把「自己与群体」的关系理解为「自己与别人」。先不管是非对错，我先占据道德的高地再说。</p><p>一方面把批评群体的言论当作批评自己，另一方面以为维护群体的方法就是质疑别人。</p><p>但质疑 —— <strong>监督本身也不是问题</strong> ，对吧。有论据的监督和有论据的批评同样重要。同时，推崇正义的人也必然要承担反对派利用正义所获得的权利质疑正义的声音。就像言论自由必然会面对部分人的「我不赞同言论自由」。 <strong>观点没有对错之分，所有不必强求共识。</strong> 如果不承认这点，我看那些推崇的人自身就没搞懂自己所坚持的东西。 好在事实有真伪。 <strong>一个只会反对而拿不出论据的反对者，又有何惧？</strong></p><p>毕竟不管在哪，都有哗众取宠的人。 我敢保证，有些表达观点的人根本就不晓得自己在说什么。 为什么我这么确定？<strong>因为我自己就是这种人</strong> 。我什么都不懂，我也敢在这比比赖赖，我重拳出击……</p><p><strong>毕竟这是我自己的地盘。</strong></p><p>你反对公共空间里的某条言论，好歹自己去公共空间表达吧……在人家那比比赖赖算啥……</p><p>又扯远了，回到上文谈群体。立足于个人的时候，<strong>总是觉得自己所处的群体如何如何</strong> 实际上是自我的 <strong>一种逃避</strong> 。</p><p>就像知乎体励志学里常说的 —— 你认识牛皮的人并不代表自己牛皮，对吧。</p><p>总是想着或者说着 <strong>我们这个群体如何如何</strong> ，有着悠久的历史、漂亮的发型……这有什么可骄傲的？</p><p>—— <strong>这当然值得骄傲。</strong> 前提是自己这么想想， <strong>而不是去和别人比较</strong> 。我也骄傲，因生长的这片土地、孕育我的文化土壤、一个相对和平的环境……可把这当作一个比较的资本时，似乎就表示我承认了自己一无是处所以才需要群体特征来自慰。</p><p>不愿意承担责任却享受着骄傲，这大概才是精致的利己吧？</p><blockquote><p>又不负责任地胡说八道了一堆……啊，这个标题起得有轻小说风格。</p></blockquote><p>[2020-02-21-21-57]</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Next 主题字体相关配置</title>
      <link href="/2020/02/14/hexo-next-font/"/>
      <url>/2020/02/14/hexo-next-font/</url>
      
        <content type="html"><![CDATA[<p>版本：Hexo 4.0、Next 7.0</p><p>搜索的一些文章里提及改动的地方挺多的，我乱试了一下，似乎并不需要那么复杂。不知道是不是我没搞懂。</p><p>可能是因为 Next 更新了一些配置简化了操作？总之记录一下。</p><p>PS：Hexo Next 的瞎几把优化可以看看这篇：<a href="/2020/03/23/hexo-next/">尝试折腾了下用 hexo-next-theme 搭建的博客</a></p><h2 id="相关配置"><a class="markdownIt-Anchor" href="#相关配置"></a> 相关配置</h2><p>先看主题配置文件 <code>_config.yml</code> 里与字体相关的配置项：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># CDN</span></span><br><span class="line">  <span class="attr">host:</span> </span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font options:</span></span><br><span class="line">  <span class="comment"># `external: true` will load this font family from `host` above.</span></span><br><span class="line">  <span class="comment"># `family: Times New Roman`. Without any quotes.</span></span><br><span class="line">  <span class="comment"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># external: 控制是否使用 CDN。</span></span><br><span class="line">  <span class="comment"># family: 字体样式。</span></span><br><span class="line">  <span class="comment"># size: 字体大小。默认为 1（16px）。</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Global font settings used for all elements inside &lt;body&gt;.</span></span><br><span class="line">  <span class="comment"># 全局配置，覆盖 &lt;body&gt; 标签里所有元素</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> </span><br><span class="line">    <span class="attr">size:</span> </span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for site title (.site-title).</span></span><br><span class="line">  <span class="comment"># 博客名字那儿</span></span><br><span class="line">  <span class="attr">title:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> </span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;).</span></span><br><span class="line">  <span class="comment"># 注意这是文章里的标题，而不是侧边栏的 toc</span></span><br><span class="line">  <span class="attr">headings:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="comment">#Roboto Mono</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for posts (.post-body).</span></span><br><span class="line">  <span class="comment"># 正文</span></span><br><span class="line">  <span class="attr">posts:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for &lt;code&gt; and code blocks.</span></span><br><span class="line">  <span class="comment"># 代码块</span></span><br><span class="line">  <span class="attr">codes:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br></pre></td></tr></table></figure><h2 id="挑选并配置字体"><a class="markdownIt-Anchor" href="#挑选并配置字体"></a> 挑选并配置字体</h2><p><a href="https://fonts.google.com/" target="_blank" rel="noopener">Google Fonts</a> 挑选一款字体，在配置里的 <code>family</code> 处添加即可。</p><p>例如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Noto</span> <span class="string">Serif</span> <span class="string">SC</span> </span><br><span class="line">    <span class="attr">size:</span></span><br></pre></td></tr></table></figure><p>如此配置之后，基于 hexo-next-theme 的博客就会全局使用「思源宋体」。</p><p>同理，配置代码块的字体也只需要挑选并覆盖相应配置即可。如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># ……</span></span><br><span class="line">  <span class="attr">codes:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Roboto</span> <span class="string">Mono</span></span><br><span class="line">    <span class="attr">size:</span></span><br></pre></td></tr></table></figure><p>其它可配置样式的覆盖详见上面的 <a href="#%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE">相关配置</a></p><h2 id="样式的高级设置"><a class="markdownIt-Anchor" href="#样式的高级设置"></a> 样式的高级设置</h2><p>主题提供的字体配置挺到位的，但仍然有限。</p><p>一是只能配置 global、title、headings、posts、codes 几处（其实也挺丰富了）；二是能配置切换字体，设置字体大小，但不能设置颜色等；三是字体只能设置一种 —— <strong>网页是支持多种字体按优先级展示的。</strong></p><p>这些问题，可以使用 Next 4.0 提供的「加载用户自定义样式的配置」解决。</p><p>道理很简单，就是用 Next 提供的自定义样式覆盖默认或者配置的样式。</p><p>在主题配置文件 <code>_config.yml</code> 里开启：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.swig</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.swig</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.swig</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.swig</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.swig</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.swig</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.swig</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure><p>然后在 Hexo 根目录进入 <code>source/_data/styles.styl</code>（若无则新建），添加自己想要设置（覆盖）的样式就好啦！</p><p>比如我要更改全局的字体颜色，就可以这样：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#2e405b</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS：同理，<strong>这里也可以覆盖博客的各种样式</strong>～</p><h2 id="font-family"><a class="markdownIt-Anchor" href="#font-family"></a> font-family</h2><p>字体设置默认使用的 CDN 是 <code>//fonts.googleapis.com</code>。如果从 CDN 上访问失败，就会默认使用如下的字体：</p><ul><li>Non-code Font: Fallback to <code>&quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, sans-serif</code></li><li>Code Font: Fallback to <code>consolas, Menlo, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, monospace</code></li></ul><blockquote><p>非代码的文字使用 <code>&quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, sans-serif</code>。</p><p>代码块使用 <code>consolas, Menlo, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, monospace</code>。</p></blockquote><p>浏览器要知道用什么字体，实际上是通过读取 CSS 属性 <code>font-family</code> <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>实现的。</p><p>在 Next 里，<code>font-family</code> 的默认值就是上面的两项。当我们在配置文件的 <code>font</code> 里添加字体后，被添加的字体就会被插入到 <code>font-family</code> 默认值的头部 —— 当 <code>font-family</code> 里配置了好几个值时，浏览器会优先使用排在前面的字体。</p><p>比如本站最后渲染出来的效果是这样的（你可以打开浏览器的调试窗口查看）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Noto Serif SC'</span>,<span class="string">"PingFang SC"</span>,<span class="string">"Microsoft YaHei"</span>,sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">code</span>, <span class="selector-tag">pre</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Roboto Mono'</span>,consolas,Menlo,monospace,<span class="string">"PingFang SC"</span>,<span class="string">"Microsoft YaHei"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而很可惜的是，Next 似乎无法在配置文件里 <code>font</code> 的 <code>family</code> 处配置多个字体。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无效配置</span></span><br><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Noto</span> <span class="string">Serif</span> <span class="string">SC</span> <span class="string">,</span> <span class="string">Noto</span> <span class="string">Serif</span> <span class="string">SC</span></span><br><span class="line">    <span class="comment"># family: [Noto Serif SC , Noto Serif SC]</span></span><br><span class="line">    <span class="comment"># family: "Noto Serif SC , Noto Serif SC"</span></span><br></pre></td></tr></table></figure><p>如果你想要利用 <code>font-family</code> 的规则<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>:或者 <strong>修改默认使用的字体</strong>，阔以直接到源码 <code>source/css/_variables/base.styl</code> 里修改。</p><p>如下面，修改 <code>$font-family-chinese</code>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Font families.</span></span><br><span class="line">- $font-family-chinese = "PingFang SC", "Microsoft YaHei";</span><br><span class="line">+ $font-family-chinese = "Noto Serif SC";</span><br></pre></td></tr></table></figure><p>Next 能加载用户自定义的样式，同样也能加载用户自定义样式使用的变量。然而同样比较可惜的是，自定义样式使用的变量里的定义（<code>source/_data/variables.styl</code>），<strong>不能覆盖变量默认定义的值</strong>（<code>hexo-next-theme/source/css/_variables/</code>）。但是你可以在默认定义里注释掉变量后，在自定义变量里重新定义并赋值。</p><h2 id="自定义样式使用的变量"><a class="markdownIt-Anchor" href="#自定义样式使用的变量"></a> 自定义样式使用的变量</h2><p>在主题配置文件 <code>_config.yml</code> 里开启使用自定义样式变量：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.swig</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.swig</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.swig</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.swig</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.swig</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.swig</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.swig</span></span><br><span class="line">  <span class="attr">variable:</span> <span class="string">source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="comment">#style: source/_data/styles.styl</span></span><br></pre></td></tr></table></figure><p>首先，在主题的 <code>source/css/_variables/base.styl</code> 下注释掉你想自定义的变量。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Font families.</span><br><span class="line">&#x2F;&#x2F;$font-family-chinese &#x3D; &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;;</span><br></pre></td></tr></table></figure><p>然后在 <code>source/_data/variables.styl</code> （若无则新建）添加自定义变量并配置（你刚刚注释掉的变量）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$font-family-chinese &#x3D; &quot;试试就试试&quot;;</span><br></pre></td></tr></table></figure><hr><p>我觉得 <code>source/_data/variables.styl</code> 的设计应该是为 <code>source/_data/styles.styl</code> 提供变量。像上面这样使用好像没啥必要。要说有点好处的话，就是方便了管理用户配置吧……</p><h2 id="googleapis-镜像"><a class="markdownIt-Anchor" href="#googleapis-镜像"></a> googleapis 镜像</h2><p>虽然许多文章里都提到说 <code>fonts.googleapis.com</code> 不太稳定，但我访问还挺顺利的……</p><p><code>fonts.googleapis.com</code> 的国内 CDN 比较少，只找到这么一篇帖子。</p><p><a href="https://sb.sb/blog/css-cdn/" target="_blank" rel="noopener">前端 CDNJS 库及 Google Fonts、Ajax 和 Gravatar 国内加速服务</a></p><p>用上面帖子里提供的 CDN，Next 的配置就可以这样：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">//fonts.loli.net</span></span><br></pre></td></tr></table></figure><h2 id="官方文档"><a class="markdownIt-Anchor" href="#官方文档"></a> 官方文档</h2><p><a href="https://theme-next.org/docs/theme-settings/#Fonts-Customization" target="_blank" rel="noopener">https://theme-next.org/docs/theme-settings/#Fonts-Customization</a></p><h2 id="如果修改不生效"><a class="markdownIt-Anchor" href="#如果修改不生效"></a> 如果修改不生效</h2><ol><li>浏览器清理下缓存。</li><li>是部署后没效果还是本地就没效果？<code>hexo s</code> 或 <code>hexo d</code> 前使用 <code>hexo clean</code> 清理下。</li><li>部署后没效果的话，稍微等一下远程的缓存刷新。</li><li>本地没生效的话，CSS 文件夹有没有使用 CDN？</li><li>再不行，进主题的 CSS 文件，或后文里提到的 <code>styles.styl</code> 为 <code>.post-body</code> 单独添加字体相关的 CSS。</li><li>尝试升级 hexo-theme……</li><li>如果仍不能正常显示，或者确定不是自己的问题，可以去 <a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">theme-next/hexo-theme-next</a> 提 issue 。</li></ol><h2 id="关于本博客的样式"><a class="markdownIt-Anchor" href="#关于本博客的样式"></a> 关于本博客的样式</h2><p>本博客的样式抄袭了 <a href="https://blog.k8s.li/" target="_blank" rel="noopener">木子</a> 和 <a href="https://www.elietio.xyz/" target="_blank" rel="noopener">零の轨迹</a>，两位大佬都公布了自己的源码，分别在 <a href="https://github.com/muzi502/blog" target="_blank" rel="noopener">muzi502/blog</a> 和 <a href="https://github.com/Elietio/Elietio.github.io" target="_blank" rel="noopener">Elietio/Elietio.github.io</a> ，有需要的可以参考。原理就是自定义 <code>custom_file_path</code> ，即 <code>source/_data/**</code> ，通过自定义的 CSS 覆盖默认样式。比如 <a href="#%E6%A0%B7%E5%BC%8F%E7%9A%84%E9%AB%98%E7%BA%A7%E8%AE%BE%E7%BD%AE">样式的高级设置</a> 。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><code>font-family</code> 的规则是这样的：（1）优先使用排在前面的字体。（2）如果找不到该种字体，或者该种字体不包括所要渲染的文字，则使用下一种字体。（3）如果所列出的字体，都无法满足需要，则让操作系统自行决定使用哪种字体。 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>利用 <code>font-family</code> 的规则：比如「font-family应 该优先指定英文字体，然后再指定中文字体。否则，中文字体所包含的英文字母，会取代英文字体。」这样的问题。 <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 配置与操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客记录 </tag>
            
            <tag> 配置与操作 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise、async/await 与 setInterval</title>
      <link href="/2020/02/10/async-Promise/"/>
      <url>/2020/02/10/async-Promise/</url>
      
        <content type="html"><![CDATA[<h2 id="tldr"><a class="markdownIt-Anchor" href="#tldr"></a> TL;DR;</h2><p>易混淆点：<code>async</code> 修饰的函数，不管函数内部 <code>return</code> 的是啥，最后都返回一个 <code>Promise</code>。而 <code>return</code> 返回的值，最后在 <code>Promise.then()</code> 里取到。</p><p><code>async</code> 修饰一个函数，只是说明会隐式地返回一个 <code>Promise</code>，并不是说 <strong>这个函数内的操作都在一个 <code>Promise</code> 内</strong>。</p><p>也就是说，<strong><code>async</code> 修饰一个方法时，并不能保证方法里的操作同步执行。</strong> （一般 <code>async</code> 修饰的方法，同步操作会使用关键字 <code>await</code> 。）</p><h2 id="需求"><a class="markdownIt-Anchor" href="#需求"></a> 需求</h2><p>定时循环执行一个数学计算，把计算出来的值返回并打印出来。</p><h2 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h2><p>不假思索写出一段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  count++;</span><br><span class="line">  <span class="keyword">if</span> (count === <span class="number">3</span>) &#123;</span><br><span class="line">    clearInterval(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(count);</span><br></pre></td></tr></table></figure><p>执行的结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><p>这样，肯定是不行的……</p><p>JavaScript 是异步的，实际上这段代码里的 <code>setInterval()</code> 和 <code>console.log()</code> 会同时执行。</p><p>要使它们的执行有一个先后顺序，这就涉及到 JavaScript 里如何「同步」的问题了。</p><p>同步的方式有许多种，这里谈谈 <code>Promise</code> 和 <code>async/await</code>。</p><h2 id="promise-和-setinterval"><a class="markdownIt-Anchor" href="#promise-和-setinterval"></a> Promise 和 setInterval</h2><h3 id="0x01-错误示例"><a class="markdownIt-Anchor" href="#0x01-错误示例"></a> 0x01 错误示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA() 开始执行……"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      count++;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"testA() setTimeout 内容……"</span>);</span><br><span class="line">      <span class="keyword">if</span> (count === <span class="number">3</span>) &#123;</span><br><span class="line">        clearInterval(<span class="keyword">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">    resolve(<span class="string">"testA() 返回内容，计算得到 count = "</span> + count);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testA().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA.then() 开始执行"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行的结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">testA() 开始执行……</span><br><span class="line">testA() 返回内容，计算得到 count = 0</span><br><span class="line">testA.then() 开始执行</span><br><span class="line">testA() setTimeout 内容……</span><br><span class="line">testA() setTimeout 内容……</span><br><span class="line">testA() setTimeout 内容……</span><br></pre></td></tr></table></figure><h3 id="0x01-分析"><a class="markdownIt-Anchor" href="#0x01-分析"></a> 0x01 分析</h3><p><code>Promise</code> 的构造函数接受一个函数作为参数，这个函数又使用两个函数作为参数：<code>resolve</code>、<code>reject</code>。</p><p>简单理解的话，<code>resolve</code> 和 <code>reject</code> 这两个函数都用于在 <code>Promise</code> 里返回值。后面调用 <code>Promise</code> 的 <code>then()</code> 时，就可以获取到返回的值。他们的不同之处在于 <code>resolve</code> 将 <code>Promise</code> 的状态标志为「成功」，而 <code>reject</code> 将 <code>Promise</code> 的状态标志为「失败」（通常对应遇到异常）。</p><p>这段代码的问题和上面的一样，即 <code>setInterval</code> 与 <code>resolve</code> 会同时运行。所以执行 <code>testA</code> 后，早早地拿到了上面根本没有进入 <code>setInterval</code> 进行运算的 <code>count</code> 的值。</p><h3 id="0x02-这样有效"><a class="markdownIt-Anchor" href="#0x02-这样有效"></a> 0x02 这样有效</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA() 开始执行……"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      count++;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"testA() setTimeout 内容……"</span>);</span><br><span class="line">      <span class="keyword">if</span> (count === <span class="number">3</span>) &#123;</span><br><span class="line">        clearInterval(<span class="keyword">this</span>);</span><br><span class="line">        resolve(<span class="string">"testA() 返回内容，计算得到 count = "</span> + count);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testA().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA.then() 开始执行"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行的结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">testA() 开始执行……</span><br><span class="line">testA() setTimeout 内容……</span><br><span class="line">testA() setTimeout 内容……</span><br><span class="line">testA() setTimeout 内容……</span><br><span class="line">testA() 返回内容，计算得到 count = 3</span><br><span class="line">testA.then() 开始执行</span><br></pre></td></tr></table></figure><h3 id="0x02-分析"><a class="markdownIt-Anchor" href="#0x02-分析"></a> 0x02 分析</h3><p>我们把 <code>resolve</code> 也放进 <code>setInterval</code> 里，当计算完成后再返回，这样，就能保证拿到计算后的值啦。</p><h2 id="async-await-与-setinterval"><a class="markdownIt-Anchor" href="#async-await-与-setinterval"></a> async await 与 setInterval</h2><p>我想整高级点，用 <code>async</code> 与 <code>await</code> 来重写，应该咋整？</p><h3 id="0x03-错误示例"><a class="markdownIt-Anchor" href="#0x03-错误示例"></a> 0x03 错误示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">testA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA() 开始执行……"</span>);</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"testA() setTimeout 内容……"</span>);</span><br><span class="line">    <span class="keyword">if</span> (count === <span class="number">3</span>) &#123;</span><br><span class="line">      clearInterval(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"testA() 返回内容，计算得到 count = "</span> + count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testA().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA.then() 开始执行了"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行的结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">testA() 开始执行……</span><br><span class="line">testA() 返回内容，计算得到 count = 0</span><br><span class="line">testA.then() 开始执行了</span><br><span class="line">testA() setTimeout 内容……</span><br><span class="line">testA() setTimeout 内容……</span><br><span class="line">testA() setTimeout 内容……</span><br></pre></td></tr></table></figure><h3 id="0x03-分析"><a class="markdownIt-Anchor" href="#0x03-分析"></a> 0x03 分析</h3><p>同理，<code>setInterval</code> 与 <code>return</code> 会同时运行。所以执行 <code>testA</code> 后，早早地拿到了上面根本没有进入 <code>setInterval</code> 进行运算的值。</p><h3 id="0x04-还是错误的"><a class="markdownIt-Anchor" href="#0x04-还是错误的"></a> 0x04 还是错误的</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">testA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA() 开始执行……"</span>);</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"testA() setTimeout 内容……"</span>);</span><br><span class="line">    <span class="keyword">if</span> (count === <span class="number">3</span>) &#123;</span><br><span class="line">      clearInterval(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"testA() 返回内容，计算得到 count = "</span> + count;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testA().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA.then() 开始执行了"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行的结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">testA() 开始执行……</span><br><span class="line">undefined</span><br><span class="line">testA.then() 开始执行了</span><br><span class="line">testA() setTimeout 内容……</span><br><span class="line">testA() setTimeout 内容……</span><br><span class="line">testA() setTimeout 内容……</span><br></pre></td></tr></table></figure><h3 id="0x04-分析"><a class="markdownIt-Anchor" href="#0x04-分析"></a> 0x04 分析</h3><p>想当然地用类似上面 <code>Promise</code> 的方法，把 <code>return</code> 放在 <code>setInterval</code> 里面，还是不行。</p><p>获取到的 <code>data</code> 是 <code>undefined</code>。这说明有个隐式的 <code>return</code> 和 <code>setInterval</code> 一起执行啦……</p><h3 id="这可咋整啊"><a class="markdownIt-Anchor" href="#这可咋整啊"></a> 这可咋整啊……</h3><p><code>setInterval</code> 是异步的，咋整，用最上面的方法，套个 <code>Promise</code> 呗……可这不就又回到最初的起点了吗……</p><h3 id="0x05-这样可以"><a class="markdownIt-Anchor" href="#0x05-这样可以"></a> 0x05 这样可以</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">testA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA() 开始执行……"</span>);</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      count++;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"testA() setTimeout 内容……"</span>);</span><br><span class="line">      <span class="keyword">if</span> (count === <span class="number">3</span>) &#123;</span><br><span class="line">        clearInterval(<span class="keyword">this</span>);</span><br><span class="line">        resolve(<span class="string">"testA() 返回内容，计算得到 count = "</span> + count);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA 延迟后的内容"</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testA().then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA.then() 开始执行了"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">testA() 开始执行……</span><br><span class="line">testA() setTimeout 内容……</span><br><span class="line">testA() setTimeout 内容……</span><br><span class="line">testA() setTimeout 内容……</span><br><span class="line">testA 延迟后的内容</span><br><span class="line">testA() 返回内容，计算得到 count = 3</span><br><span class="line">testA.then() 开始执行了</span><br></pre></td></tr></table></figure><h3 id="0x05-分析"><a class="markdownIt-Anchor" href="#0x05-分析"></a> 0x05 分析</h3><p>把 <code>setInterval</code> 包装到一个 <code>Promise</code> 里并返回，然后使用 <code>await</code> 等待这个 <code>Promise</code>（包装着 <code>setInterval</code>）执行完并取得返回值。</p><p>再把这个返回值返回。</p><h2 id="为啥呢"><a class="markdownIt-Anchor" href="#为啥呢"></a> 为啥呢</h2><p><code>async</code> 修饰的函数，不管 <code>return</code> 的是啥，最后都返回一个 <code>Promise</code>。而 <code>return</code> 返回的值，最后在 <code>Promise.then()</code> 里取到。</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getCount().then(<span class="function">(<span class="params">count</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(count);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>为啥 0x03 和 0x04 是错误的呢？</p><p>因为 <code>async</code> 修饰一个函数，只是说明会隐式地返回一个 <code>Promise</code>，并不是说 <strong>这个函数内的操作都在一个 <code>Promise</code> 内</strong>。</p><p>也就是说，<strong><code>async</code> 修饰一个方法，并不能保证方法里的操作同步执行。</strong></p><blockquote><p>之前我把 <code>async</code> 这类关键字与 Java 里面的一些关键字对比理解……</p></blockquote><p>按我的理解，「0x03 错误示例」就相当于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA() 开始执行……"</span>);</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"testA() setTimeout 内容……"</span>);</span><br><span class="line">    <span class="keyword">if</span> (count === <span class="number">3</span>) &#123;</span><br><span class="line">      clearInterval(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">"testA() 返回内容，计算得到 count = "</span> + count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testA().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA.then() 开始执行了"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0x03 错误示例</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">testA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA() 开始执行……"</span>);</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"testA() setTimeout 内容……"</span>);</span><br><span class="line">    <span class="keyword">if</span> (count === <span class="number">3</span>) &#123;</span><br><span class="line">      clearInterval(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"testA() 返回内容，计算得到 count = "</span> + count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testA().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA.then() 开始执行了"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="其它"><a class="markdownIt-Anchor" href="#其它"></a> 其它</h2><p>虽然标题是：「Promise、async/await 与 setInterval」，实际上 <code>setTimeout</code> 也是一个道理。</p><h2 id="箭头函数"><a class="markdownIt-Anchor" href="#箭头函数"></a> 箭头函数</h2><p>我在这篇文章里用 <code>setInterval</code> 时，用的是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  count++;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA() setTimeout 内容……"</span>);</span><br><span class="line">  <span class="keyword">if</span> (count === <span class="number">3</span>) &#123;</span><br><span class="line">    clearInterval(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p><code>setInterval</code> 传入一个函数作为参数，使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>而不能用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">()=&gt;&#123;&#125;</span><br></pre></td></tr></table></figure><p>这是因为 <code>function(){}</code> 函数里的 this 指的是 <code>function(){}</code> 本身，而 <code>()=&gt;{}</code> 里的 this 则指的是 <code>()=&gt;{}</code> 外部的环境。</p><p>按定义来讲则是：<strong>箭头函数没有 <code>this</code>。如果访问 <code>this</code>，则从外部获取。</strong></p><p>如果我们在这用 <code>()=&gt;{}</code> 的话，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">setInterval(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">  count++;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA() setTimeout 内容……"</span>);</span><br><span class="line">  <span class="keyword">if</span> (count === <span class="number">3</span>) &#123;</span><br><span class="line">    clearInterval(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>这里的 <code>setInterval</code> 则会一直循环执行，不会停止。</p><p>因为 <code>clearInterval(this)</code> 根本没得效果。</p><p>如果要用箭头函数的话，需要这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> interval = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  count++;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"testA() setTimeout 内容……"</span>);</span><br><span class="line">  <span class="keyword">if</span> (count === <span class="number">3</span>) &#123;</span><br><span class="line">    clearInterval(interval);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 简单总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>译 - C, what the fuck??! - Robin Martijn</title>
      <link href="/2019/12/19/T-c-what-the-fuck/"/>
      <url>/2019/12/19/T-c-what-the-fuck/</url>
      
        <content type="html"><![CDATA[<h2 id="tldr"><a class="markdownIt-Anchor" href="#tldr"></a> TL;DR</h2><p>当初由于 ISO646 标准，部分国家的程序员打不出 <code>{</code>、<code>}</code> 等字符，所以 ANSI C 委员会引入了三元符。但三元符的使用可能会产生一些有趣的效果……</p><h2 id="测试效果"><a class="markdownIt-Anchor" href="#测试效果"></a> 测试效果</h2><p>gcc version ：gcc (GCC) 9.2.0</p><p><img data-src="/2019/12/19/T-c-what-the-fuck/show.png" alt="show"></p><h2 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h2><p>原文：<a href="https://bowero.nl/blog/2019/12/15/c-what-the-fuck/" target="_blank" rel="noopener">C, what the fuck??!</a></p><p><em>December 2019</em></p><p>下面这段代码执行后，变量 <code>a</code> 的值应该是多少？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// What will be the value of a????/</span></span><br><span class="line">a++;</span><br></pre></td></tr></table></figure><p>哈哈，既然我这样问了，你可能会觉得至少 <code>a</code> 的值不应该是 <code>1</code>。</p><p>实际上呢， <code>a</code> 的值仍然是 <code>0</code>，不会改变，因为 <code>a++;</code> 这行代码根本不会被执行。在 <code>a++;</code> 上面的那段注释里发生了些特殊的事情。</p><p>在讨论这个问题前，让我们先看看下面这个例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!didIMakeAMistake() ??!??! CIsWrongHere();</span><br></pre></td></tr></table></figure><p>首先，这段代码居然能能通过编译！这是咋回事？</p><p>要理解这个问题，首先要保证代码运行在现代版本的 <code>gcc</code> 环境并且开启了参数 <code>-trigraphs</code>（三元符）。 三元符是为了 <a href="https://www.gs1tw.org/twct/gs1w/download/DataMatrix_Character.pdf" target="_blank" rel="noopener">the ISO/IEC 646 Invariant character set</a> （ISO646 标准）中缺少的 9 个字符而发明的特殊字符组合。让我们看看 ISO646 标准中的字符。</p><p><img data-src="https://bowero.nl/blog/wp-content/uploads/2019/12/Screenshot_2019-12-15-ISO-IEC-646-Wikipedia.png" alt="img">Image: <a href="https://en.wikipedia.org/wiki/ISO/IEC_646" target="_blank" rel="noopener">Wikipedia</a></p><p>经常使用 C 的朋友应该一眼就看出这里缺少了哪 9 个字符吧，它们是这几个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">## \ ^ [ ] | &#123; &#125; ~</span><br></pre></td></tr></table></figure><p>有的朋友看了上面的表格可能会反倒感到困惑，哪儿缺少了，这 9 个字符不都在表格里吗？哈哈，注意一下，这 9 个字符都是灰色的，因为他们是各个国家的规则而不是国际规则。</p><p>有趣起来啦，让我们看个简单的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; a[i] = <span class="string">'\n'</span>; &#125;</span><br></pre></td></tr></table></figure><p>上面这段简单的代码要是由一个瑞典程序员来写的话，可能是这样的：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ä aÄiÜ = 'Ön'; ü</span><br></pre></td></tr></table></figure><p>为啥？因为他们那儿的字符规则里使用的字符和美国程序员不同嘛。</p><p>ANSI C 委员会自然也认识到这个问题了，于是它们决定引入三元符。用 9 种标准的字符组合来替换那些不标准的字符。</p><p><img data-src="https://bowero.nl/blog/wp-content/uploads/2019/12/Screenshot_2019-12-15-Digraphs-and-trigraphs-Wikipedia.png" alt="img"></p><p>Image: <a href="https://en.wikipedia.org/wiki/Digraphs_and_trigraphs" target="_blank" rel="noopener">Wikipedia</a></p><p>这种解决方案当然不太优雅，但至少能用。</p><p>晓得了这些，我们再来看一下前面的几段代码。首先是后面那段简单点的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!didIMakeAMistake() ??!??! CIsWrongHere();</span><br></pre></td></tr></table></figure><p>查看一下上面的表格，我们就知道这段代码里的 <code>??!</code> 实际上应该被取代为 <code>|</code>。因此这行代码的实际内容其实是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!didIMakeAMistake() || CIsWrongHere();</span><br></pre></td></tr></table></figure><p>如果你理解 <a href="https://en.wikipedia.org/wiki/Short-circuit_evaluation" target="_blank" rel="noopener">short-circuit evaluation</a> （短路求值）是怎么工作的，那你就应该知道这行代码也可以表示为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (didIMakeAMistake()) </span><br><span class="line">  CIsWrongHere();</span><br></pre></td></tr></table></figure><p>前面提到的第一个例子就更有趣啦，这也是一个我们为什么应该谨慎使用三元符的典例。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// What will be the value of a????/</span></span><br><span class="line">a++;</span><br></pre></td></tr></table></figure><p>上面已经说过啦，这段代码执行后，变量 <code>a</code> 的值实际上还是 <code>0</code>，因为 <code>a++;</code> 根本就不会被执行。</p><p>注意，只有当 <code>??</code> 后面跟随的字符在上面表格里的 9 个字符串里面，<code>??</code> 与该字符组成的字符串才会被识别为三元组。所以 C 预处理器将会把上面的代码处理为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// What will be the value of a??\</span></span><br><span class="line">a++;</span><br></pre></td></tr></table></figure><p>这里的 <code>\</code> 实际上是换行的转移符，所以这段代码实际上又相当于：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// What will be the value of a??a++;</span></span><br></pre></td></tr></table></figure><p>你瞧，这就是为什么 <code>a++;</code> 不会被执行。</p><p>I would like to end with a note from the committee itself:</p><blockquote><p>The Committee makes no claims that a program written using trigraphs looks attractive. As a matter of style, it may be wise to surround trigraphs with white space, so that they stand out better in program text. Some users may wish to define preprocessing macros for some or all of the trigraph sequences.</p><p><a href="http://www.open-std.org/jtc1/sc22/wg14/www/C99RationaleV5.10.pdf" target="_blank" rel="noopener">Rationale for International Standard Programming Languages C</a> (5.2.1.1)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Manjaro 个人新装配置</title>
      <link href="/2019/12/18/manjaro/"/>
      <url>/2019/12/18/manjaro/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>[update-2020-05-17]</p><p>安装的版本：Linux version 5.3.15-1-MANJARO</p><p>Manjaro 基于 Arch Linux，下面许多是 Arch 特性，但为了统一我都用 Manjaro 表示……</p><p>Arch 安装可以稍微参考这篇安装记录： <a href="https://wiki.leay.net/tech/config/linux/2020-02-23-archer-s-arch/" target="_blank" rel="noopener">Archer`s Arch</a></p><h3 id="建议"><a class="markdownIt-Anchor" href="#建议"></a> 建议</h3><p>文中对「如何做启动盘」等基础问题都没有详细说明，若是想要从零安装 Manjaro 系统建议在网上找一篇较新的教程。</p><p>期间若有问题可以优先查阅：<a href="https://wiki.archlinux.org/index.php/General_recommendations_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="noopener">ArchWiki 建议阅读 中文版</a></p><p>PS：不过本文对 <a href="#%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95">中文输入方案</a> （fcitx + 中文输入 + 双拼 + 直角引号配置……）与 <a href="#%E9%85%8D%E7%BD%AE%E6%BA%90">源的配置</a> （三类源，从哪找镜像……）介绍得还比较详细，其它发行版也阔以参考。</p><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><p>镜像下载推荐：<a href="https://mirrors.ustc.edu.cn/manjaro-cd/" target="_blank" rel="noopener">中科大</a></p><p>写入工具推荐：<a href="https://rufus.ie/" target="_blank" rel="noopener">rufus</a></p><p>说明：镜像目录里有 gnome、kde、xfce，这是官方提供的基于 Manjaro 的不同桌面环境。</p><p>各种不同之处与选择斟酌不提。（选择困难症建议 kde，我用着挺爽的……）</p><p>PS：还有各种社区桌面版本，比如 manjaro-deepin。</p><h2 id="配置源"><a class="markdownIt-Anchor" href="#配置源"></a> 配置源</h2><p>PS：把源设置好，装软件才方便嘛，所以先谈配置源。</p><h3 id="配置国内源"><a class="markdownIt-Anchor" href="#配置国内源"></a> 配置国内源</h3><h4 id="直接添加"><a class="markdownIt-Anchor" href="#直接添加"></a> 直接添加</h4><p>这儿配置的是就是 pacman 安装软件时使用的源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman-mirrors -i -c China -m rank</span><br></pre></td></tr></table></figure><p>执行后会弹出提示框，勾选需要使用的源即可。</p><p>然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure><p>查看是否含有刚才选择的源，若有则完成。</p><p><strong>PS：当然，直接手动在该文件添加源地址也是可以的。</strong></p><h4 id="手动在该文件添加源地址"><a class="markdownIt-Anchor" href="#手动在该文件添加源地址"></a> 手动在该文件添加源地址</h4><p>PS：可以使用 Arch 提供的镜像生成器<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>找到最新的镜像：<a href="https://www.archlinux.org/mirrorlist/" target="_blank" rel="noopener">Pacman Mirrorlist Generator</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## Arch Linux repository mirrorlist</span></span><br><span class="line"><span class="comment">## Generated on 2020-03-06</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## China</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.163.com/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.cqu.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.cqu.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirror.lzu.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.neusoft.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.neusoft.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirror.redrock.team/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirror.redrock.team/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.sjtug.sjtu.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.xjtu.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.zju.edu.cn/archlinux/$repo/os/$arch</span></span><br></pre></td></tr></table></figure><p>生成如上源后，手动粘贴至 <code>/etc/pacman.d/mirrorlist</code> 。</p><h3 id="可选添加-archlinuxcn-源"><a class="markdownIt-Anchor" href="#可选添加-archlinuxcn-源"></a> 【可选】添加 ArchLinuxCN 源</h3><blockquote><p>ArchLinuxCN 是 Arch 中文组维护的一个软件合集，包含了中文用户常用的 WPS Office、搜狗拼音、Google Chrome 等软件。<strong>不过，Arch 本身和它的常见衍生版（如：Manjaro）默认都不包含这个源，因此我们需要手动来配置使用这个源。</strong></p><p><a href="https://www.jianshu.com/p/80d0ec113c0a" target="_blank" rel="noopener">如何配置ArchLinuxCN软件源</a></p></blockquote><p><strong>如上所说，如果没装这些软件的需求可以先不配置。</strong></p><h4 id="添加"><a class="markdownIt-Anchor" href="#添加"></a> 添加</h4><p>打开 <code>etc/pacman.conf</code>。Manjaro 自带 nano 和精简的 vim（vi），建议用 nano，vi 使用方向键会乱码。（方向移动是 h/j/k/l）</p><blockquote><p># 安装完整 vim</p><p>sudo pacman -Sy vim</p></blockquote><p>ArchLinuxCN 的源可以在这里<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>查看：<strong><a href="https://github.com/archlinuxcn/mirrorlist-repo" target="_blank" rel="noopener">arch-linux-mirrorlist</a></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开 etc/pacman.conf</span></span><br><span class="line">sudo nano /etc/pacman.conf</span><br></pre></td></tr></table></figure><p>添加你找到的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel = Optional TrustedOnly</span><br><span class="line">Server = http://mirrors.tuna.tsinghua.edu.cn/archlinuxcn//<span class="variable">$arch</span></span><br></pre></td></tr></table></figure><p>同理这里用的清华源。</p><h4 id="导入-gpg-key-并更新系统"><a class="markdownIt-Anchor" href="#导入-gpg-key-并更新系统"></a> 导入 GPG key 并更新系统</h4><p>看包名就能猜到这是 archlinuxcn 的 key，安装后作为验证，就可以安装软件了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新数据源</span></span><br><span class="line">sudo pacman -Syy</span><br><span class="line"><span class="comment"># 安装导入 GPG key</span></span><br><span class="line">sudo pacman -S archlinuxcn-keyring</span><br><span class="line"><span class="comment"># 更新系统</span></span><br><span class="line">sudo pacman -Syu</span><br></pre></td></tr></table></figure><h3 id="可选aur-源"><a class="markdownIt-Anchor" href="#可选aur-源"></a> 【可选】AUR 源</h3><p>AUR 源可以使用清华源，文档<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>见这：<a href="https://mirror.tuna.tsinghua.edu.cn/help/AUR/" target="_blank" rel="noopener">清华大学开源软件镜像站</a></p><p>yay 用户执行以下命令修改 aururl :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay --aururl <span class="string">"https://aur.tuna.tsinghua.edu.cn"</span> --save</span><br></pre></td></tr></table></figure><p>修改的配置文件位于 <code>~/.config/yay/config.json</code> ，还可通过以下命令查看修改过的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -P -g</span><br></pre></td></tr></table></figure><p>yay 是一个包管理软件，与 pacman 的不同之处在于 yay 用于在终端安装 AUR 的包。<strong>具体，阔以查看下面的 <a href="#%E5%8C%85%E7%AE%A1%E7%90%86">包管理</a> 。</strong></p><h2 id="中文输入法"><a class="markdownIt-Anchor" href="#中文输入法"></a> 中文输入法</h2><p>输入法引擎见这：<a href="https://wiki.archlinux.org/index.php/Fcitx_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E8%BE%93%E5%85%A5%E6%B3%95%E5%BC%95%E6%93%8E" target="_blank" rel="noopener">Fcitx_输入法引擎</a></p><p>我选用的是 sunpinyin。</p><h3 id="安装-fcitx"><a class="markdownIt-Anchor" href="#安装-fcitx"></a> 安装 fcitx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Sy fcitx</span><br><span class="line">sudo pacman -S fcitx-sunpinyin <span class="comment"># sunpinyin</span></span><br><span class="line">sudo pacman -S fcitx-configtool <span class="comment"># 配置工具</span></span><br></pre></td></tr></table></figure><h3 id="不能输入中文"><a class="markdownIt-Anchor" href="#不能输入中文"></a> 不能输入中文</h3><p>建议查看：<a href="https://wiki.archlinux.org/index.php/Fcitx_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E8%BE%93%E5%85%A5%E6%B3%95%E6%A8%A1%E5%9D%97" target="_blank" rel="noopener">Fcitx_(简体中文)#输入法模块</a> 里的设置环境变量。</p><p>有些教程让修改 <code>.xprofile</code> 等文件，我实测无用，大概是过期了。同理，下面的解决方案也不一定长久，所以建议按着上面文档里的最新情况来。</p><p>修改 <code>~/.pam_environment</code>（若无则新建），添加如下配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GTK_IM_MODULE=fcitx</span><br><span class="line">QT_IM_MODULE=fcitx</span><br><span class="line">XMODIFIERS=@im=fcitx</span><br></pre></td></tr></table></figure><p>然后重启之。</p><h3 id="双拼配置自选方案"><a class="markdownIt-Anchor" href="#双拼配置自选方案"></a> 双拼配置自选方案</h3><h4 id="图形化工具配置"><a class="markdownIt-Anchor" href="#图形化工具配置"></a> 图形化工具配置</h4><p>如果装了 fcitx-configtool 这个图形化工具，可以在里面搜索「pinyin」找到双拼的选项，直接配置。</p><h4 id="手动配置"><a class="markdownIt-Anchor" href="#手动配置"></a> 手动配置</h4><p>fcitx 自带双拼输入法，使用的是自然码。如需修改为其它双拼方案，按如下操作即可。</p><p>打开 <code>~/.config/fcitx/conf/fcitx-pinyin.config</code>。</p><p>能看到默认双拼方案是自然码（Ziranma）。</p><p>我用的小鹤双拼，所以取消注释并修改为 XiaoHe。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DefaultShuangpinSchema=XiaoHe</span><br></pre></td></tr></table></figure><p>修改后重启输入法就能生效啦。（右键任务栏的键盘，选择重新启动。）</p><p><strong>PS：该文件里还有一些配置项，可以按自己需求修改……</strong></p><h3 id="简体中文输入法使用直角引号"><a class="markdownIt-Anchor" href="#简体中文输入法使用直角引号"></a> 简体中文输入法使用直角引号</h3><p>修改 <code>/usr/share/fcitx/data/</code>文件夹下以「zh-CN」结尾的文件。</p><p>「zh-CN」对应的就是简体中文输入法。</p><p>该文件名因系统不同有差异。比如在我当前的 Manjaro 版本，该文件为<code>punc.mb.zh_CN</code>。而在我之前使用的 deepin 系统上，该文件为<code>punc-ng.mb.zh_CN</code>。我还在网络上看到一些人的是<code>punc-ng.mb-zh_CN</code>。</p><p>将对应的「&quot;」与「’」按如下修改即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">" 「 」</span><br><span class="line">' 『 』</span><br></pre></td></tr></table></figure><p>注意！<code>/usr/share/fcitx/data/</code> 下的文件是「全局配置文件」。建议将该文件复制到用户目录，即<code>~/.config/fcitx/data/</code>下面再进行修改。</p><h3 id="拼音云输入"><a class="markdownIt-Anchor" href="#拼音云输入"></a> 拼音云输入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo pacman -Sy fcitx-cloudpinyin</span><br></pre></td></tr></table></figure><p>安装后在「配置—附加组件」里找到可以修改云拼音来源，大陆用户就修改为百度吧～</p><p>不过我现在（码这篇博文的现在）没感觉到这云拼音有啥用……</p><h3 id="其它"><a class="markdownIt-Anchor" href="#其它"></a> 其它</h3><p>网络上提到的 wine 系软件不能输入中文之类的问题倒是没遇到……</p><p>不过遇到了网易云不能输入中文，非刚需自己就没折腾。</p><h2 id="仅供参考软件替换建议"><a class="markdownIt-Anchor" href="#仅供参考软件替换建议"></a> 【仅供参考】软件替换建议</h2><h3 id="vim"><a class="markdownIt-Anchor" href="#vim"></a> vim</h3><p>上面提到了 Manjaro 自带精简的 vim（即 vi），用着不太顺手。卸载再安装完整版即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载并安装</span></span><br><span class="line">sudo pacman -Rs vi &amp; sudo pacman -Sy vim</span><br></pre></td></tr></table></figure><h3 id="其它-2"><a class="markdownIt-Anchor" href="#其它-2"></a> 其它</h3><p>之前我建议用 deepin 的截图等工具，但是一方面使用它们引入 deepin 相关的依赖太多了，另一方面感觉自带的终端等用起也还不错……</p><p><strong>下面算是一个简单的软件推荐吧……</strong></p><p>截图：flameshot 这个软件感觉和 deepin-screenshot 差不多，甚至更小更强大。</p><p>录屏：peek 小巧强大</p><p>QQ/tim 可以装 deepin 的，不过只是能用……（其实使用官方的 Linux QQ 也还行……）</p><p>文本编辑器可以使用 kde 提供的 KWrite，轻量级的使用挺方便的，打开又快……</p><h2 id="应用配置"><a class="markdownIt-Anchor" href="#应用配置"></a> 应用配置</h2><h3 id="默认应用设置"><a class="markdownIt-Anchor" href="#默认应用设置"></a> 默认应用设置</h3><p>既然软件都替换了，相应的把默认应用也修改一下吧。</p><p>进入「设置—个性化—默认应用设置」。</p><h3 id="快捷键配置"><a class="markdownIt-Anchor" href="#快捷键配置"></a> 快捷键配置</h3><p>将截图和终端的快捷键设置一下。</p><p>进入「系统设置—工作区—快捷键」。</p><p><strong>在「全局快捷键」添加应用，设置快捷键无效，需要「自定义快捷键」。</strong></p><p>以「深度截图」举例。</p><p>在「自定义快捷键」新建一个「全局快捷键—命令/URL」，在触发器设置快捷键，在动作设置「命令/URL」。</p><p>这个「命令/URL」是啥玩意？在这里简单理解为启动软件的命令即可。</p><p>在「程序启动器」搜索找到软件，右键软件的图标，点击「编辑应用程序」，点击「应用程序」，就可以看到「命令」。</p><p>比如在应用栏里找到「深度截图」，右键图标，点击「编辑应用程序」，点击「应用程序」将「命令」栏里的链接复制粘贴过来即可。</p><p><strong>PS：默认 f12 为下拉式终端，为了避免与浏览器调试的快捷键冲突，建议更换……</strong></p><h3 id="linux-应用配置的迁移"><a class="markdownIt-Anchor" href="#linux-应用配置的迁移"></a> Linux 应用配置的迁移</h3><p>使用的各种软件的配置都放在用户目录下，每次迁移系统备份 <code>home</code> 文件夹太慢了，如果我们<strong>没有啥非常重要的需求</strong>，完全可以只把用户目录下必要软件的配置迁移过来。</p><p>比如 <code>~/.IntelliJIdea2019.3</code>、<code>~/.gradle</code>……</p><p>将上面这些软件的配置文件夹从原系统备份出来，再移动到新系统的用户目录即可。</p><p>推荐一个软件配置备份的工具<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>：<a href="https://github.com/lra/mackup" target="_blank" rel="noopener">https://github.com/lra/mackup</a></p><p>也可以用它管理 dotfiles。</p><h3 id="配置-jdk"><a class="markdownIt-Anchor" href="#配置-jdk"></a> 配置 jdk</h3><p>使用官方提供的方式安装。</p><p>先用包管理安装 jdk。（只提供 openjdk）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先搜索一个</span></span><br><span class="line">yay -Ss jdk</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yay -Sy java-8-openjdk</span><br><span class="line"><span class="comment"># 查看 jdk</span></span><br><span class="line">archlinux-java status</span><br><span class="line"><span class="comment"># 设置默认 jdk</span></span><br><span class="line">sudo archlinux-java <span class="built_in">set</span> java-8-openjdk</span><br></pre></td></tr></table></figure><h2 id="包管理说明"><a class="markdownIt-Anchor" href="#包管理说明"></a> 包管理说明</h2><h3 id="pacman"><a class="markdownIt-Anchor" href="#pacman"></a> pacman</h3><p>Manjaro 提供了一个包管理的终端程序 pacman，详见：<a href="https://wiki.archlinux.org/index.php/Pacman_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="noopener">Pacman 简中说明</a> 。</p><p>在 Manjaro 提供的桌面程序软件中心里，应用有 Community 和 AUR 的分别。该桌面程序可以安装 Community 程序也可以安装 AUR 程序——不过安装 AUR 程序的提示信息是「构建」。</p><p>AUR，即 Arch User Repository，Arch 用户仓库。而 Community 指的是 Arch 的官方仓库。用户将软件放在 AUR，Arch 官方则定期挑选 AUR 里的优秀程序到 community。</p><p>实际表现为 Community 为 AUR 的子集，Community 有的应用 AUR 都有，但是 Community 拥有但 AUR 没有的那部分软件可能在系统上的运行表现不大稳定。</p><p>pacman 只能在终端安装 Community 程序，想要在终端安装 AUR 程序则需要再安装一个包管理工具。</p><p><strong>有些教程里用的 yaourt，但该工具已经在 Arch 文档标记过时了，不建议使用。</strong></p><p>具体选用啥可以自己搜索斟酌，我用的 yay。</p><h3 id="yay"><a class="markdownIt-Anchor" href="#yay"></a> yay</h3><p>安装如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://aur.archlinux.org/yay.git</span><br><span class="line"><span class="built_in">cd</span> yay</span><br><span class="line">makepkg -si</span><br></pre></td></tr></table></figure><p>PS：在软件中心里构建 AUR 程序其实就是相当于帮我们做了手动 <code>makepkg</code> 的工作。</p><h3 id="命令"><a class="markdownIt-Anchor" href="#命令"></a> 命令</h3><p>yay 兼容 Pacman 的命令行参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## pacman</span></span><br><span class="line">pacman -Syu <span class="comment"># 同步数据包后更新系统</span></span><br><span class="line"></span><br><span class="line">pacman -Sy 包名 <span class="comment"># 同步包数据库后安装。</span></span><br><span class="line"></span><br><span class="line">pacman -R 包名 <span class="comment"># 删除包不删除依赖</span></span><br><span class="line">pacman -Rs 包名 <span class="comment"># 删除包的同时删除不被其它包使用的依赖</span></span><br><span class="line">pacman -Rd 包名 <span class="comment"># 删除包不检查依赖</span></span><br><span class="line"></span><br><span class="line">pacman -Ss 关键字 <span class="comment"># 搜索含关键字的包。</span></span><br><span class="line">pacman -Qi 包名 <span class="comment"># 查看有关包的信息。</span></span><br><span class="line"></span><br><span class="line">pacman -Sc Pacman <span class="comment">#清理未安装的包文件</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## yay</span></span><br><span class="line">yay -Su <span class="comment"># 升级软件库</span></span><br><span class="line">yay -Sy <span class="comment"># 更新软件库</span></span><br><span class="line">yay -Syy <span class="comment"># 强制更新软件库</span></span><br><span class="line">yay -Sy 包名 <span class="comment"># 安装命令</span></span><br><span class="line">yay -Rs 包名 <span class="comment"># 卸载命令</span></span><br><span class="line">yay -Ss 关键字 <span class="comment"># 搜索命令</span></span><br></pre></td></tr></table></figure><h2 id="其它问题"><a class="markdownIt-Anchor" href="#其它问题"></a> 其它问题</h2><h3 id="修改主目录为英文"><a class="markdownIt-Anchor" href="#修改主目录为英文"></a> 修改主目录为英文</h3><p><a href="https://www.jianshu.com/p/73299b8e3f58" target="_blank" rel="noopener">原文</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pacman -S xdg-user-dirs-gtk</span><br><span class="line">$ <span class="built_in">export</span> LANG=en_US</span><br><span class="line">$ xdg-user-dirs-gtk-update</span><br><span class="line"><span class="comment"># 然后会有个窗口提示语言更改，更新名称即可</span></span><br><span class="line">$ <span class="built_in">export</span> LANG=zh_CN.UTF-8</span><br><span class="line">$ sudo pacman -Rs xdg-user-dirs-gtk</span><br></pre></td></tr></table></figure><h3 id="deepin-截图不能粘贴"><a class="markdownIt-Anchor" href="#deepin-截图不能粘贴"></a> deepin 截图不能粘贴</h3><p><a href="https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=151823" target="_blank" rel="noopener">原文</a></p><p>我试了下，安装 GPaste 并启动就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yay -Rs gpaste</span><br></pre></td></tr></table></figure><p>卸载后虽然仍起作用，但重启就不行了。</p><h3 id="vmware-的安装"><a class="markdownIt-Anchor" href="#vmware-的安装"></a> VMware 的安装</h3><p>某些特殊软件安装前建议看下官方 WIKI，比如 VMware<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>，我想当然地用 <code>pacman</code> 一把梭装上，并不能正常使用。</p><p>安装方式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pacman build vmware-workstation</span><br><span class="line">sudo modprobe -a vmw_vmci vmmon</span><br><span class="line"></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> --now vmware-networks.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> --now vmware-usbarbitrator.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> --now vmware-hostd.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不然使用时各种报错（主要是联网）</span></span><br></pre></td></tr></table></figure><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://www.archlinux.org/mirrorlist/" target="_blank" rel="noopener">Pacman Mirrorlist Generator</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://github.com/archlinuxcn/mirrorlist-repo" target="_blank" rel="noopener">arch-linux-mirrorlist</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://mirror.tuna.tsinghua.edu.cn/help/AUR/" target="_blank" rel="noopener">清华大学开源软件镜像站</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><a href="https://github.com/lra/mackup" target="_blank" rel="noopener">https://github.com/lra/mackup</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p><a href="https://wiki.manjaro.org/index.php?title=VMware" target="_blank" rel="noopener">Manjaro-WIKI-VMware</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 配置与操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置与操作 </tag>
            
            <tag> Linux </tag>
            
            <tag> Manjaro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新海诚与恐怖片  ——  胡侃《天气之子》</title>
      <link href="/2019/12/01/the-weathering-with-u/"/>
      <url>/2019/12/01/the-weathering-with-u/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>起因是我想恨恨地吐槽一下评分机制以及利用评分机制对别人热爱的东西胡说八道的家伙 —— 但这种操作确实太幼稚了。反过来，我自己心里的价值评判似乎简单粗暴得不得了 —— 对我电波的，不对我电波的。</p><p>我觉得一部作品的体验是完全基于「观众整个完整的个体」，每个人的感受绝对是独一无二的。之所以有许多人觉得彼此间感受一致，要么是因为许多人不擅长表达，刚好觉得别人用的形容词符合自己心境，所以自认为感受一致。要么是因为语言和文字的限制 —— 当我们把自己的情绪用言语和文字表达出来的那一刹那，情绪也就被固定于那几个词汇了。正因为文字的限制，各类典籍才会多用比喻，而不是直接诉说如何如何。</p><p>所以，我还是自娱自乐谈谈自己喜欢的东西，以及为什么喜欢吧。</p><p>之前提到过「<strong>搞不好有一天大家连表情该如何变化都需要先打开搜索引擎搜索（问答平台提问）</strong>」，人若是对事物没有自己的感受 —— 尽管感受是浅薄无知且自作聪明，那也太……无趣了点。</p><p>下文自然是我想当然的胡言乱语。</p><h2 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h2><p>毫无疑问，《天气之子》是基于《你的名字》的成功创作出来的。不管是角色还是音乐的熟悉感 —— 角色设计和音乐都是原班人马，田中將賀与乐队 RADWIMPS。就连故事发展都似乎套路了起来 —— 相遇、分离、寻找、重聚。</p><p>特别是推动故事发展的神秘元素的引入 —— 老人讲起一段故事，神话便融入现实。这种引入我自己是觉得太老套了，根本不符合诚哥这两部动画里的年轻气息。传统表现方式的新用法也有 —— 比如《天气之子》里薯片拌饭那段。这完全是炫技嘛。谈到食物，先不谈动画中对食物的夸张表现对观众的影响 —— 熟悉日本动画的观众一提就能想象到的大鸡腿、猪腿肉等。创作者对食物的精细操作在日本动画里也是一以贯之的，有一段动画就经常被人拿出来夸赞 —— 《侧耳倾听》里的切凤梨。</p><blockquote><p>我在这提到过：<a href="/2019/05/18/oh-yeah/">乱侃作品的形式与创新</a></p></blockquote><p>之前在推特上看到日本推友评价中国动画和日本动画里的蛋炒饭，我们的动画里角色做蛋炒饭时，锅里只能见到一堆东西在简单的运动，而日本动画则更精致。推文下还有人贴出一些作画的草图，我看不懂，不过能看出日方对掌勺时食物的运动轨迹都有研究。</p><p>常说国漫崛起，除了大场面的调度、特效，甚至基本的好故事，这些多年积累下来的细节也很重要啊……扯远了。</p><p>薯片拌饭这段精细的表现一方面很传统，另一方面使用的食材又很年轻，我觉得很有意思。</p><p>说回来，《天气之子》和《你的名字》这两者的叙事设计是不同的，毕竟两者贯穿故事的线索也不同嘛。</p><p>好了，简单的评价到此为止，回到标题 —— 新海诚与恐怖片。这自然有点标题党，源于我今天一时兴起找来《天气之子》的 TS 版想印证一下自己观影后的一些猜测，然后觉得几个镜头和一些恐怖片有异曲同工之妙。</p><p><strong>当然，都是我瞎扯。</strong></p><p>如果要细究下去，就要从人类产生恐怖的生物机制谈起了。我没那个水平，就谈两点，很直观的两点。</p><p>一是配乐，比如经常有人吐槽把鬼片的配乐换成《最炫民族风》，鬼片顿时就变成欢乐片。这说明相比直观的影像 —— 各种诡异的图，配乐至少也是个必要条件。</p><p>二就是拍摄手法 —— 当然这只是其中的一种，我不懂术语，简单描述下：镜头跟随角色往一个黑秋秋的地方缓慢推进，配乐尖锐，镜头越来越近，配乐也越来越尖锐。突然之间 —— 蹦的一下，配乐停止、警报解除……原来是虚惊一场啊。然后就在观众以为没什么的时候，突然冒出个恐怖的东西填满镜头（也许配乐又回来了。</p><p>总结一下便是：营造一个假的紧张氛围，然后在观众放松时出其不意。</p><p>就《天气之子》来讲，诚哥在推动情绪的地方也熟练配合使用这俩。</p><p>先说配合高潮的几处音乐，我想看过片的人应该都印象深刻。举个例，比如男主打算告白那儿，女主正准备说些啥，突然拉出一个远景，然后镜头顺着风奔向女主，男主一回头，镜头从男主肩膀向后移，女主消失了。</p><p>就在紧张的时候，突然传来了女主的声音，男主抬头，女主在空中冒了出来。接着，配乐，起……</p><p>再举两个例子吧，一个是《你的名字》里在掌心写的「すきだ」，一个是《天气之子》里女主的年龄……但显然后者年龄这个伏笔揭露的时候在观众中并没有太大反应，毕竟前面又没怎么强调这点……</p><p>其实有点强行凑的感觉……嘛，<strong>正文就到此为止吧！</strong></p><p>其次给我留下深刻印象的则是男女主第一次到屋顶时，绕着人物旋转的广角镜头。毕竟动画里很少见到这种切镜方式嘛（笑。</p><p>毕竟屏幕上的是纸片人，这种真实的运镜方式也算是动画与电影间的借鉴了吧。动画是在假定的镜头下，而电影的拍摄则真的有一个摄影机。</p><p>再然后就是中间那段配合着音乐的快速剪辑叙事了。在一首歌的时间内，铺满各种碎片的剪辑，屏幕内的时间也被加速，人物之间的感情被合理地加速培养。这在《你的名字》里也有使用，不过男女主在不同的地点与时间线。（笑</p><p>这种方式貌似非常适合青春片在有限的时间里培养角色感情，同期上映的《少年的你》中间也有这么一段。</p><p>当然，更多的似乎是被用于悲情时刻（大结局或者中间主角回心转意），进行疯狂无节制 + MV 式的闪回……</p><p>再回过头，这些片子真的很会营造高潮（大概都公式化了，而我们的片子似乎还差点意思。</p><p>比如《流浪地球》的初中生演说那段，明明是情绪的高潮，却不温不火……后来知乎上还发起了一个帮忙修改这段台词的问题。</p><p>我觉得今年《罗小黑战纪》大电影的结局也有这个问题 —— 小黑奔向师父那段情绪铺垫。不过我是嘴强王者，我也说不出怎么才算好，这只是我的个人感想……</p><p>《哪吒》里李靖的那个伏笔就不错……比后面哪吒的「燃」动人多了……</p><p>提到这又想吹吹《罗小黑战纪》的大电影了，把豆瓣上评论贴过来，有灵感了再吹……</p><p>「中国元素的正确使用方式。不必刻意强调，融入背景与细节让观众自己体会。想起了混沌武士，用现代元素讲了个正儿八经的中国故事。」</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 观与感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 看片所想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从换域名谈谈 DNS</title>
      <link href="/2019/11/13/dns/"/>
      <url>/2019/11/13/dns/</url>
      
        <content type="html"><![CDATA[<h2 id="前因"><a class="markdownIt-Anchor" href="#前因"></a> 前因</h2><p>前阵子被「备案信息复查」，当头一棒，我都忘记自己备过案了。一愣神，我以为域名都必须要备案才能用，问了下室友，才突然想起自己当时备案是因为「域名必须要备案才能指向腾讯云服务器的 IP」。</p><p>扫了一眼要求 —— 1、在腾讯云备案成功的域名需要解析至腾讯云服务器；2、网站内容不能涉及博客；3、网站标题需要与网站名称一致。4、电话沟通说不能有评论。</p><p>其实貌似备案也不是很严格，修改审核完事后再改过来也行……</p><p><s>还是不要在违法的边缘试探为好</s></p><p>其他都还好，「网站标题需要与网站名称一致」这一条太沙雕了。我备案时的网站名是「三岛有纪夫」，总有人觉得我读了很多三岛由纪夫的书，其实我对他不是很了解，纯粹是觉得这样玩弄字眼很有趣。</p><p>现在我不想顶着「三岛有纪夫」这个名字了，不符合我现在的人设。</p><p>打算换个轻松点的域名，记得 <a href="https://lhcy.org/" target="_blank" rel="noopener">林海草原</a> 对此有研究，便请教了下。</p><h2 id="注册域名与设置第三方-dns-服务器"><a class="markdownIt-Anchor" href="#注册域名与设置第三方-dns-服务器"></a> 注册域名与设置第三方 DNS 服务器</h2><p>于是在 <a href="https://porkbun.com/" target="_blank" rel="noopener">https://porkbun.com</a> 注册 —— 「价格比较低、免费隐私保护、彻底不泄露、服务极好。」购买需要 Paypal 与 Vista 信用卡。（之前申请了张中国银行的学生信用卡</p><p>把 DNS 服务器换为第三方，<a href="https://dns.he.net/" target="_blank" rel="noopener">https://dns.he.net/</a>。</p><p>我还是第一次使用第三方 DNS，说起来其实步骤很简单。</p><p>在域名商的域名管理界面将 AUTHORITATIVE NAMESERVERS（权限域名服务器）修改为第三方 DNS 服务器提供的。比如使用 <a href="http://he.net" target="_blank" rel="noopener">he.net</a> 的话，在 <a href="http://he.net" target="_blank" rel="noopener">he.net</a> 注册后就会有个醒目的提示告诉你去修改，以及修改为啥。完事后再在 <a href="http://he.net" target="_blank" rel="noopener">he.net</a> 提供的管理界面添加域名 —— 然后就可以在 <a href="http://he.net" target="_blank" rel="noopener">he.net</a> 管理域名的解析啦。</p><p>当时看的这篇文章：<a href="https://wzfou.com/he-net-dns/" target="_blank" rel="noopener">He.net DNS 域名解析申请使用 - 免费 DDNS、IPv6 地址和 Slave DNS</a></p><p>回头看步骤其实很简单，不过因为我是第一次接触，而且 AUTHORITATIVE NAMESERVERS 修改生效的时间有点长 —— 导致我在等待的时间里总觉得自己哪儿弄错了，然后折腾……所以花了好一阵子时间。</p><h2 id="裸域名不能设置-cname"><a class="markdownIt-Anchor" href="#裸域名不能设置-cname"></a> 裸域名不能设置 CNAME</h2><p>遇到了一个问题：</p><blockquote><p>Sorry, you can’t have a CNAME on the root domain. It violates RFC, will break things, and probably cause your own personal space time to collapse in on itself.</p><p>You probably want to use an ALIAS record instead.</p></blockquote><p>说是违反了 RFC，可能会导致一些问题。之前用阿里云和腾讯云自带的解析都没遇到这个问题啊，搜索了下。大意可以如下解释：</p><p>阿里云和腾讯云用了些「特殊手段」让用户可以给裸域名设置 CNAME。至于是啥「特殊手段」？搞不好就是上面说的方法 —— use ALIAS。</p><p>会产生啥问题呢？</p><p>MX 记录有可能会和 CNAME 记录冲突。</p><p>具体可以看讨论：<a href="https://www.v2ex.com/t/204489" target="_blank" rel="noopener">为什么裸域名不可以设置 CNAME？</a> 17、26、27 楼。</p><p>没细看，解决方法很简单：用 ALIAS 记录解析就行了。</p><h2 id="域名-dns-解析的过程"><a class="markdownIt-Anchor" href="#域名-dns-解析的过程"></a> 域名 DNS 解析的过程</h2><p>DNS 在域名和实际 IP 间起着桥梁的作用。都说需要用 DNS 把域名解析为 IP，那么为啥需要得到 IP 呢？因为在计算机网络中，计算机需要通过 IP 去寻找和它通信的家伙。 —— 当初就是这么设计的。（IP 就相当于门牌号咯）</p><p>IP 和地域相关，比如网上就有通过 IP 反查地址的工具。</p><p>回到 DNS，如果我们从浏览器输入一个域名谈起，那么就会经历如下步骤：1、浏览器缓存；2、计算机缓存；3、本地 DNS 服务器……</p><p>如果你修改过 hosts，可能就遇到过刷新计算机 DNS 缓存。有时候，某些网站被 GFW 挡住了，可以通过修改 hosts 访问。这是因为 GFW 对该站进行了 DNS 污染。所谓的 DNS 污染，大意就是指通过某种手段让你的域名指向错误的 IP。你在本地通过 hosts 映射了域名与 IP，浏览器访问时就直接用本地 hosts 的 IP 去建立连接。这样，就躲避了 DNS 污染啦……</p><p>有时候，对于被 DNS 污染了，但你仍想访问的网站。可以使用域名反查 IP 的工具查到 IP，然后通过 IP 访问。修改 hosts 科学上网就是这个原理。</p><p>一些破解 intellij 系软件的方法会修改 hosts 将 intellij 的激活域名指向本地（localhost），则是利用这点让激活服务无法正常运行。</p><p>啥是本地 DNS 服务器？不细聊概念。一般来说，本地 DNS 服务器默认的是运营商提供的 DNS。「运营商提供的 DNS」对一般用户来说是够用的，前提是你对互联网有一定的「钝感力」。运营商时常搞些幺蛾子 —— 也许你就遇到过，像网络运营商劫持：网页被加上一些莫名其妙的广告，或者域名被解析到一个莫名其妙的网站（DNS 劫持）……</p><p>如果你遇到了这些现象且难以忍受，也可以把本地 DNS 设置为其它的。比如国内的口碑较好的有 <a href="http://www.114dns.com/" target="_blank" rel="noopener">114 DNS</a> 。Windows 用户可以用 <a href="https://www.sordum.org/7952/dns-jumper-v2-1/" target="_blank" rel="noopener">DNS jumper</a> 这个软件方便选择并切换。</p><p>前面说过 DNS 充当着域名与 IP 的桥梁，那也就是说 DNS 知道你访问了哪些域名。（这才能去查 IP 嘛）因此一部分有特殊需求的用户对国内的 DNS 服务不是很信任，会使用国外的 DNS。但一般来说，国外的解析速度肯定比不上国内。</p><blockquote><p>插一句：大一把流量用得超出套餐了，便以没收到流量预警短信为由向联通客服反应。（不记得是不是真没收到了，应该是真的吧，不然我这么谨慎的小孩也不至于干出这种事……）然后对面的客服似乎正数着条目向我说：您的流量都是有记录的，某某 APP 用了多少……</p><p>当时听着吓我一跳，赶快叫 Ta 别说了。</p></blockquote><p>本地 DNS 服务器查的也是缓存，如果在缓存查不到，就会去域名的 DNS 服务器查。OK！这里所说的「域名的 DNS 服务器」就是上面我提到的 AUTHORITATIVE NAMESERVERS（权限域名服务器）。比如我把本站域名的 AUTHORITATIVE NAMESERVERS 改为了 <a href="http://he.net" target="_blank" rel="noopener">he.net</a>，这时候「本地的 DNS 服务器」就会去 <a href="http://he.net" target="_blank" rel="noopener">he.net</a> 查询域名对应的 IP —— 这里的查询就很复杂了，不细讲。查到后，就会把 IP 放在自己的缓存里。</p><p>想像一下，你访问一个不存在的网站时，DNS 服务器找到（或者说弄出？）一个不存在的 IP 的出来，返回给你 —— 同时还放在自己的缓存里。这样子，不仅你访问不了这个不存在的网站（因为解析出来的 IP 错误）。DNS 服务器还会把你访问时产生的缓存同步至其它区域的缓存服务器 —— 非常快速地全方位污染。</p><p>每一步都有缓存，而缓存，当然有过期时间了。比如浏览器缓存，一般「Ctrl+F5」就会重新请求了。本地缓存，相信修改过 hosts 的都会记得有一个刷新的步骤。Windows 的 <code>IPconfig /flushdns</code>；<s>Linux 一般是重启 network：<code>service network restart</code>。</s></p><p>而在对域名进行解析时则有一个参数：TTL，这个设置就是更新缓存的频率（多久刷新一下）。比如理论上你修改一次解析后，要经过这么长的时间才会生效，但一般 DNS 服务都对此做了优化，你实际等不到那么久。</p><p>好啦，就是这样。</p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 自己浅见 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客记录 </tag>
            
            <tag> 计算机网络相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>石子坠入深渊</title>
      <link href="/2019/11/10/str/"/>
      <url>/2019/11/10/str/</url>
      
        <content type="html"><![CDATA[<p>白川家旁边开过一家私人的小洗车店。好像从那开始，白川就经常梦到有人开着一辆面包车停在旁边这家店，司机打开车门的时候发出了很刺耳的干摩擦声，梦里的白川可能就是被这声异响吸引了注意力。那个梦过于真实，白川失去了上帝视角，视线被局限到卧室的窗口那么大。他看着司机从后备箱掏出了一桶汽油，好半天才扭开瓶盖，然后拎着桶绕着车把汽油往车窗上倒。</p><p>白川把这个梦给母亲讲过好几次，母亲总以为白川说的是「有人用汽油洗车。」母亲笑着说：「汽油这么贵，怎么会有人把汽油往车上撒呢。」虽然白川对商品的价格一直没什么概念，却隐约觉得母亲搞错了重点。</p><p>「一切都不对劲。」每当白川回忆起以前，总觉得有什么不对劲。</p><p>聊到这的时候，我怀疑白川当时尿床了。你看，「好半天才扭开瓶盖」、「拎着桶绕着车往车窗上倒」，这很像是尿床在梦里的映射。</p><p>白川觉得那不可能，因为那个时候他已经很大了。大概是十四、或者十五岁的样子。白川记得很清楚。十五岁时白川被母亲从学校领走，一直到现在也没回去过。从那开始，时间像是被不断地压缩，或者说像是一根线被拉长，但被人剪去了几段。白川没多少闲暇留给做梦。</p><p>从班主任办公室直到走出校门，白川和母亲都没说一句话。出了校门，母亲在路旁把摩托推出来，向后面的白川喊：「走。」白川从这个字里听出了颤音，有点难过。白川走了过去：「摩托我来开吧。」母亲喊他坐后面去，「你把这个本事用在读书就好了。」</p><p>摩托在颠簸的泥洼道上跑了好一阵子。白川从后面说：「我不喜欢读书。」</p><p>「嗯。」母亲接着说：「你只是不擅长读书。」</p><p>白川说「这是一个意思，谁喜欢做自己不擅长的事。」</p><p>母亲的声音现在很平淡：「也很少有人能做自己喜欢的事。」</p><p>白川觉得问题出在母亲当时没有问他为什么不喜欢读书，而是直接给出了他不擅长读书的结论。白川本来是想反驳母亲，结果反倒好像掉入了陷阱一样，承认了自己不擅长。意识到这点后，白川放弃了继续回应。</p><p>白川小声说「我可以去爸之前的工地搭架。」</p><p>后来想到这，白川总是觉得为人父母，真的很难接受孩子的平庸。自己的母亲总是觉得自己是个挺机灵的家伙，只是不肯把这份机灵劲用在学习上。如果肯学，白川一定能学好。白川不确定母亲是在安慰他还是在安慰自己。</p><p>一个月后的一天，吃完午饭，白川跟着四舅背着一个装了一床棉絮和两条毛毯的工地包，坐班车到了县城。继续转车前四舅带着白川去理发店染了个黄毛，说这样看起来年龄大点，像个混社会的。他们在县里的汽车站先买了六张车票，还有四个工友有点远，要下午三点才到得了。随后六个人一起到了市里，坐了十多个小时的火车，第二天上午到的南普。车站前有个年轻人等他们好一阵子了，年轻人开辆五菱车，带着他们绕了几座山到达老鹰嘴。</p><p>年轻人叫张林。张林看着白川一头黄毛，笑着问他多大了。四舅替白川回答说：「刚满十八，经常做农活，有一手劳力，跟我来挖桩锻炼锻炼。」张林哈哈一笑「这么小该去学点技术的。」四舅也笑「先跟到我，好照顾他娃娃些。大点再说。」</p><p>白川对张林第一感觉并不好，觉得他多管闲事。</p><p>老鹰嘴这片工地的人都住在一栋两层楼的平房里的二楼。这栋屋子刚修好没多久——准确来说其实还没修好，屋顶是用几根钢筋搭的架子，铺了一层塑胶瓦。屋子修到一半的时候，主人老张听说这边要拆迁，本来不打算修了，结果听别人说把房子修好了，要拆迁款的时候可以多赔点，就继续建。想到这反正要拆，老张盖起房子就不那么用心了，买了些廉价的料开始磨洋工。拖着拖着，又有人告诉老张，说拆不到这边来。这把老张气得忍不住跳起来骂娘。但也没得办法，老张只有把一口气往肚子里咽。只是这房子，再也懒得往上叠了。</p><p>包工头来跟老张谈租房时，老张一口气差点又提起来。骂骂咧咧地说你们在那边修桥，搞得我房子整成这批样。包工头顺着老张的话说，那些搞规划的是脑壳有包，把你们这给折腾惨了。没人会跟利益过不去，得失谈好一切都好说。最后两人谈好的是，不收房租，包工头找人把房顶给修起。结果包工头只找人买了几张塑料瓦盖在屋顶。包工头的解释是，急着开工，先搭起住人，等干完了再说。老张也不傻，等干完了你人跑了咋办。于是包工头又给了老张五百块，这次改口说：「帮你把屋顶盖起，我都可以修两间活动板房了。这瓦是加厚的好瓦，我只能给你这么多。」</p><p>包工头又说，「喊你老婆子煮饭的时候帮这群人煮上，我一个月再给你们五百。柴米油盐我单独买。」</p><p>每周出去买菜的那个人就是张林。</p><p>就因为张林买的菜，白川对张林坏印象加剧。</p><p>每周三中午会炒一顿肉，但很明显，这肉是酸的。白川不好意思当面说，背后问四舅，四舅说莫管那么多。白川受不了，表面上被四舅呛了一口，鼓着气不说话。心里想着老子是来卖劳力的，你他妈不给我把吃的整好，我哪来的劳力。</p><p>下一次吃肉，果然味道还是不大对。百川看了一眼张林，这家伙基本都不怎么挑肉吃。白川拿筷子挑了几片肉往张林碗里放，「这肉味道可真好啊，来，林哥多吃点。」</p><p>张林连连摆手，「不不，你们动劳力的吃，我不喜欢吃肉。」</p><p>白川冷笑，「这么好味道的肉，我们可吃不来。」</p><p>张林听出白川语气有点不对，尝了碗里的肉一口。有时候会和白川会说两句话，晚上睡白川旁边的工友解围说：「年轻人嘴细哟，吃不得这粗饭。」</p><p>张林抿了下嘴，笑了一下。「各位哥，是我不对。这大热天的，肉放久了都放变质了，我看看以后是换个时间去买菜，或者我们提前把肉煮了吃了吧，哈哈。」</p><p>旁边人都顺着开始谈起最近的天气，试图想让暗藏的不和一笑而过。</p><p>吃完饭稍作休息，白川和四舅往工地上走。等周围没什么人了，四舅对白川一顿数落，就你话多是吧，就你会说话是吧？</p><p>白川没说话。</p><p>四舅看了白川一眼，叹了口气。「你小子是倔，但有些事情你不懂……我给你说，你做事多看看别人。你觉得那么多人都是傻子吗。」</p><p>四舅说：「你觉得是张林搞得鬼吧。」</p><p>白川也有一口气憋在喉咙管，吐出来，流畅且急促地说 「肯定是他狗日的买了烂肉，把钱自己顺去了。」</p><p>「你还小……这种事以后多着去了……这是老张两口子整的。」</p><p>「你替他说话干嘛，他今天都承认了……」</p><p>「他今天担下去了是他明事理，你就觉得旁边这些大人都是傻子？我们接下来几个月都要在这吃饭，老张整个一两次消消气肯定就算了，而且我们这阵子相处得也不错……你要是把人家得罪了，人家表面上道歉，以后背着给你饭里吐唾沫，搞些莫名其妙的东西，你能咋办？」</p><p>「出了门就要低调……」</p><p>说完，四舅喊白川先去桩口，他去领雷管。白川在岔路口沿着向上的道走，慢慢梳理着脑子里的信息。旁边先来的工友说张林是包工头的一个亲戚，是个大学生，来工地是挣学费。白川有点怀疑，才开学两个多月，挣鸡儿学费。</p><p>不一会，白川到了桩口，打算先用斗车把上午的碎石渣推走。不知为啥，工地上的工具从来都是旧的，连手套都是以前留下来的。四舅说他干了这么久，除了手套，也很少用过新工具。一旦什么坏了，工头总能整一样旧的回来顶替，要么就是找人修一修。你说，旧的总也是新的用旧的吧？那新的都他妈去哪儿了？</p><p>白川戴上左右都漏出两根手指的手套准备开始运石渣。先留了个心眼，白川检查了下斗车。</p><p>上周刚来的时候，白川他们工具不全，用的是旁边桩位的斗车。才用了两天，旁边的工友就说自己的斗车坏了不能用了，不肯再借。可白川明明看到对面还在用——四舅只好催张林给他们搞快整一辆。</p><p>不借就不借呗，为啥要睁着眼睛说瞎话。</p><p>他妈的人人都在睁着眼睛说瞎话。</p><p>白川想起两个月前还在上学的自己。</p><p>其实白川并不是不喜欢读书，他只是不喜欢上学——如果你整整两年多都坐在垃圾堆旁边，被老师讨厌，同学嘲笑，你也会讨厌上学。</p><p>作为一个中学生，白川长得很壮实——真得很壮实，具体身高体重不便表述，至少可以说是一眼看去不像是中学生那种壮实。有次班上几个同学把他拉进厕所，领头的那个家伙讲了一大堆关于班级团结的话，最后说旁边那个班看不起我们班，我们要打一架，你会来的吧？白川说「我不会打架。」有人踢了白川一脚，「你不会打架？」白川瞥了眼门后面重叠起的脚印。</p><p>「算了，他这样的，明天来了也没用。」</p><p>「反正就是那一套。」白川不想细谈，说絮絮叨叨那些东西没有意义。唯一值得提一下的是许浩，刚升初中的时候许浩成绩不错，还当过两学期学习委员，后来跟着别人混，中考考得不好，再后来好像去复读了。</p><p>说「算了」的就是许浩。白川觉得许浩比踢他的那个家伙还讨厌。虚伪，太他妈虚伪了。白川能看出许浩处于人群中的那种不和谐感。下课在厕所抽烟的那群少年里，许浩是唯一一个抽烟不过肺的。里面拿着烟的人吸了一口，把烟雾吐进另一个人嘴里，另一个人吞了一口又吐给下一个人。手里拿着烟的那个人说，「这他妈叫三、四……五手烟，有后劲。」在这种似乎宣告着某种地位的仪式里，许浩永远是最后接这多手烟的那个人。到他时已经看不到烟雾了，只有一股混合着烟草和口臭的空气。许浩咽了下去，从鼻孔长出一口气，笑着回应「后劲真大。」</p><p>白川低着头撒尿，目不斜视。仍好几次注意到许浩在人群中滑稽又卖力地表演。</p><p>「晚上还查锤子寝。」</p><p>白川注意到许浩停顿了一下，他肯定又在斟酌用词。</p><p>过了一小会，许浩说话了。「老师都他妈是傻逼。」</p><p>一群人就旁若无人地笑。「我就喜欢你这种，光读书有锤子用。」</p><p>许浩便细微地调整表情，做出被表扬的受用感。</p><p>「算了，他这样的，明天来了也没用。」许浩对旁边几个人说道，然后拉着他们往外走。等他们都出去后，白川才用手拍了下裤腿。</p><p>只是被踢了一脚而已——可能还会被再踢几脚。这也比被许浩那种虚伪的家伙可怜要好些。他有什么资格可怜我？白川待在原地瞎想。</p><p>只要学校还是一座牢笼，这种事就是会一直延续下去的困境。后来白川常看到各种「学家」对这种现象进行讨论，但似乎没人能搞清楚重点。为什么就没人明白呢？</p><p>破解之道其实很简单——放下自尊，融入泥潭。</p><p>当时的白川不懂维系关系，却似乎很能看清楚周遭事物的本质。</p><p>许浩说老师都是傻逼，白川却觉得老师都很聪明。教师似乎就是有这样一种能力——能看出一间教室里被排斥的那个人，然后把 ta 批为典型。</p><p>白川把自己当作例子分析，但后来有点搞不清楚到底是先有鸡还是先有蛋了。也许是教师先针对的他，然后学生们才开始顺势而为？</p><p>是从什么时候开始的呢？是白川帮前面女同学捡起橡皮擦，女同学却一脸嫌弃地把橡皮擦扔进后面垃圾堆？「我说了让你别捡！你碰过，我不要了。」</p><p>是班主任让大家放学后再在教室待半个小时自习，白川出去上了个厕所被对面的班主任看到。第二天白川被班主任拎上讲台，扯着头发扇了两巴掌？「我叫你自习，你跑出去干嘛？」</p><p>白川推着斗车站在老鹰嘴的坡道往远方望，旁边是桩井，再旁边有搅拌机开始混沙和水泥发出轰隆隆的响声。另一边的远处堆着几根直径有一米的水泥管，引爆雷管时白川他们就躲在那后面。</p><p>白川脑子里一瞬间产生了疑问，「我为什么要在这？」就像上学时，他问过自己「为什么非得上学？」学校里这么多傻逼，为什么我非要和傻逼挤在一块？</p><p>可是又有什么东西不一样。</p><p>四舅上来了。白川收回思绪，先干活吧。</p><p>第二天下雨，四舅和工友们打长牌，白川不会，也懒得学。他以前学过，但对赌博不太擅长。白川帮他们记账，发了工钱后大家才扯账。张林睡在旁边的隔间，走过来问白川要不要一起看光碟。四舅让白川去和张林耍，「你们年轻人有话说。」有人打哈哈，「有毛片莫得，我也要看。」四舅说「人家大学生。」「大学生就不是男人嗦。」</p><p>张林从外边接了个插线板到这间屋子，插线板放在桌子上，这张桌子算是特权，张林要学习。铺位则和外边的人一样，一层棉絮铺在水泥地上。桌子上有个小柜子，锁打开放在一边。张林一边问白川些有的没的，一边打开柜子，从里面拿出一个书本一样的袋子。白川注意到柜子里面还放了不少书。</p><p>这个袋子的每一页正反两面都插着一张光碟。张林问白川要看啥，白川说随便。张林没随便，他挑了一张，说「这张你肯定爱看。」然后从被子里掏出一个便携式的光盘播放器。</p><p>白川说，「来张你爱看的。」张林楞了一下，疑惑地说你说啥玩意。白川解释说，「你刚才说放一张我肯定爱看的。你喜欢看啥？给我放张你喜欢看的吧。」</p><p>张林哈哈一笑，「这张就是我爱看的。」</p><p>白川觉得这家伙没意思，明明自己喜欢看，嘴上却说放个别人喜欢的。</p><p>那次放了啥白川已经忘了，只记得是个外国的片。白川还是第一次看这种电影，他有点不习惯。人物说的话都听不懂，看啥玩意还。虽然有字幕——那也没用，看字幕时根本来不及看画面。</p><p>不过白川还记得他们聊了些啥。张林问白川了一个问题，知道这为什么叫老鹰嘴吗？</p><p>白川对这记得很清楚。因为他从来没考虑过这种问题。老鹰嘴就是老鹰嘴，别人那么叫它，白川就那么叫它。老鹰嘴就是这个地方，这个地方就是老鹰嘴。白川从来没想过老鹰嘴为什么叫老鹰嘴，也从来没想过老鹰嘴为什么叫老鹰嘴也是一个问题。</p><p>张林讲了个故事。</p><p>老鹰嘴之所以叫老鹰嘴，是因为这山上有一大块三角形的石头。尖嘴的这边收成一直不好，另一边却水沃田肥。慢慢地流出了一个传说，说是山顶那块石头本来是头老鹰，因偷吃粮食被山神化为石头。它变为石头后仍不改本性，尖嘴不停地吃，把这边的粮食全吃进肚子，又都排泄到了另一边的村子。这才导致两遍庄稼收成的迥异。</p><p>白川觉得有点意思。</p><p>「尖嘴这边没人去把那石头敲了？」</p><p>张林笑，「听说以前有人尝试过，但那山以前太险了，不好上去，而且另一边的人也不肯让他们这么搞啊。」张林站起来走到窗口，窗口没装窗子，就一个方形的大洞。雨滴打在屋顶的塑胶瓦上，噼里啪啦的，雨丝也不断从窗口飘进来。</p><p>张林指着山顶说，看那边。</p><p>白川看过去，山顶有座信号塔。</p><p>「那边以前有座水泥厂，把山挖空了有一半。后来水泥厂没搞了，这儿的人沿着坡走出了一条路。现在那条路挺宽的，车都可以上去。这座塔就是今年移动公司把材料拉过去安上的。」</p><p>数年来难以接近的地方现在居然开着车就能到达。白川觉得不可思议。</p><p>但这个角度看不清石头在哪。</p><p>「开车就能去？」</p><p>「对噢。」</p><p>白川冒出个念头，「走，我们去把那块石头炸了。」</p><p>「啥？」</p><p>「我可以拿几根雷管出来。」</p><p>「我没喊你解释怎么炸。你也太异想天开了。」张林没下过井，也知道雷管虽然有点威力，但肯定炸不动那么大的石头。</p><p>「哈哈哈哈。」</p><p>张林听白川笑了几声，知道他是在开玩笑了，还是补充了句「而且也太危险了。」</p><p>白川沉默了一下，问张林「你知道电视里……还有电影里，都是假的吗？」</p><p>「啥？」</p><p>张林觉得白川思维太跳跃了。</p><p>这是 7 岁的时候，白川同桌问他的问题。</p><p>「你知道吗？电视里都是假的哦。」</p><p>「什么是假的？」</p><p>同桌兴奋地昂头说，「都是假的。比如那个《封神榜》，里面死的人都是假的。」</p><p>「你的意思是那些人都没死？」</p><p>「是啊，他们是假死的。」</p><p>之前，白川从来没考虑过这种问题，就像「老鹰嘴为什么叫老鹰嘴」一样。</p><p>白川感到一丝悲哀，本来有人提醒过他的，他同桌就提醒过他。可是他忘了。张林今天提起，白川才意识到自己之前也意识到过：「自己从来没想过这些问题。」白川觉得那时的自己就像是活在游戏里的 NPC，或者末日里的僵尸。有人尝试过唤起他，可他自己没有兴趣。</p><p>「带我去那边山上看看呗。」</p><p>雨停了后张林去开车，白川本来打算借口上厕所去拿几根雷管，想了想，觉得躲着张林就不能拿引爆器，到时候用石头砸的话确实有点危险，便作罢。</p><p>十多分钟，俩人就从这边下去，从那边山上爬起。这山远远看起云雾缭绕挺有意境，进去了才发觉雾气太他妈干扰视线了。</p><p>张林把车停在稍远的地方。地下有一堆压扁的大纸箱子，旁边砌了一堆泡沫，这些东西就堵在路中间。纸箱子全湿了，泡沫表面似乎涂了什么防水的涂料，表面形成了几颗水滴。前面码了一圈围墙，围着的就是他们之前看到的信号塔。那块石头应该就在塔子后面的悬崖处，白川估计着距离往前走。</p><p>沿着围墙走过去，出现在眼前的景象让白川呼了一声卧槽。张林从后面疾步走过来，「哈哈，看样子有人先你一步。」</p><p>一览无余的空旷，碎石从围墙后面开的门口处铺了一条长长的小道直到悬崖边。这显然是那块大石头被炸后的现场。白川上到窄路，有点磕脚。沿着碎石道走到悬崖边，风的触感越来越明显。</p><p>白川有种错觉，好像与青春有关的一切，性欲、精力、迷茫、还有其它未曾经历过的东西，都随着那块石头消失了。</p><p>「整他妈这些，」白川用脚尖在碎石里滑动，「花里胡哨的。」</p><p>风在山丘间奏起巨响。</p><p>「这场景有点像一部电影。」张林说。</p><p>「啥？」</p><p>「这场景有点像一部电影。」张林重复了一遍。</p><p>「啥电影？」</p><p>「我忘了。」</p><p>两人无言地望向前方。</p><hr><p>「对，就是这样，我开始对电影感兴趣。但后来我看了很多部片子都没找到这样的场景，你能帮我找找吗？」</p><p>「但说实话，我对很多事情都不确定。比如我不知道老鹰嘴之所以叫老鹰嘴是不是真的是因为有这么个传说，所以我也不确定那山上是不是真的有那么一块石头。」</p><p>白川的故事讲完了，喝了一口手里的矿泉水。现在的白川一个平头，没故事里的黄毛。白川说读书的时候，总觉得染个头发特炫酷。不过村里的流行总和大城市有一段长时间的滞后，当他成年后来大城市讨生路，发现现在的流行已经是批判以前那种流行了。作为一个出村的人，他肩负着普及家乡潮流的重任，所以剃了平头表示与过往的决裂。</p><p>我有点佩服他的志气，问他普及得咋样。白川腼腆地笑了下，说好几年没回去了，还没来得及。</p><p>那是 12 年，我在北京卖盗版碟，当时白川 20 岁左右，我们坐在马路边吹了一会牛。他是我的第一个客人。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 故事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 故事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间加速的季节</title>
      <link href="/2019/11/02/time/"/>
      <url>/2019/11/02/time/</url>
      
        <content type="html"><![CDATA[<p>又开始了，对，又他妈开始了。在这写字 —— 准确来说不过是释放情绪，就是我减压的方式。刚好前阵子换域名了（其间种种暂且不提），我又回到了原始状态。好啊。「毕竟人只要与外界有了那么一丝丝的联系，心里也会产生被别人关注着的错觉，然后发状态就会像整理仪容一样小心翼翼。」我们就活在恐惧里，卧槽。没有表达，只有迎合、粉饰、还有逃避。但是，尼玛拒绝交流也是逃避啊。就算在这个世界上只有两种生活方式，我这是胡说八道，但 —— 来吧，就让我们假想一个只有两种生活方式的世界。就算是这样的世界，我敢打包票，不同的想法仍然有千千万万亿亿。然后这千千万万亿亿的思想就被囚禁在两条轨道里。太漂亮了，我还没读过描绘这样美好世界的小说。等我以后 —— 有钱了，我就雇个人来写。</p><p>这是个很好的时代，十八岁的少年挤满了图书馆，试图给人生寻找一个解释。我本来也想参与进去，后来想想还是你们去吧，等搞明白了告诉我就行了。尼玛的，小气鬼，两面三刀。嘴上说着没问题，但当我询问他们时，一个二个都带着静默的微笑。狗屎，你们自己去玩吧。</p><p>没搞明白的我不搞了，搞懂了的我还要想办法忘掉。我已经不再 18 了，我的人生不需要一个解释。我的欢乐时光就要开始了！</p><p>我喜欢的东西很多，讨厌的东西也挺多。但我没怎么在这谈起过，恰好我这几天我有点郁闷，就在这发泄下好了。</p><p>我讨厌评分机制！我讨厌有些人明明什么都不懂！不知所以然！却能靠着几颗简单的星星对别人热爱的事物指手画脚。一方面，如果我真的对什么东西热爱，那么早就应该对这种事持以平常心才对。另一方面，深层次的原因 —— 其实不能怪那些评分的人。</p><p>「don`t hate the players,change the game.」</p><p>上《管理学》时，书上有一个例子。大意是这样的：一个昼夜轮班的车间，工人效率不高。于是「管理大师」在白天的工人下班后，统计生产情况，把产量标在车间入口处。夜班的工人来了后，疑惑地看着数字，问周围的人这啥玩意儿啊。然后就有「知情人士」回答，这个啊，这个是今天下午车间主任来统计了白天的产量，然后写在这里的。于是上夜班的工人就像机器一样，按下了「激励」的开关。好啊你们白天的家伙，你看着，我们要做得比你们更好……</p><p>狡猾的资本家。（笑。真正的共产主义者从不屑于隐藏自己的观点。</p><p>不过这毕竟是数十年前的例子了。</p><p>尼玛尼玛尼玛，我一直觉得审美应该是没有门槛的！或许有门槛，但是尼玛，这个门槛也不该观众买单。这个门槛应该由创作者，策划人来解决！</p><p>我基本上在任何事物都处于鄙视链的底端，于是常思考到底啥是「品位」。我得出了一个结论，这个结论应该是从别的地方读来的吧（我也不确定从哪来的了。</p><p>「品位」通常意味着「门槛」。</p><p>我胡说八道一下啊，反正我什么都不懂，说错了我也不怕。</p><p>你看，当你想要提高自己的品位，那就需要把自己代入这个「门槛」所规定的「框架」内。而这个框架是怎么来的呢？</p><p>许多的学科都是经验学科，这其中又有许多学科的建立是依靠归纳来的！</p><p>我靠。凭什么我自己的感受非得限制在你的框架下啊。</p><p>如果你是搞学术的，那么按照这个框架研究是很安全的，不会出啥幺蛾子。</p><p>但我只是感兴趣而已！！然后有观点会说你连这都不愿意深入，说明你不是真正的热爱。</p><p>反正总有人要以此保证自己的优越感。（摔</p><p>我愿意把它当参考！绝不愿意把它当权威！</p><p>比如谈电影。（我终于漏出狼子野心了</p><p>从基本的叙事、到细节、再到技术层面、到人文关怀哲学讨论。一部作品肯定是各有侧重啊，有谁会面面俱到啊。你面面俱到了依然有人吐槽价值观老套。</p><p>举一个例子。比如经常有人指出「穿帮」镜头。穿帮有两类，一类是镜头内明显的穿帮，一类是剪辑导致的穿帮。「穿帮」这个词在媒体和大量劣质的影视作品下，基本上已经定义为贬义词了。但是，作为创作者来说，这之间却有一个取舍问题。比如一个镜头里，角色的情绪表现得非常完美却有一处其它的小瑕疵，那么是保留这个镜头还是重拍呢？ —— 此时甚至还没考虑经费等问题。</p><blockquote><p>不过现在计算机技术已经很牛皮了，PS 一下应该不难吧……这放下不表。</p></blockquote><p>创作者在表达过程是有所侧重的！（甚至可能有所阉割</p><p>从这讲下去可以提出一个同样很有趣的问题：即非受众有权利评价一部作品吗？这个问题已经很难回答了，因为现在几乎所有的创作都只有一个方式才能找到受众 —— 商业化，接受市场检验。又扯远了卧槽……</p><p>反正哪儿都有这样的人，像语文老师一样发问，嘿，你知道邓辛斯基第二部片子里的车夫是谁演的吗？或者自我陶醉，这样做肯定很屌！</p><p>干！怎么吐槽到最后我开始骂自己了！（我摔</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 观与感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 看片所想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>舔狗之歌</title>
      <link href="/2019/10/09/song/"/>
      <url>/2019/10/09/song/</url>
      
        <content type="html"><![CDATA[<p><s>2017-06-24</s></p><p>你不晓得吧，每次回应你的留言就感觉突然回到了那年的语文考场。因为是第一堂，整场考试我都激动地发抖。而此刻的我就像是在做一道高考语文的分析题，担心说的不好，担心说的不够动听，又担心说的话超过我们现在关系该说的词汇，还担心回你太晚你会不高兴……我怕我们的关系止步于此，又怕我们的关系不只如此。我纠结。我是个傻叉。</p><p><s>2019-03-22</s></p><p>他们说你试试吧，放下自尊心你也可以的。</p><p>可是每当我摇起尾巴，你的手就会收回去。</p><p>为什么呢？我像个沙雕一样追问。</p><p>是因为堵车、丢了钥匙、找不到厕所吗？</p><p>像梦里那样。</p><p><s>2019-07-25</s></p><p>还没开始就辩解 心里知道却</p><p>我好像因为你变得不自由了</p><p>可这又不能怪你 你啥都不知道</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 环境下如何挂载未越狱的 iOS 设备</title>
      <link href="/2019/10/02/ifuse/"/>
      <url>/2019/10/02/ifuse/</url>
      
        <content type="html"><![CDATA[<h2 id="changelog"><a class="markdownIt-Anchor" href="#changelog"></a> ChangeLog</h2><p>[2020-02-10-update] <s>在 Manjaro 上安装有点问题，还没折腾出来。</s></p><p>[2020-03-18-update] Arch 系的看文档好了： <a href="https://wiki.archlinux.org/index.php/IOS" target="_blank" rel="noopener">Arch_IOS</a></p><h2 id="tldr"><a class="markdownIt-Anchor" href="#tldr"></a> TL;DR;</h2><p>核心是两个包：libimobiledevice，用于 Linux 与 IOS 设备通信；ifuse，用于挂载 IOS 设备的文件。</p><p>至于下面提到的 ideviceinstaller，则用于查看 IOS 的 app bundleID，即 IOS 设备安装的 app 的标识码。非必要。（如果你记得或通过其它途径能找到对应软件的标志码的话……）</p><h2 id="需求"><a class="markdownIt-Anchor" href="#需求"></a> 需求</h2><p>需求：把本地的电子书、电影、音乐等放进 iOS 设备方便使用。若是在 Windows 环境，有各种助手……Linux 咋整呢？</p><p>（非越狱前提下：）</p><h2 id="限制"><a class="markdownIt-Anchor" href="#限制"></a> 限制</h2><p>挂载 <code>com.apple.Music</code> 等软件的 Documents 目录，以及尝试 <code>--container</code> 挂载时，报错 <code>ERROR: InstallationLookupFailed</code> 。</p><p>有可能是 <code>UIFileSharingEnabled</code> 的问题，但我不确定。</p><p>可能的解决方案（我没试过）：也许可以先通过助手（或者 libimobiledevice）安装 apple music 等软件的 ipa，然后尝试管理。</p><h2 id="步骤"><a class="markdownIt-Anchor" href="#步骤"></a> 步骤</h2><h3 id="一-linux-挂载-ios-设备"><a class="markdownIt-Anchor" href="#一-linux-挂载-ios-设备"></a> 一、Linux 挂载 iOS 设备</h3><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libimobiledevice-utils</span><br><span class="line"><span class="comment"># sudo pacman -Sy libimobiledevice</span></span><br></pre></td></tr></table></figure><p>装上后，Linux 的机子就可以连接 iOS 设备了。</p><p>用数据线连接电脑与 iOS 设备后，在 iOS 端点击信任。之后，<strong>（一般来说）文件管理就会自动挂载上 iOS 的存储器。</strong></p><blockquote><p>文件管理器自动挂载上也不过是把设备挂载到 <code>/media</code> 。如果没自动挂载上而有需求，可以手动挂载。</p><p>如果使用 ifuse，执行 <code>ifuse &lt;挂载点&gt;</code> 即可。例如：</p><p><code>ifuse /hqweay_phone</code></p></blockquote><p>不过，存储器里只有图片、视频、以及「<strong>通过各种助手安装的软件的文件夹</strong>」等……</p><blockquote><p>联系上面提到的 <a href="#%E9%99%90%E5%88%B6">限制</a> 。</p></blockquote><p>这样已经能读到「通过各种助手安装的软件的文件夹」了。举个例子，如果我们需要把 Linux 电脑上的一本电子书放进 iOS 上的「多看阅读」，就可以先通过「各种助手软件」安装「多看阅读」，然后执行上面步骤，再直接把电子书放进多看阅读的文件夹。</p><p>cool！不过我们能不能读取到通过 App Store 安装的软件的文件夹呢？</p><p>看下面啦。</p><h3 id="二-ifuse"><a class="markdownIt-Anchor" href="#二-ifuse"></a> 二、ifuse</h3><p>通过 ifuse 可以挂载「通过 App Store 安装的软件的文件夹」到电脑。</p><h4 id="arch-安装"><a class="markdownIt-Anchor" href="#arch-安装"></a> Arch 安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Sy ifuse</span><br></pre></td></tr></table></figure><h4 id="手动安装"><a class="markdownIt-Anchor" href="#手动安装"></a> 手动安装</h4><p>先下载并安装 ifuse。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; cd 到要安装的目标路径，然后：</span><br><span class="line"></span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;libimobiledevice&#x2F;ifuse.git</span><br></pre></td></tr></table></figure><p>编译安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 将源码在本机编译：</span><br><span class="line"></span><br><span class="line">.&#x2F;autogen.sh</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 执行脚本ifuse到系统终端（其实也可以不用，直接去src中运行也可以）</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>编译途中可能会报错缺少依赖，按报错缺啥安装啥即可……</p><h3 id="三-ifuse-使用"><a class="markdownIt-Anchor" href="#三-ifuse-使用"></a> 三、ifuse 使用</h3><p>各种命令详情见文档。</p><p><a href="https://github.com/libimobiledevice/ifuse" target="_blank" rel="noopener">https://github.com/libimobiledevice/ifuse</a></p><p>我们要干啥？要操作「通过 App Store 安装的软件的文件夹」。</p><p>ifuse 在这里起的作用便是把「通过 App Store 安装的软件的文件夹」挂载出来。</p><p>整个步骤分三步：一、在电脑上创个空文件夹（挂载点）；二、找到要操作的软件的唯一标识号；三、通过标识号把软件的文件夹挂载到挂载点。</p><h4 id="创建挂载点"><a class="markdownIt-Anchor" href="#创建挂载点"></a> 创建挂载点</h4><p>创个空文件夹。例如文件夹名 <code>hqweay_phone</code>。</p><h4 id="获取-app-bundleid"><a class="markdownIt-Anchor" href="#获取-app-bundleid"></a> 获取 app bundleID</h4><p>获取软件的唯一标识 app bundleID。</p><p>需安装 <code>ideviceinstaller</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yay -Sy ideviceinstaller</span><br><span class="line"><span class="comment"># sudo apt-get install ideviceinstaller</span></span><br></pre></td></tr></table></figure><p>执行 <code>ideviceinstaller -l</code>。</p><p>参数说明：</p><blockquote><p>-l, --list-apps List apps, possible options:<br>-o list_user - list user apps only (this is the default)<br>-o list_system - list system apps only<br>-o list_all - list all types of apps<br>-o xml - print full output as xml plist</p></blockquote><p>会列出 <code>com.coderforart.iOS.MWeb</code> 这类包名……这就是 app bundleID。</p><h4 id="执行挂载"><a class="markdownIt-Anchor" href="#执行挂载"></a> 执行挂载</h4><p>执行 <code>ifuse --documents [app bundleID] [空文件夹]</code>。</p><blockquote><p>–documents 挂载 Documents 目录</p><p>–container 挂载 sandbox</p></blockquote><p>例如 MWeb</p><p><code>ifuse --documents com.coderforart.iOS.MWeb hqweay_phone/</code></p><p>或多看阅读</p><p><code>ifuse --documents com.duokan.reader hqweay_phone/</code></p><p>kindle</p><p><code>ifuse --documents com.amazon.Lassen hqweay_phone/</code></p><p>挂载上就可以把操作该软件的文件夹了。</p><p>注意开发者使用文件夹的规则不同，请确保文件放入的文件夹是软件对应的本地文件存放目录……</p><h4 id="卸载"><a class="markdownIt-Anchor" href="#卸载"></a> 卸载</h4><p>使用完了记得卸载……</p><p><code>fusermount -u [空文件夹]</code></p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 配置与操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置与操作 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jekyll-hexo-hugo 互相迁移时关于永久链接的问题</title>
      <link href="/2019/09/23/jekyll-hexo-hugo/"/>
      <url>/2019/09/23/jekyll-hexo-hugo/</url>
      
        <content type="html"><![CDATA[<h2 id="ps"><a class="markdownIt-Anchor" href="#ps"></a> PS</h2><p>[update-2020-07-12]：我自己又读了一遍，发现前面的配置还有可取之处，但是后面的说明实在是逻辑混乱胡说八道。看到这篇文章的朋友请酌情阅读。</p><h2 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h2><p>在各个静态博客网站生成工具之间迁移文章时，可能会遇到链接不一致的问题。</p><p>比如你在 <code>jekyll</code> 配置好了，文章链接是 <code>https://leay.net/2019/09/23/new-post</code> 。迁移到 <code>hexo</code> ，文章链接又变成了 <code>https://leay.net/2019/09/23/2019-09-23-new-post</code> 。</p><p>通常，为了 SEO、使用第三方评论、或其它原因，我们总希望博客迁移后，链接保持能不变。</p><p>这里讨论一下我使用 <code>jekyll</code> 、<code>hexo</code> 、<code>hugo</code> 在迁移数据时关于链接问题的一些感想。</p><hr><p>先给一下方案，我建议文章按照 <code>year-month-day-title.md</code> ，即 <code>年-月-日-标题.md</code> 的格式命名。比如 <code>2019-09-22-new-post.md</code> 。之所以建议这样命名，是因为 <code>jekyll</code> 要求文章的文件名必须遵循这种格式。而 <code>hexo</code> 与 <code>hugo</code> 则没有这样的要求，后两者默认 <strong>文件名</strong> 作为标题。</p><p>以这种方式命名，<code>hexo</code> 与 <code>hugo</code> 仍可以通过配置获取到真正的 <code>title</code> 。而若不这样这样命名，如果想使用 <code>jekyll</code> 还得修改文件名。</p><blockquote><p>虽然我觉得接触过 hexo 和 hugo 的人恐怕不会想着回到 jekyll 了吧……</p></blockquote><p>而且通过年、月、日、标题的命名，在文件夹排列看起来比较清爽，同时还可以避免文件名冲突。</p><hr><p>而生成的链接，我建议使用 <code>/year/month/day/title</code> ，比如 <code>https://leay.net/2019/09/23/new-post</code> 。</p><p>如果只用 <code>title</code> 作为链接，比如 <code>https://leay.net/new-post</code> ，若两篇文章 <code>title</code> 一样的话，就 <strong>可能</strong> 会冲突。用年、月、日、标题确定唯一的文章，就很难冲突啦。</p><blockquote><p>这点和上面文件夹命名同理。</p></blockquote><p>其实只是为了不冲突，<code>https://leay.net/2019-09-23-new-post</code> 这样的链接也行。不过把时间区分出来观感好点……</p><hr><p>给出方式。</p><h2 id="如何配置"><a class="markdownIt-Anchor" href="#如何配置"></a> 如何配置</h2><h3 id="jekyll"><a class="markdownIt-Anchor" href="#jekyll"></a> jekyll</h3><p>文件名 ：<code>year-month-day-title.md</code></p><p>配置文件 <code>_config.yml</code> 添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink :</span> <span class="string">/:year/:month/:title</span></span><br></pre></td></tr></table></figure><h3 id="hexo"><a class="markdownIt-Anchor" href="#hexo"></a> hexo</h3><p>文件名 ：<code>year-month-day-title.md</code></p><p>配置文件 <code>config.yml</code> 添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">new_post_name:</span> <span class="string">:year-:month-:day-:title.md</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br></pre></td></tr></table></figure><h3 id="hugo"><a class="markdownIt-Anchor" href="#hugo"></a> hugo</h3><p>文件名 ：<code>year-month-day-title.md</code></p><p>配置文件 <code>config.toml</code></p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[frontmatter]</span></span><br><span class="line"><span class="attr">date</span>  = [<span class="string">":filename"</span>, <span class="string">":default"</span>]</span><br><span class="line"></span><br><span class="line"><span class="section">[permalinks]</span></span><br><span class="line"><span class="attr">post</span> = <span class="string">"/:year/:month/:day/:slug/"</span></span><br></pre></td></tr></table></figure><hr><p>这里先提一下，<code>post = &quot;/:year/:month/:slug/&quot;</code> 这条配置规则指的是 <code>hugo</code> 的 <code>content</code>文件夹下的 <code>post</code> 文件夹下的文章都用这条规则来解析。</p><p>如果 <code>content</code> 文件夹下还有其它文件夹，则其它文件夹下的文章的链接解析不受此规则影响。</p><p>比如 <code>content</code> 下有 <code>study</code> 和 <code>life</code> 两个文件夹，则两者都需要配置上。</p><p>如</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[frontmatter]</span></span><br><span class="line"><span class="attr">date</span>  = [<span class="string">":filename"</span>, <span class="string">":default"</span>]</span><br><span class="line"></span><br><span class="line"><span class="section">[permalinks]</span></span><br><span class="line"><span class="attr">study</span> = <span class="string">"/:year/:month/:slug/"</span></span><br><span class="line"><span class="attr">life</span> = <span class="string">"/:year/:month/:slug/"</span></span><br></pre></td></tr></table></figure><p>为啥呢？</p><h2 id="说明-2"><a class="markdownIt-Anchor" href="#说明-2"></a> 说明</h2><p>先提一下，现在手上没有 <code>jekyll</code> 环境，也没看过源代码，以下都是我的猜测理解……</p><p>一般的静态网页生成工具都提供文件名与链接地址的映射。</p><p>比如文件名为 <code>2019-09-23-new-post.md</code> ，若生成静态页面且部署后，访问的链接可能是这样的。</p><p><code>https://leay.net/2019-09-23-new-post</code></p><p>观察这个链接，会注意到文件名被直接解析为文章链接的后缀。</p><hr><p>静态网页生成工具通常通过 <code>permalink</code> 这个属性来配置链接的生成规则。<code>permalink</code> 是<code>Permanent Link</code> 的缩写，可译作 <strong>永久链接</strong> ，简单来讲，也就是指一个 <code>url</code> 对应一篇文章。</p><hr><p>在 <code>jekyll</code> 中，文章的命名格式是 <code>2019-09-23-new-post.md</code> ，即 <code>year-month-day-title.md</code> 。这种命名格式是 <code>jekyll</code> 的要求。</p><hr><p>在默认情况下，若配置文件中不配置 <code>permalink</code> ，或者配置 <code>permalink: date</code> ，链接就被解析为 <code>https://leay.net/2019/09/23/new-post.html</code> 。</p><p>——注意，上面这样配置，会跟上后缀 <code>.html</code> 。</p><p>若配置为 <code>permalink : /:year/:month/:title</code> ，链接则解析为 <code>https://leay.net/2019/09/23/new-post</code> 。</p><p>没有 <code>.html</code> 后缀。</p><p>具体配置方式比较多，详见官方文档。</p><h3 id="从-jekyll-迁移至-hexo"><a class="markdownIt-Anchor" href="#从-jekyll-迁移至-hexo"></a> 从 jekyll 迁移至 hexo</h3><p><code>hexo</code> 与 <code>jekyll</code> 的不同之处在于，<strong>hexo 可以取博文在 Front Matter 中定义的时间</strong> 。</p><p>写文章时常常有这样的内容。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: post</span><br><span class="line">title: 快乐星猫</span><br><span class="line">date: 2017-08-20</span><br><span class="line">categories: life</span><br><span class="line">toc: true</span><br><span class="line">tags: [充数]</span><br><span class="line">description:</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">我是一只猫，快乐的星猫～</span><br></pre></td></tr></table></figure><p><code>---</code> 中间那一坨就是 <strong>Front Matter</strong> 。</p><p><code>jekyll</code> 规定了文件名格式为 <code>year-month-day-title.md</code> ，就是为了从文件名取 <code>date</code>。</p><p>而 <code>hexo</code> 默认文件名为 <code>title</code> ，它优先从 <code>front matter</code> 里取 <code>date</code> 。</p><hr><p><code>hexo</code> 的链接和配置文件中两条属性相关。</p><p><code>permalink: :year/:month/:day/:title/</code> 链接的格式</p><p><code>new_post_name: :title.md</code> 解析标题方式</p><p>上面列出来的是默认配置。</p><p>在默认配置下，如果文件名为 <code>2019-09-23-new-post.md</code> ，解析出来的链接为 <code>http://leay.net/2019/09/23/2019-09-23-new-post/</code> 。</p><p>不对劲吧。</p><p>这就是因为在 <code>hexo</code> 的 <code>permalink</code> 里，默认的 <code>:year</code> ，<code>:month</code> 等使用的是 <strong>front matter</strong> 里的 <strong>date</strong> 。</p><hr><p>我们分析下链接 <code>http://leay.net/2019/09/23/2019-09-23-new-post/</code> 。</p><p>前面的 <code>2019/09/23</code> 对应的是 <strong>front matter</strong> 里的 date，后面的 <code>2019-09-23-new-post</code> 对应的则是文件名。</p><hr><p>为啥？</p><p>上面提到了。<code>jekyll</code> 要求的文件名格式是 <code>year-month-day-title.md</code> ，就是为了把文件名中的 <code>year</code> 、<code>month</code> 等取为 <code>date</code> 。但是 <code>hexo</code> 没这个要求，文件名格式就是 <code>title.md</code> 。即，默认文件名作为 <code>title</code>。然后，取 <code>front matter</code> 里的时间作为 <code>date</code> 。</p><hr><p>那咋整呢？如果要把博文从 <code>jekyll</code> 迁移到 <code>hexo</code> ，这不是有冲突吗。</p><p>这就需要用到上面的第二条属性了。</p><p><code>new_post_name: :title.md</code> 解析标题方式</p><p><code>new_post_name</code> 可以配置解析文件名的方式。</p><p>默认 <code>new_post_name: :title.md</code> 就是把文件名作为 title。</p><p>修改为 <code>new_post_name: :year-:month-:day-:title.md</code> 。</p><p>这时候，<code>hexo</code> 就会把文件名中定义的时间当作 <code>date</code> 使用了。</p><hr><p>回头看一下。文件名为 <code>2019-09-23-new-post.md</code> 。</p><p>配置</p><blockquote><p><code>new_post_name: :year-:month-:day-:title.md</code></p><p><code>permalink: :year/:month/:day/:title/</code></p></blockquote><p>此时，链接就为 <code>http://leay.net/2019/09/23/new-post/</code> 了。</p><h3 id="从-hexo-迁移至-hugo"><a class="markdownIt-Anchor" href="#从-hexo-迁移至-hugo"></a> 从 hexo 迁移至 hugo</h3><p><code>hugo</code> 和 <code>hexo</code> 类似，默认以文件名作为 <code>title</code> 。</p><p>即便我们没使用过 <code>hugo</code> ，也可以畅想一下，<code>hugo</code> 里有没有类似 <code>hexo</code> 这样的配置？</p><p>一：配置解析链接的规则。</p><p>二：从文件名提取真正的 <code>title</code> 。</p><p>带着疑问查看文档。</p><h4 id="permalinks"><a class="markdownIt-Anchor" href="#permalinks"></a> permalinks</h4><p>首先看到了 <code>permalinks</code> 的配置。</p><p><a href="https://gohugo.io/content-management/urls/#permalinks" target="_blank" rel="noopener">https://gohugo.io/content-management/urls/#permalinks</a></p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[permalinks]</span></span><br><span class="line"><span class="attr">posts</span> = <span class="string">"/:year/:month/:title/"</span></span><br></pre></td></tr></table></figure><blockquote><p>Only the content under <code>posts/</code> will have the new URL structure. For example, the file <code>content/posts/sample-entry.md</code> with <code>date: 2017-02-27T19:20:00-05:00</code> in its front matter will render to <code>public/2017/02/sample-entry/index.html</code> at build time and therefore be reachable at <code>https://example.com/2017/02/sample-entry/</code>.</p><p>只有 <code>/posts</code> 文件夹下的文件才会匹配这条链接解析规则。如，文件 <code>content/posts/sample-entry.md</code> ，它在 <code>front matter</code> 里配置了 <code>date: 2017-02-27T19:20:00-05:00</code> 。这个文件在 <code>build</code> 时就会被渲染为网页，放至 <code>public/2017/02/sample-entry/index.html</code> ，通过链接 <code>https://example.com/2017/02/sample-entry/</code> 访问。</p></blockquote><p>这样可以配置解析链接的规则，但同时也如文档所说，<strong>此时使用的 <code>date</code> 是 <code>front matter</code> 里定义的，而且 <code>title</code> 是文件名</strong>。</p><h4 id="瞧瞧-hugo-文件的-front-matter"><a class="markdownIt-Anchor" href="#瞧瞧-hugo-文件的-front-matter"></a> 瞧瞧 hugo 文件的 front matter</h4><p>瞧瞧 <code>front matter</code> ……</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: "快乐星猫"</span><br><span class="line">date: 2019-09-23T23:00:01+08:00</span><br><span class="line">draft: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure><blockquote><p>注意！默认生成的文章中， <code>date</code> 使用的时间格式是 <code>YYYY-MM-DD HH:MM:SS +0800</code> 。（格式不作说明了。）</p><p>没看文档，网上资料说时间格式必须这样。从 <code>hexo</code> 迁移到 <code>hugo</code> ，也需要注意这个，把时间修改一下。</p><p><s>但是我貌似没修改也渲染出来了……</s></p><p><s>不过我现在不打算折腾 hugo，这个疑问先留着吧……</s></p><p>不改也是可以的！！</p></blockquote><h4 id="frontmatter"><a class="markdownIt-Anchor" href="#frontmatter"></a> frontmatter</h4><p>那有没有解析文件名的配置呢？</p><p>这里～</p><hr><blockquote><p><a href="https://gohugo.io/getting-started/configuration/" target="_blank" rel="noopener">https://gohugo.io/getting-started/configuration/</a></p><p><code>:filename</code></p><p>Fetches the date from the content file’s filename. For example, <code>2018-02-22-mypage.md</code> will extract the date <code>2018-02-22</code>. Also, if <code>slug</code> is not set, <code>mypage</code> will be used as the value for <code>.Slug</code>.</p><p>An example:</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[frontmatter]</span></span><br><span class="line"><span class="attr">date</span>  = [<span class="string">":filename"</span>, <span class="string">":default"</span>]</span><br></pre></td></tr></table></figure><p>The above will try first to extract the value for <code>.Date</code> from the filename, then it will look in front matter parameters <code>date</code>, <code>publishDate</code> and lastly <code>lastmod</code>.</p></blockquote><hr><p>配置</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[frontmatter]</span></span><br><span class="line"><span class="attr">date</span>  = [<span class="string">":filename"</span>, <span class="string">":default"</span>]</span><br></pre></td></tr></table></figure><p>你看，这里 <code>date</code> 对应一个数组，<code>hugo</code> 会去这个数组，按照元素顺序寻找 <code>date</code> 。</p><p>在上面的配置里，<code>hugo</code> 就优先从文件名（“filename”）中获取 <code>date</code> 。</p><p>比如有篇文章命名为 <code>2018-02-22-mypage.md</code> ，那么其中的 <code>2018-02-22</code> 就会被提取为 <code>date</code>。</p><p>如果文件名没有 <code>date</code>，<code>hugo</code> 就从 <code>：default</code> 去寻找。（:default 指的啥，以及具体配置请查看文档……）</p><hr><p>同时，若 <code>slug</code> 没有设置，则 <code>mypage</code> 会设置为 <code>slug</code>。</p><p>这里的 <code>slug</code> 是个新概念。<code>slug</code> 可以在 <code>front matter</code> 配置。</p><h4 id="slug"><a class="markdownIt-Anchor" href="#slug"></a> slug</h4><p>看说明，</p><blockquote><p>slug：The token to appear in the tail of the URL</p></blockquote><p>这啥玩意……</p><blockquote><p>我的理解是：反正看样子这玩意是用来配置 <code>url</code> 的，<code>url</code> 在哪配置，在 <code>permalink</code> 嘛。那这应该是配置 <code>permalink</code> 的一个变量。</p></blockquote><p>可以先不管，反正只要我们按照 <code>year-month-day-title.md</code> 这样来命名文件，<code>slug</code> 在这里显然指的就是 <code>title</code>。（虽然 <code>slug</code> 的定义应该比这大……）</p><hr><p>然后回到 <code>permalink</code> 的配置，发现确实有个 <code>：slug</code>。</p><blockquote><p><code>:slug</code></p><p>the content’s slug (or title if no slug is provided in the front matter)</p></blockquote><p>这里的 <code>:slug</code> 就是指 title。</p><hr><p>好，配置 <code>permalinks</code> 吧。</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[permalinks]</span></span><br><span class="line"><span class="attr">post</span> = <span class="string">"/:year/:month/:day/:slug/"</span></span><br></pre></td></tr></table></figure><p>结束。</p><h4 id="那-slug-与-title-的区别是啥"><a class="markdownIt-Anchor" href="#那-slug-与-title-的区别是啥"></a> 那 :slug 与 title 的区别是啥？</h4><p>如果我们用标题作文件名，链接也只会使用标题。</p><p>比如 <code>post.md</code> 会解析为 <code>https://leay.net/post</code>。</p><p>如果文件名冲突咋办？</p><p>这时就可以在 <code>front matter</code> 里设置 <code>slug</code> 来区分。</p><hr><p>另一个问题，文件名怎么会冲突呢？</p><p>前面提到过，在保存博文文件的 <code>content</code> 文件夹下可以分文件夹保存博文，不同文件夹下就可能文件名冲突。</p><p>其实如果我们不设置 <code>permalinks</code> ，<code>content</code> 下若有两个文件夹 <code>life</code> ，<code>study</code> 。</p><blockquote><p>– /content</p><p>---- /life</p><p>------ <a href="http://post.md" target="_blank" rel="noopener">post.md</a></p><p>---- /study</p><p>------ <a href="http://post.md" target="_blank" rel="noopener">post.md</a></p></blockquote><p><code>life</code> 下有一个 <code>post.md</code> 会被渲染为 <code>https://leay.net/life/post</code>，<code>study</code> 下的 <code>post.md</code> 则会被渲染为 <code>https://leay.net/study/post</code>。</p><p>但若设置了 <code>permalinks</code> ，链接就不会像这样默认加上子文件夹 <code>life</code> 或者 <code>study</code> 了。两者都会被渲染为 <code>https://leay.net/post</code>，这时，就产生冲突啦！</p><h4 id="总结一下"><a class="markdownIt-Anchor" href="#总结一下"></a> 总结一下</h4><p>先配置</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[frontmatter]</span></span><br><span class="line"><span class="attr">date</span>  = [<span class="string">":filename"</span>, <span class="string">":default"</span>]</span><br></pre></td></tr></table></figure><p>优先从文件名获取 <code>date</code> 。然后把 <code>title</code> 解析为 <code>slug</code> 。</p><p>再通过</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[permalinks]</span></span><br><span class="line"><span class="attr">post</span> = <span class="string">"/:year/:month/:day/:slug/"</span></span><br></pre></td></tr></table></figure><p>配置链接解析规则。</p><hr><p>此时的 <code>:year</code> 、<code>:month</code> 、<code>/:day</code> 就是从文件名获取的 <code>date</code>。</p><p><code>:slug</code> 是从文件名解析出来的 <code>title</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 自己浅见 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>译 - Annie Hall (1977) - The Movie Screen Scene</title>
      <link href="/2019/08/25/T-annie-hall-1977/"/>
      <url>/2019/08/25/T-annie-hall-1977/</url>
      
        <content type="html"><![CDATA[<h2 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h2><p>原文：<a href="https://themoviescreenscene.wordpress.com/2018/11/27/annie-hall-1977/" target="_blank" rel="noopener">Annie Hall (1977)</a></p><p><em>November 27, 2018</em></p><p><strong>安妮霍尔（1977）</strong></p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/study/2019-08-25-annie-hall-1977/20190825205853.jpg" alt="img"></p><p>Woody Allen（伍迪艾伦）最好的电影是哪一部？由于每个人都有自己观影的口味，而且他的片子实在太多了，这个问题真的很难回答。也许你更喜欢他早期的那些喜剧？比如 Love and Death《爱与死》，Sleeper or Bananas《傻瓜大闹科学城》。Manhattan《曼哈顿》算是伍迪艾伦最精致的电影吗？还是说你更喜欢 Hannah and Her Sisters《汉娜姐妹》这样的主流电影？或者你更喜欢折衷一点的，比如 Zelig 《西力传》，A Midsummer Night’s Sex Comedy《仲夏夜性喜剧》这样的片？</p><p>伍迪艾伦的最佳电影是哪部并没有一个定论，但至少我们可以肯定地说，Annie Hall《安妮霍尔》是他最重要的一部——虽然也有不少人觉得这部片子是他巅峰之作。一提这部电影，大量记忆犹新的镜头就会浮现在眼前——像是伍迪艾伦在厨房追逐逃跑的龙虾、一个不合时宜的喷嚏把昂贵的可卡因全都吹散。</p><blockquote><p>伍迪艾伦吸可卡因打喷嚏这场戏是个意外事件，并没有写在剧本上。在电影试映时，观众看到这段暴笑不止，导演于是决定保留这一段。为了弥补因为观众笑得太长时间而错过了接下来的几个笑话，不得不增加电影胶片的长度。</p></blockquote><p>伍迪艾伦对 Annie Hall 其实并不是很满意，他认为这部电影并没有完全展现出他希望表达的东西。然而 Annie Hall 却是他票房第四高的电影，而且这部电影还获得了第 50 届奥斯卡金像奖的最佳影片、最佳女演员、最佳导演和最佳剧本奖这四项奖项。除此以外，这也是伍迪艾伦唯一一部自己以演员的身份获得奥斯卡提名的片子。</p><blockquote><p><a href="https://ew.com/movies/2017/05/17/woody-allen-annie-hall-not-great/" target="_blank" rel="noopener">Woody Allen doesn’t think <em>Annie Hall</em> is that great Or ‘Manhattan,’ or ‘Hannah and Her Sisters’</a></p><p>伍迪艾伦凭借 Annie Hall 获得「第 50 届奥斯卡金像奖最佳男主角提名」</p><p>伍迪艾伦是好莱坞各大奖项的常客，曾 23 次获得<em>奥斯卡提名</em>，3 次获得编剧奖。</p></blockquote><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/study/2019-08-25-annie-hall-1977/20190825205939.jpg" alt="aaaaaa"></p><p>Annie Hall 在伍迪艾伦的导演和写作生涯里起着关键作用。这部电影是伍迪艾伦从纯粹的喜剧到制作电影的一个转折点，它牺牲了一些幽默，有一个更严肃的创作意图，也更具艺术性。不过这并不是说安妮霍尔就不够有趣了，只是伍迪艾伦并不想仅仅止步于取悦观众。</p><p>这种转折是在 Annie Hall 之前开始的。Love and Death（爱与死）虽然也是一部喜剧，但它的主题是「死亡」，而且带着一种滑稽的悲观基调。 Play It Again Sam《呆头鹅》是伍迪艾伦第一次尝试以纯粹的人际关系为主题的喜剧，没有涉及罪犯、没有香蕉共和国、没有未来世界的反乌托邦也没有 19 世纪的俄罗斯人。不过从女主 Annie Hall 和一个 40 岁、满脑子都是对死亡的思考、直到现在都还没能够和别人维护一段持续的亲密关系的男人热恋这一点来看，安妮霍尔仍然是一部伤感而有趣的电影。</p><blockquote><p>这几个主题都是伍迪艾伦之前的片子里的元素。香蕉共和国出自 Bananas、未来的反乌托邦出自 Shadows and Fog、19 世纪的俄罗斯人则出自 Love And Death。</p></blockquote><p>这也反映在电影的智识框架中。伍迪艾伦早期的电影也提供了一系列令人印象深刻的文化参考，Annie Hall 则更积极地展示了他的学识。这部电影充满了对 Freud（弗洛伊德）、Wagner（瓦格纳）、Sylvia Plath（西尔维娅·普拉斯）、Fellini（费里尼）、Balzac（巴尔扎克）和其他一些人的热情。</p><blockquote><p><strong>西格蒙德·佛洛伊德</strong>（德語：Sigmund Freud，出生名：Sigismund Schlomo Freud，1856年5月6日－1939年9月23日），奥地利心理學家、精神分析學家、哲學家，犹太人。</p><p><strong>威廉·理查德·瓦格纳</strong>（德語：Wilhelm Richard Wagner，1813年5月22日－1883年2月13日），德国作曲家、劇作家，以其歌劇聞名。</p><p>伍迪艾伦说过：“I just can’t listen to any more Wagner, you know……I’m starting to get the urge to conquer Poland.”</p><p><strong>希薇亚·普拉斯</strong>（英语：Sylvia Plath，1932年10月27日－1963年2月11日），生于美国波士顿牙买加平原区，儿童作家出身的美国天才诗人、小说家及短篇故事作家。</p><p><strong><em>費德里</em>柯·費里尼</strong>（義大利語：Federico Fellini，1920年1月20日－1993年10月31日），義大利藝術電影導演，同時也是演員及作家。</p><p><strong>奥诺雷·德·巴尔扎克</strong>（法语：Honoré de Balzac，1799年5月20日－1850年8月18日），原名<strong>奥诺雷·巴尔扎克</strong>（Honoré Balzac），法国19世纪著名作家，法国现实主义文学成就最高者之一。</p></blockquote><p>没有迎合观众的打算，伍迪艾伦很乐意拍一部台词比活动占更大比重的电影。这部电影的镜头平均时长达到了 14.5 s，对于 20 世纪 70 年代来说，这可是相当长了。和现在电影里的接连不断的跳切相比，更是非常不同的风格。丰富到足以填满几部电影的内容被整合进 Annie Hall 这一部电影里，不得不说这实在是一个充满创意的制作人的作品。</p><blockquote><p>jump-cutting 跳切，电影术语。</p></blockquote><p>Annie Hall 显然属于精英主义。男主角 Alvy Singer（由伍迪艾伦自己扮演）在电影院排队等候时表达了他对一个讲话不客气的男子的厌恶。对于持以不同艺术观点的人，他表示对他们的坏品味感到遗憾。还有一些场合也会让 Alvy 皱眉，比如遇到一个粗俗、不拘礼节的人想让 Alvy 写他的笑话，或者观看用上了笑声音轨的喜剧节目。</p><blockquote><p>laughter track 笑声音轨。喜剧节目里那些提前录好的笑声。</p></blockquote><p>就连 Alvy 和 Annie 的神经质都在某种程度上被视为他们高智商的证据。在一个场景里，Alvy 询问一对年轻的夫妇为什么他们在一起那么快乐，然后那位女士回复说，「我很浅薄，空洞，没有自己的想法，也说不出什么有趣的东西。」她的男性伴侣也对此表示认同。在某种程度上，不快乐其实是知识分子的特权。</p><p>虽然电影展示了人物的博学，但也有观点表示，虽然电影里的人物都很聪明，但他们对自己的情感和需求已经没有自己的理解了。情绪被理智和药物控制，失去了真正的意义。Alvy 在和 Annie 复合时谈到了自己的成熟，但是当他和 Annie 分手时又说了同样的话。其实在这两种情况下，Alvy 都没表现得有多成熟。</p><p>这似乎是社会上普遍存在着的一种不安，就像 Alvy 的朋友 Rob（Tony Roberts 饰）对自己的性生活吹嘘不已，常搞些花里胡哨的名堂让自己看起来没那么老。Alvy 所处的 New Yrok 温暖、充满活力，与 Rob 浅薄颓废的 California 形成鲜明的对比。还有一个例子，Annie 的哥哥告诉 Alvy，说他有时候开车，会想着一头撞上其他车的前灯。这让 Alvy 之后的行车之旅很不舒服。</p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/study/2019-08-25-annie-hall-1977/20190825210009.png" alt="aaaaa"></p><p>不过影片的重心还是聚焦在 Alvy 和他分分合合的女友 Annie Hall（Diane Keaton 黛安·基顿饰）身上。在影片的开头，Alvy 用了两个笑话向观众做自我介绍。下面是第一个：</p><p><em>有两位老妇人在 Catskills mountain（卡茨基尔山）度假，其中一个说：「哎，这地方的食物可真够糟的。」另一个说：「可不是嘛，给的份量还那么少。」你瞧，我对生活的看法基本上也是如此：尽管充满了寂寞、痛苦、悲惨和不幸，但又觉得一切都逝去得太快。</em></p><p>这奠定了 Alvy 性格的基础。Annie 后来告诉他，他无法享受生活。我们可以在电影里看到，当 Alvy 还是个孩子时（仍然戴着大眼镜），他拒绝做家庭作业，因为他对宇宙终有一天会终结感到沮丧。他就是我们从众多伍迪艾伦的电影里了解到的那个人物——一位依赖药物，一生都在接受治疗却没有从中得到任何慰藉的精神病患者。</p><p>即便是非常细枝末节的事，Alvy 也完全不讲道理。由于 Annie 的迟到，电影已经开始了两分钟，Alvy 就拒绝入场看电影；因为被别人在大街上认出来而感到恼火；乐此不疲地反复观看 The Sorry and the Pity（悲哀和怜悯，原名是 Le chagrin et la pitié）这部关于大屠杀的消极电影。</p><p>事实上，Alvy 的部分不安全感与他的犹太教育有关。他有点好笑地偏执于路人对他犹太身份的「暗示」，然而这所谓的「暗示」大部分都发生在他的脑袋里。比如别人把 ‘Did you?’ 简称为 ‘D’you?’，他坚持认为别人说的是 ‘Jew?’。在和身为 WASP 的 Annie 约会时，这种偏执便导致 Alvy 产生了一些莫名其妙的念头。</p><blockquote><p>WASP：White Anglo-Saxon Protestants</p><p>有点难解释，举个例子：「近年来美国保守和宗教势力一直在扩大，很多 WASP 从原教旨主义基督教的教义出发，反对堕胎、同性婚姻甚至同性恋等自由主义者支持的事务，希望能够“恢复美国式的生活”。」</p></blockquote><p>有一个场景，Alvy 和 Annie 冷淡的家人们共进晚餐，Alvy 不安地意识到 Annie 的格莱美奶奶，这个讨厌犹太人的「霍尔奶奶」（‘Grammy Hall‘）正嫌弃地看着他。然后镜头展现出他在脑海里打扮成一个犹太教经师的场景，人物的不安就从视觉上让观众体会到了。伍迪艾伦通过使用分屏的手法展现两个不同的家庭在晚餐时的表现，以鲜明的对比强调了冷淡的 Annie 一家和 Alvy 成长的热闹犹太家庭之间的差异。</p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/study/2019-08-25-annie-hall-1977/20190825210032.jpg" alt="aaaaaaa"></p><p>在电影开头，Alvy 讲的第二个笑话是这样的：</p><p><em>另一个对我来说比较重要的笑话，一般认为它出自于格劳乔·马克斯，但是我想它最初出现在弗洛伊德的《诙谐及其与无意识的关系》一书中。是这样的，我来大致复述一下：「我永远也不想加入一个会员都是我这样的人的俱乐部。」这是我成年生活的关键笑话，它说明了我与女人之间的关系。</em></p><blockquote><p>《诙谐及其与无意识的关系》：弗洛伊德对笑话和幽默进行精神分析论述的德文书籍（原标题为 Der Witz und seine Beziehung zum Unbewußten），初版于 1905 年，1960 年被翻 译成英文。</p></blockquote><p>像 Alvy 这样充满问题的人会和女性有什么关系？和什么样的女性呢？当然了，和他一样有很多问题的女性。Alvy 在打网球时遇到了一个年轻女性，Annie Hall。Annie 她那笨拙的道歉方式，有趣的台词（“la-de-da” 是我们记忆最深的一句），还有奇特的穿着风格，和 Alvy 简直是天生一对。</p><p>Alvy 带着观众快速回顾了他之前的婚姻——为了避免和第一任妻子发生性关系，他花时间和她讨论肯尼迪的暗杀阴谋论；在第二次婚姻中，他试图使用性来表示对他妻子上层阶级朋友们的反抗。</p><p>然而，就像在电影结尾的那段蒙太奇里展示的欢乐时光一样，很显然 Annie 才是他一生中的真爱，也是他最怀念的一任女友。不幸的是，Alvy 不想加入会员都是他这种人的俱乐部。他不能接受爱而不破坏它，因此他和 Annie 的关系是注定要失败的。这一点在电影开头就有说明，所以我这并不算剧透哈。</p><p>Alvy 和 Annie 之间的关系开始得太顺畅了，以至于找不到一个明显的，能解释他们为何分开的理由。他被她的粗心与个性所吸引，她则着迷于他的风趣和才智。他鼓励她作为一个个体去成长、用自己的品味教育她、支持她想做一名歌手的尝试、并说服她去上课。</p><p>随着 Alvy 用他不正常的精神状态、猜疑和偏狭去驱赶 Annie，这段关系很快就恶化了。当他通过询问 Annie 是否在经期来驱散她的坏情绪时，也在期待她能持续关注他的感受。明明是他鼓励 Annie 去修读大学的课程的，现在 Alvy 却因为担心她会外遇，对上课这件事产生了敌意。</p><p>伍迪艾伦塑造了许多不断成长的女性角色。他帮助她们发展提高，又担心有一天她们会超越他，继续前进。比如在这些电影里：Manhattan（曼哈顿）、Hannah and Her Sisters（汉娜姐妹）、Deconstructing Harry（解构爱情狂）。女性需要一个男人来帮助她们成长，这种观点可能有点太自恋了。但在伍迪艾伦的电影里，这是一个固定的主题。</p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/study/2019-08-25-annie-hall-1977/20190825210058.jpg" alt="aaaa"></p><p>Annie Hall 多大程度上算是伍迪艾伦的自传作品？伍迪艾伦总是迅速地将自己和他作品里的人物撇清关系，然而他们的性格总是惊人地相似。虽然他作品里的主角不完全是按他自己来塑造的，但是毫无疑问，他把自己的性格和经历经过夸张，扭曲后糅入了角色。</p><blockquote><p>《安妮·霍尔》经常被认为是半自传电影，但此说法已被伍迪艾伦否认。</p></blockquote><p>想想看，Alvy 是一个喜剧作家，他的名字听起来和 Allen（艾伦）很相似，Alvy 童年时的一些事儿也发生在伍迪艾伦身上。然后是伍迪艾伦和 Diane Keaton（黛安·基顿）间并不成功的关系，而且黛安·基顿的真名也叫作 Hall（霍尔）。事实上，黛安·基顿的确表明了 Annie Hall 就是一个和蔼版本的她自己。</p><p>Annie Hall 这部电影自由、非线性的结构正体现了影片中两个中心人物混乱，无组织的思维和生活。在这种技巧下，伍迪艾伦得以打破传统的叙事方式，自由地向我们传递他想要表达的任何东西。Annie Hall 的结构如此松散，以至于我们完全感觉不到现在看到的版本其实在第一个版本上剪去了 50 分钟。</p><blockquote><p>PS：第一个版本有 140 分钟。</p></blockquote><p>这种结构下，即便伍迪艾伦频繁地展现他的叙事技巧，角色的形象仍然牢固地竖立在我们脑海里，观众似乎在切身感受角色们的焦虑与担忧。每次脱离传统的叙事手段，都加强了我们对 Alvy 和 Annie 的认识和理解。</p><p>有时候，这些手段被用于展现 Alvy 和 Annie 的不契合。他们相遇的那天，Annie 邀请 Alvy 去她家。他俩看似颇有兴致地讨论着艺术，屏幕底部的字幕却向观众们展现了他们真正在考虑的东西——担心失态、被对方当作笨蛋、以及一些与性相关的东西。</p><p>在另一个场景里，Alvy 想要和 Annie 做爱。Annie 否认自己分心了，但是我们看到的却是，Annie 的灵魂脱离了身体，坐在椅子上。Annie 的灵魂甚至对着越来越恼火的 Alvy 说道，「Alvy，你知道我把画板放哪儿了吗？我想我可以趁着你们干这事时画上两笔。」</p><p>还有一个场景，我们看到他们一起乘坐飞机，同时，他们的想法通过画外音的形式传递出来，展示了他们对相同经历的理解差异有多大。还有一次，Alvy 和 Annie 和他们的心理医生交流时，伍迪艾伦通过一个分屏镜头也向我们展示了类似的不和谐，以及思维方式间的巨大鸿沟。（顺便提一下，这里并不是真正的分屏。他们俩在一间屋子里，然后通过镜头调度制造了一种分屏的错觉。）</p><p>虽然电影制作里经常使用闪回，但许多都显得非常刻意。在 Annie Hall 这部电影里，Annie 则真的带着 Alvy 去看她年轻时和前男友们相处的情形。Alvy 倾听他们的谈话并不断地评论。作为回报，Alvy 则带着 Annie 和 Rob 回到了他家去看他小时候的样子。当 Rob 向 Alvy 的家人提问并得到回答时，这一切都在真实发生着的错觉就就从观众心里烟消云散了。</p><p>因为电影里的角色们都在讲话，所以第四面墙经常被打破。比如电影刚开始时，我们不知道 Alvy 到底在和谁讲话。也许是心理医生、又或者是摄影组、也可能是我们。在另一个场景里，Alvy 靠近，面向镜头，向一个声音洪亮、固执己见、和他有着不同艺术看法的人表达愤怒。</p><p><img data-src="https://cdn.jsdelivr.net/gh/hqweay/picbed/study/2019-08-25-annie-hall-1977/20190825210121.jpg" alt="aaa"></p><p>不仅仅是 Alvy，Alvy 批评的这个男人也站了出来维护自己的观点。作为回应，Alvy 从海报后请出了 Marshall McLuhan（马歇尔·麦克卢汉）。（Alvy 批评的这个男人一直在对麦克卢汉发表高论，麦克卢汉愤怒地告诉这个人，他完全误解了麦克卢汉的作品。）当然，这并没有真实发生。最后 Alvy 对着镜头若有所思地说道：「哎，如果生活都像这样的话！」</p><blockquote><p>这是麦克卢汉本人扮演的。</p></blockquote><p>幻想还发生在其他场景里，比如 Alvy 和 Annie 迪士尼风格的卡通形象、演员们根据 Alvy 的剧本演出 Alvy 和 Annie 最后一次会面的场景。与现实不同，剧本里有着一个美满的团聚。「啧，你想怎样？」Alvy 询问我们，「你知道，人们总是试图通过艺术来表达完美结局，毕竟这在现实生活真的很难实现。」</p><p>即使是配角也会脱离他们的位置来和我们交谈。在 Alvy 给我们展示他学生时代对性发狂的那个场景里，Alvy 思考着他的同学们现在都在做什么。有几个孩子就对着镜头告诉我们现在他们在哪工作，还谈了一些他们在未来的成人生活里一些没啥必要的细节，例如对海洛因上瘾、迷恋皮革。同样，Alvy 可以在街上随便找个人讲话，而且别人还会淡定地回复。虽然有些人的回答很奇怪。一个人就这么说：「我们用一个大振动蛋。」</p><blockquote><p>I’m into leather.</p><p>这份剧本翻译为「我经营皮货。」</p><p>这里应该表达的是喜欢的意思。</p></blockquote><p>有人可能会觉得 Annie Hall 对人际关系持以悲观态度。最终魔法失效了，他们之间的关系也随之破裂。在某种程度上确实如此，但其实这部电影也主张爱和亲密关系。即便是 Alvy，这个把所爱之人赶走的家伙，也强调了爱和亲密关系的重要性：</p><p><em>我意识到她（Annie）是一个多么好的人，能认识她就是一件多么有趣的事。我想起了那个老笑话，有个家伙去看精神病医生，他说：「大夫，我兄弟疯了，他以为他自己是一只鸡。」然后医生说：「那你怎么不把他带来？」那家伙说：「我是想带他来着， 可是我需要鸡蛋啊。」你看，我想这就是现在我对男女之间关系的感觉。它是完全非理性的、疯狂的、甚至荒谬的，但是我们还一直要经历这一切，因为我们大多数人都需要鸡蛋。</em></p><h2 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h2><p>文中涉及到影片及书籍采用豆瓣译名</p><p>台词翻译和部分注释引用自 <a href="http://subhd.com/a/336202" target="_blank" rel="noopener">http://subhd.com/a/336202</a></p><p>由于网络问题，我把原博文中的图片缓存了一份。</p><blockquote><p>这篇影评对文本（特别是片中的三个笑话），影片叙事手段的解读挺有启发性的。推荐！</p></blockquote><p>[update-2020-02-12]</p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 看片所想 </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 启动 Idea 报错 if you already hava a 64-bit JDK……以及 failed to create jvm……</title>
      <link href="/2019/08/23/idea-jvm/"/>
      <url>/2019/08/23/idea-jvm/</url>
      
        <content type="html"><![CDATA[<h2 id="报错"><a class="markdownIt-Anchor" href="#报错"></a> 报错</h2><p><img data-src="https://img-blog.csdnimg.cn/20190823103030974.png" alt="在这里插入图片描述"></p><h2 id="解决"><a class="markdownIt-Anchor" href="#解决"></a> 解决</h2><p>看到这个报错，第一时间搜索 jdk 的解决方案，然后重新配置了下环境变量。</p><p>无效。</p><p>回头，注意到下面的 JVM 错误。</p><p>突然想起昨天用 Idea 时设置过 JVM 的参数，然后搜索了下。</p><p>遇到网友们的一些情况。</p><h3 id="一-破解报错"><a class="markdownIt-Anchor" href="#一-破解报错"></a> 一、破解报错</h3><p>可能是破解时修改 <code>idea[64].exe.vmoptions</code> 文件，导致错误。</p><p>一般有两种情况：参数写错，或者用记事本编辑保存时，文本编码格式出错。</p><blockquote><p>Idea 启动时会加载这里的参数。那款破解插件的加载方式就是在这里配置的。</p></blockquote><p>解决方式：确保正确填写参数，保存时不要变动文本编码格式。</p><p><strong>PS：该破解插件的作者已经不建议用这种方式了（大概就是因为使用的人经常出这样的问题）……详情搜索引擎了解吧。</strong></p><h3 id="二-用户配置文件出错了"><a class="markdownIt-Anchor" href="#二-用户配置文件出错了"></a> 二、用户配置文件出错了</h3><p>我自己的问题应该是昨天点击 Help -&gt; Edit Custom VM Options，然后添加参数时出了某种问题。</p><blockquote><p>具体是啥我忘了，解决完了才来写这个的……</p></blockquote><p>解决方式 ：一刀切，删除 <code>C:\Users\用户名\.IntelliJIdea2019.2\config</code> 下的 <code>vmoption</code> 文件。</p><p><strong>PS</strong>：<strong>如果你有能力，完全可以手动排查是哪行参数导致了问题，或者也可以备份再删除。但对我来说，这个配置没啥重要的东西，所以就直接删了。</strong></p><p>注意：是删除 <strong>用户目录</strong> 而不是 Idea 安装目录下的 <code>vmoption</code> 文件！！！</p><blockquote><p>用户目录下的 <code>vmoption</code> 文件和 Idea 安装目录下的 <code>vmoption</code> 文件，它们的功能是一样的。不过用户目录的 <code>config</code> 文件夹下保存的是「用户配置」，Idea 安装目录的 <code>config</code> 下保存的是「默认配置」。</p><p>Idea 启动时会优先考虑「用户配置」，找不到「用户配置」就会去加载「默认配置」。</p><p>同理，如果你把其它的配置玩坏了，也可以删除这个「用户配置」，Idea 重新启动时就会去加载「默认配置」。</p></blockquote><p>PS：<strong>如果删了「用户配置」还出错，那就回到 <a href="#%E4%B8%80%E3%80%81%E7%A0%B4%E8%A7%A3%E6%8A%A5%E9%94%99">一、破解报错</a> 的情况了。请检查「默认配置」的编码格式以及参数是否正确配置。</strong></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>主要就是「用户配置」与「默认配置」的区别！知道了这个，按需操作就行了。</p><p>我上面写了「一刀切，直接删除『用户配置』」，是因为我的配置里没有啥重要的东西，删了也无所谓。</p><p><strong>如果你的配置比较重要</strong>，只要理解了「用户配置」与「默认配置」的区别，<strong>依次检查它们并改正</strong>就行了。</p><p>虽然问题的表现效果一样，但导致问题的原因却各有不同，不过问题的本质始终是一致的。多多注意啊！</p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 配置与操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置与操作 </tag>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一片荒芜</title>
      <link href="/2019/08/16/gluckli/"/>
      <url>/2019/08/16/gluckli/</url>
      
        <content type="html"><![CDATA[<p>一下楼就开始落雨，我需要在雨落得更大之前赶往 10 分钟自行车车程外的地铁站，更甚，在乌云移向北方 20 公里的终点站前抢先走出站台，然后趁着雨滴打下来之前赶回宿舍。</p><p>这毫无疑问是场与雨点的竞速。</p><p>我突然感觉自己似乎理解了王小波的一个比喻，「眼前这世界真是一个受精场所。」我想，这世界可能更像是一根巨大的输精管，在上帝的快感里，人生不过是没有目的地的逃亡。从这样的世界观推论，雨滴更像是我们的兄弟姐妹，为什么要躲着他们呢？</p><p>不行啊，人，哪怕是最原始的形态，也会不停地给自己找对手。我们最擅长地就是把自己和身边的人作比较，把朋友当对手，在交往中斟酌。这么说起来，即便是我这样的家伙，也曾在一个男人的身体里与数亿同类竞争，还成了第一名，真是不可思议。连我自己也不禁怀疑，凭什么？</p><p>可能比起竞赛，生命更大程度上偏向于一种偶然性。</p><p>啊，多么老套的论调。对于世界的诠释，难道真的还能产生什么新鲜的观点吗？只有这个岁数的家伙会不厌其烦地重复这样浅薄的胡言乱语然后向全世界炫耀，自以为发现了什么了不起的真理吧。</p><p>人行道摆满了自行车，非机动车道无数逆行人。在潮流中，总感觉自己像是卡在城市这台机器里的沙粒，被齿轮摩擦，却还没被碾碎。虽然比起它的体型，我显得有点微不足道，但我仍把自己当作和它旗鼓相当的对手。在某种程度上，我们互相看不起对方。</p><p>我是以梦为马的堂吉诃德，正奔向现实这架风车。</p><p>第一次来这里，出站台时听到广播在放以这座城市作为歌名的歌曲。当时产生了一种很微妙的感觉。这是谁的城市呢？是本地人？还是慕名的游客？但总之，我不敢把自己代入其中。这座城市总归是不属于卒卒汗流的过客。三过而不入，连家也会变得陌生。</p><p>但这里终究还是有许多的事情发生，还有不少爱好以别人的不幸做下酒菜的人。不管怎么说，人总比事重要。事可以再做，人却不能再活。我听说有人发了疯，有人暑假骑行去了趟布达拉宫。他们的共同点在于最终都成了诗人。前者在社交平台发了许多对这个世界的深刻洞见，我只有一再提醒自己你也会被送进精神病院的才能忍住转发点赞的冲动。后者被净化后连文字也变得凉快起来，我在烈日下费劲地辨认手机屏幕上的文字，深深叹服。</p><p>我怎么能不经同意就把别人随意写进自己的文字呢。我该向他们道歉才对。他们知不知道自己不经意的行动给一个不算熟悉的人带来多大震撼？我通过解读别人的行为来构建自己的世界观，这算什么？我该被狠狠地挨一顿毒打。</p><p>你笑，全世界都陪你笑，你哭，只有你一个人哭。每个人都应该学会在解读日常中娱乐自己。而解读，通常意味着门槛。倘若你承认了这个门槛，就等于把自己置于别人的评判体系下。</p><p>上周凑热闹看了《寄生虫》，结尾有段暴力戏看得我很压抑。不知为何，我突然悲观地感到《进击的巨人》这部漫画可能得不到一个很完美的结局。</p><p>创作者指出了某种对立，这种对立可能暗喻了这个世界的某种矛盾。但是解决方式呢？</p><p>这似乎是个无解的问题。</p><p>所以《火影忍者》最后也成了所谓的嘴炮作品，通过讲道理来解决冲突。（可能连作者自己都没说服）</p><p>《寄生虫》对于矛盾的解决方式是安排一场暴力戏，不管怎么说，这虽然激荡了情绪，也能引发思考，但是对于问题的解决终究是差了点意思。</p><p>《进击的巨人》呢？它也许可以通过安排剧情的反转带来一些惊喜，但对于世界的诠释，难道真的还能产生什么新鲜的东西吗？</p><p>难道真的有什么完美的答案吗？</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>译 - Write Like You Talk - Paul Graham</title>
      <link href="/2019/08/03/T-write-like-you-talk/"/>
      <url>/2019/08/03/T-write-like-you-talk/</url>
      
        <content type="html"><![CDATA[<h2 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h2><p>原文：<a href="http://paulgraham.com/talk.html" target="_blank" rel="noopener">Write Like You Talk</a></p><p><em>October 2015</em></p><p><strong>聊天那样写作</strong></p><p>这是一个可以让你的文字吸引更多读者的小技巧——像聊天那样写作.</p><p>大多数人在开始写作时都会遇到这样的问题，他们用与平时说话时完全不同的遣词造句来写作。在英语语境中，没有人聊天时会把「pen」当作动词使用。如果你和别人吹牛时不说「写（write）什么」而是说「笔（pen）什么东西」，就会有种违和感。</p><blockquote><p>pen 在书面语中也有「写」的含义。如：He penned a letter to the local paper.</p></blockquote><p>比如前几天我就读到了一句难以忍受的句子。原文是这样的：</p><p><em><strong>The mercurial Spaniard himself declared: &quot;After Altamira, all is decadence.&quot;</strong></em></p><blockquote><p>这个变幻莫测的西班牙人自己宣称：「<a href="https://zh.wikipedia.org/wiki/%E9%98%BF%E5%B0%94%E5%A1%94%E7%B1%B3%E6%8B%89%E6%B4%9E" target="_blank" rel="noopener">阿尔塔米拉</a> 之后，一切皆是堕落。」</p></blockquote><p>这句话出自 Neil Oliver 的书籍 <em>A History of Ancient Britain</em>。恕我冒昧，其实我并不想拿这本书来举例。毕竟比起许多其它的书来说，它还不算太糟。先不说这个，请尝试想像一下，当你和朋友吹牛时，把毕加索（Picasso） 称之为「The mercurial Spaniard（变幻莫测的西班牙人）」会是怎样一个场景。聊天时，这样的话哪怕只有一句也会让人感到诧异，人们却就是用着类似这样的句子写了一本又一本的书。</p><p>确实，书面语和口语有差异。不过这种差异真的使书面语变得糟糕了吗？</p><p>如果你期待着别人去阅读并理解你写的东西，那么没错，确实如此。书面语更复杂，读起来也就更费劲。同时，书面语也更正式、陌生，这会让读者难以集中注意力。不过这些问题都还好，也许最糟糕的是：复杂花哨的句子会让你——写作者，误以为自己表达了很多东西。</p><p>并不是复杂的句子才能阐释晦涩的概念。当研究深奥问题的专家们互相讨论各自领域的研究时，氛围其实就如同在聊早上吃了啥一样简单。当然，他们会使用一些生涩的术语，但也仅限于不可避免时。在我的经验里，一个话题越难，专家们谈论起来就越不那么讲究。我认为一部分原因是源于他们的谨慎，另一部分原因则是，一个领域越复杂，能用语言表达的东西就越少。</p><p>某种程度上，通俗的表达就如同思想的小钢炮。</p><p>当然，我并不是说使用口语总能达到非常好的效果。对于诗歌，文字之于它就如音符之于音乐，你自然可以用上许多吹牛时不会使用的言辞。至于散文，也有一些作者能用华丽的文字写出及其精彩的文章。另外还有这样的情况：有时表达者并不想让读者轻易搞懂他们的真实意图——例如公司发布的一些负面信息的声明。又或者，免不了要虚伪一下时，人嘛。不过除此之外，对几乎所有人来说，口语才是更好的写作方式。</p><p>这么说下来，似乎用口语来写作对于大多数人来说有点困难。这里有个不错的方案：先按通常的方式写下初稿，然后逐句细读，一边读一边问自己，「我是这样讲话的吗？」如果你对某个句子给出了否定的答案，那么就想像一下聊天时你会怎么来表达这句话里的意思，然后用新的表达替换掉之前的句子。过一段时间后，这种替换操作就会像一个严谨的机器一样，在你写文章时一丝不苟地工作。每当你敲击键盘，正要写下一些过于书面的句子，这个机器就会「叮当」一声在你的脑海里发出警告。</p><p>发布一篇新文章前，我会大声朗读它，然后修改其中所有聊天时不会使用的表达，甚至包括那些读出来发音尴尬的部分。我也不确定这样是不是过头了，但至少反正也不费什么劲。</p><p>不过这种方式也并不总是够用。我之前没有用口语写作时，句与句之间总是不连贯。对这种情况，有个更激进的解决方案。那就是写完初稿后，试着向一个朋友解释你刚刚写下的东西，然后把草稿换成你刚刚对朋友说的话。</p><p>经常有人告诉我说读你的文章就像是在和你聊天。这展现了人们很少用口语写作这一值得讨论的事实，否则每个人所写的东西读起来都应该像是在和作者聊天。</p><p>如果你能想办法用口语去写作，那你就超过了 95% 的写作者了！这做起来也非常简单——确保你写下的每一句话都像是在和读者聊天。</p><p><strong>Thanks</strong> to Patrick Collison and Jessica Livingston for reading drafts of this.</p><h2 id="其它"><a class="markdownIt-Anchor" href="#其它"></a> 其它</h2><p>[update-2020-02-10]</p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>地铁上的你</title>
      <link href="/2019/08/02/20190802/"/>
      <url>/2019/08/02/20190802/</url>
      
        <content type="html"><![CDATA[<p>「人的视线总是会被信息量大的东西吸引。平时我都盯着手机，不方便时我就看交通路线图和注意事项。比如前天，我站着研究了半个多小时地铁的部署，明明是从北到南的一整条，居然从中间断开分为三号线和七号线，啥玩意儿啊。当然也有今晚这样的时候，脚掌最好贴着地板移动，不然抬起来就连脚尖也放不下去了。我开始怀念在学校旁边的站台，大概都是青涩所以还保持着点浪费公共资源的矜持，不至于把这铁皮当作沙丁鱼罐头。这种情况下能干什么呢，看窗外吗。有时候会有亮着的屏幕从外边闪过，夸张的人像保持着端庄的仪态。之后便是长时间的黑，我们就都从另一旁的镜像世界浮出来了。人的视线不是总会被信息量大的东西吸引吗，我一时大意，视线便收不住手飞向那边的你。那后脑勺有注意到我吗？你在想些什么呢？这样的喧嚣里怎么也能轻巧地翻动书页？为什么看了一眼指示牌？会在哪一站下？揣摩着这些东西，我便躁动着弄丢了今晚的闲暇。终于，三站后，你起身了！我一心急，紧随你踏了半步出去，想要占据这个空位。没想到这个时候一位大姐远远地喊了句，诶！这里有座位。这句话仿佛是定身的咒语，我被控制着收回了自己的臀部与抬起来的脚，看着她走过来，坐下去了！然后我就单脚站立直到终点站。」</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 故事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 故事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>梦开始的地方</title>
      <link href="/2019/05/26/yo/"/>
      <url>/2019/05/26/yo/</url>
      
        <content type="html"><![CDATA[<p>在这趴着睡了一会，醒来颌关节发痛。干，太惨了。</p><p>在微博上放纵，偶尔装模作样似乎也能显得有趣，被别人搭讪了几句便觉得自己搞不好真有这样的天赋，能靠着人格魅力交些朋友。比方说觉得该讲些自己的事情了，而对方也很遵守社交规则做出了很感兴趣的样子，但是在张嘴的一刹那突然发现自己似乎丧失了倾诉的能力。</p><p>这就很奇怪。也许是不知道啥时候起了「不就这么回事嘛」的念头，于是所有的，那些自以为的孤单无助悲伤固执苦闷，一下子就成了常人都会有的情绪起伏。</p><p>问题在于，记忆总是模糊的。在大脑里，那些负责存储记忆的细胞突触不断地接触，曾发生过的一切被高明地剪辑。记忆总是被美化。虽然我在自己的记忆里从来不是什么讨喜的角色——懦弱，势利，沙雕。可这可能也是记忆的保护机制在起作用呢？它让我误以为曾经发生的一切都是不可控的，如果有遗憾，那也是没有办法的事。</p><p>有时候我也会在和别人吹牛时展现自己的牛皮，我吹嘘自己中学时曾被班上其他所有的男生围着打过。这种在全世界任何一所学校都经常发生的事，因为带了一种似乎夸张的描述，属于青春的痛感便不那么强烈了。当然这并非事实，我其实只是想尝试着在那个男孩们憧憬「一个打十个」的年纪里为自己开扩出「三十个打我一个」这样的传奇。</p><p>神奇的是我居然在很长的一段时间都以为这是真实的。我究竟挨没挨打？他妈的，有时候我还真期望有拳头落在我的身上，把我打个鼻青脸肿。然后我就做出悲剧英雄的模样，在十字架上燃烧，我在临死前一定要昂着头，我懒得向人群中张望。苟延残喘的人啊，嘲笑我吧。</p><p>只有我暗恋的女孩啊，不要悲伤，你的爱人是为了理想献身的……等等，女孩呢？他妈的，这帮狗比把女生全都赶到教室外面去了，还美其名曰这是男人之间的事。</p><p>理都被你们占了是吧？</p><p>算了算了，那时候我还太小，没学会长情。</p><p>不过，事实究竟如何呢？</p><p>无所谓了。</p><p>那个时候我确实还太小，对世界的认识不足导致我对自己本身认识过于钻牛角尖。我乐观地觉得换了新的环境我他妈就能重新做人。我从来没觉得自己与周围的差异是自己的原因。我知道为什么那些本来还能一起弹弹珠的小屁孩为什么突然就不和我玩了，有些隔壁班的崽子甚至靠着课间操的十多分钟来踢我一脚表明自己的阵营。我知道这是为什么，但我他妈就是不说。要问为什么，可能是因为我牛皮吧。</p><p>我知道我们其实都是一样的，都觉得自己是活在学校这个围栅里的牲口。那个时候我是自认为的文学青年，这些家伙只对偶像剧和黄片感兴趣，我不一样，我喜欢读书。而且我只读「故事会」、「鬼故事」这种高级读物。他们这些小屁孩只会欣赏「故事会」后面的小广告图片，我不一样啊，我读字儿。在我有限的青春狗血文学阅读历程中，早已了解到一件事：这就是青春啊！</p><p>不管我愿不愿意，这就是青春。既然青春里总有一个被忽视的家伙，为什么这个家伙就不能是我呢。</p><p>挑选一个人去针对，这就是小屁孩们在学校里自己悟出来的生存之道。当我现在以一种自作悲悯的眼光去看以前，唯一能让我感到宽慰的是，他们并不是针对你，这种操作并不是针对个人的。他们只是为了让自己的团体更加和谐而去找些事做而已。这些狗比仅仅是因为你长得帅，就忍不住要揍你。而由于我的容貌过于出众，我的脸便成了大家增强团队凝聚力的训练基地。</p><p>我没得法。</p><p>不得不说，人就是聪明。当一个人认识到自己个人的力量是有限的的时候，就会思考外界的力量。</p><p>比如我很长一段时间都曾在心里埋藏着强烈的恶意。我把积攒了一周的零花钱——虽然只有一块，扔进了在我回家的必经之路的那座山的山腰处的庙里的功德箱。</p><p>这座庙太破了，里面的神像被坏家伙们偷得只剩一两个还站在里面。</p><p>真的是，这坏家伙怎么到处都是。</p><p>但是我也来不及担心神像少了威力是不是就会减弱，我仍以最狠毒的诅咒期盼着这些家伙要是能够因为犯了什么事被开除就好了，这样我就碰不到它了。不过很久以后我才发现，寄希望于义务教育能开除学生，也就比买彩票的概率大点。</p><p>这他妈什么事儿啊，我成了一个被仇恨蒙蔽双眼的坏孩子了。</p><p>于是我只能期盼着狗日的赶快什么时候能离开这。我日，本来应该是最该享受的年纪，全他妈毁了，让我活在仇恨里还不够，我还要活在逃避里。</p><p>可是真的有什么地方会更好吗？</p><p>我有个非常优秀的启蒙老师，小学一年级时她就灌输给小朋友们在大城市不能乱扔垃圾，而且要把垃圾分类的相关知识。</p><p>后来我去了隔壁县城读高中，这是我第一次长时间进入一个城市——我一度小心翼翼地把垃圾扔进不同的回收箱。但是过了一阵子我突然发现，尼玛，根本没人分类，这他妈「可回收」、「不可回收」俩标签根本就是个摆设。有些家伙更坏，能把垃圾扔进垃圾桶就已经不错了！</p><p>我天真地认为这是因为这个县城还不够大。</p><p>后来来到省城读大学，我继续观察。尼玛，还是根本没多少人在乎扔垃圾时扔的是「可回收」还是「不可回收」。</p><p>由于我经常观察垃圾桶，有一次我他妈还发现一个垃圾桶虽然左右各一个口，分别写着「可回收」、「不可回收」，但是他们下面居然是连通的。尼玛，连通的！也就是说不管你投「可回收」还是投「不可回收」，垃圾都是堆在一起的！</p><p>卧槽。</p><p>我以为大城市里的不良少年们跟村里的不一样，他们读加缪，读塞林格。就像小说里描绘的一样。</p><p>结果全他妈假的，过时了。</p><p>他们扔垃圾还是不会分类。只是吐痰的时候不能像在村里一样吐在田里。</p><p>如果我再年轻点，我就可以靠着各种隐喻抱怨一切。可随着时间流逝，我已经从一个小屁孩长成了大孩子。</p><p>干！</p><p>回想这一阵子，看动画，读闲书，在回寝的路上发出应答谁的声音假装自己有朋友。从不考虑明天，尝试着和一些酒精过敏的家伙建立理想中酒肉朋友般牢固的情谊。聊童年和校园暴力，戏谑一切。用暧昧的言语和无聊的话题，互相探测彼此那一目了然的内心。旁若无人地在路上咆哮，争着发表自己对这个世界高深的见解。路过年轻异性时，不自觉地加强声带的震动。以一种自以为滑稽的表演方式说话，模仿老师，领导，传递指示的室长，以及一切说着正经话题的人。</p><p>真是大人模样了。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 故事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 故事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么一拳超人第二季不好看了？</title>
      <link href="/2019/05/18/ONE-PUNCH-MAN/"/>
      <url>/2019/05/18/ONE-PUNCH-MAN/</url>
      
        <content type="html"><![CDATA[<p>本文全是作者的胡言乱语，目的是深究为什么自己会产生某些感受。毕竟是篇个人倾诉的博文，里面的东西不可能很深入，我也会尽量减少阐述一些我并不了解的专业性内容以避免出错……</p><p>好了，开始吧。</p><p>互联网上对这部番的评价大多是制作有点粗糙……我和同学在前两集播出后有过讨论，一致认为角色有点立不住。一是埼玉老师居然开始说教了，二是其他角色居然对着埼玉老师心里发出「要是我能成为他的伙伴」这种多余的话。</p><p>按动画第一季的塑造，简单来讲，埼玉老师是那种有自己的行为准则，贯彻自己的理念行动的人。其他角色肯定会被老师影响，但应该是潜移默化的……但按这一季的人物行动逻辑，就回到扮猪吃老虎的套路了……</p><p><s>如果没记错的话，漫画里是没有这些多余情节的。</s></p><p>其实说起来，抛开价值观的话，这部作品的情节设计确实就是扮猪吃老虎……</p><p>杰斯诺作为老师的徒弟，不就起着后宫剧里小姐忍辱负重时，丫鬟打抱不平的作用吗……</p><p>第一季因为是故事发展前期，作者大概本来就没设定啥主线。埼玉老师一集就能发挥一下打个怪。但是第二季开始有了主线「饿狼篇」，而且这段剧情非常长……埼玉老师出场的机会也变少了。</p><p>一方面，失去了前作中的内涵。一方面，主角也不上场了。对于两个观众群来说，都不讨喜。</p><p><strong>不过还是要说，对于期待老师扮猪吃老虎的观众群来说，其实并不是在期待老师打怪，而是在期待埼玉老师在别的英雄都打不过怪的时候出现打怪。</strong> 基本套路……</p><p>不过这部分篇章的优点在于群像描写。个性丰富的人物，酣畅且各有特色的战斗。</p><p>// 我觉得这部分要是精简一下群像，着重饿狼的刻画，尽快树一个谁都解决不了的对手，让观众在心里期待老师快来解决他！！！——也许能更商业化点……</p><p>村田雄介老师在漫画的重置版中把打斗画得很精致，作为漫画看起来是很精彩的，但是在动画中表现得并不是很尽人意。</p><p>按网络上的主流评论，这一季动画的打斗也做得很差劲。</p><p>连这点优势也没保留住，所以才会没那么吸引人了吧。</p><p>不过我其实不了解打斗场面到底哪里差劲……也不了解这种打斗的作画应当怎么评价……</p><p>避免讨论技术上的问题，我个人认为可能这种形式的打斗本身就不太有趣，仅仅两者打，没有把超能力作品里的超能力利用到位。</p><p>比如同为英雄类作品的《我的英雄学院》，各个角色有不同的能力，前期的打斗中把这种能力还是发挥的不错……</p><p>也许是因为做成动画，一切都发生得太快了……其实看漫画，里面还是有精彩的绝招，对于各种招式的应对……</p><p>说到这，东京食尸鬼也是这样，虽然它后期也烂成狗屎，但是在前期，漫画里的主角还是有点谋略的……但是到了动画就成了战斗靠吼，打戏成了赫子甩来甩去。（难道是因为少了心理描写？或者为了迎合市场就是要做成这种直来直去的玩意？</p><blockquote><p>[2019-09-28]</p><p>现在稍微明白一点了。原因很简单：一是大多数观众并不 care，二是制作商确实受成本限制。这些东西算是细节，但是说实话大多数如我这样的观众，都没有欣赏这些细节的能力。节约成本让观众惊呼「这光」，比研究物理细节收益高多了……</p><p>上次在推上刷到一日推友对比日本与中国两部番炒菜的细节。我们的动画里在炒菜时，画面故意模糊，就像我小时候画衣服的褶皱，随意勾线涂阴影，假装有效果……而别人则专门有掌勺拌菜时，菜的运动轨迹等等细节资料……</p><p>不知道这是普遍情况还是特例。总之，慢慢发展积累吧……</p><p>常说国漫崛起，对于普通观众来说，大概只有故事比较容易判断优劣。现在故事确实慢慢起来了。赞！至于技术方面，大概只有从业人员才晓得具体情况……今年暑期的动画《哪吒之魔童降世》的导演饺子在采访提过，这部动画几乎是举整个行业的力量做出来的。我们的动画行业在分工和配合上，还有很大的优化空间……加油！！</p></blockquote><p>比如我一直对一拳超人后面剧情中「童帝」的一场战斗记忆深刻。因为童帝的设定是那种天才儿童，战斗靠各种发明的装备。被逼入险境时，角色突然「还有后招」，拿出一样武器。这比通常的眼看角色似乎要被打死了，其实他能力很强，打不死，突然爆发另外的技能——毕竟战斗定律就是不能直接放大招……这种设定要有趣一些。</p><p>当然，只是我个人比较偏向这类战斗方式。</p><p>也有很多人觉得拳头对拳头，刀剑乱舞更酣畅淋漓。</p><p>不过按网络上的主流说法，这部番就是连拳头对拳头都没做好……</p><p>可惜了。</p><p>好，这算是说完了。</p><p>其实一开始我想的标题是「为什么现在动画里的 PK 不好看了」。但是想想还是不要把标题取那么大……而且这也未免太标题党了一些，还是算了。</p><p>但是既然还有时间，就稍微讲讲动画里的 PK 吧。</p><p><a href="/2019/05/18/why-animation">为什么现在动画里的 PK 不好看了？</a></p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 观与感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 看片所想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乱侃作品的形式与创新</title>
      <link href="/2019/05/18/oh-yeah/"/>
      <url>/2019/05/18/oh-yeah/</url>
      
        <content type="html"><![CDATA[<p>想聊的东西有点多，所以把胡说八道的一堆东西分成了几篇博文。当然，还是要多啰嗦一下，我不是专业人士，只是基于爱好与表达欲，想要把自己的感受与浅薄的见解写下来。毫无疑问，这是一篇充满偏见的文章，就如我之前多次做过的那样，过阵子或许我会为现在的无知感到羞耻。但是我现在的价值观就是这样——希望通过自己的感受去收获自己的感悟，尽管这些所谓的感悟可能很无聊。</p><p>总之，不管是我们已经想通的，还是尚未想通的东西，一定早就有人总结过了。但是我不想按照别人的规定去对号入座，我希望自己能多尝试一下思考，尽可能地把他人的概念作为自己理解事物的辅助。</p><p>「都是从别人那儿偷来的观点，谁看不起谁啊。」</p><p>我想避免被这样评价。</p><p><a href="https://hqweay.cn/2019/02/12/fxxk-int/" target="_blank" rel="noopener">过完年了碎碎念下</a></p><p>之前在这篇博文里胡说八道了电影，漫画的形式。其实当时我想到了一篇非常能说明问题的漫画，但那时没找到。今天尝试着用记忆里的关键词搜索了下，居然找到了。</p><p>这篇博文就从这开始吹牛吧。</p><p><a href="http://www.fanjian.net/post/150534" target="_blank" rel="noopener">法国漫画-无敌救星</a></p><p>第一次接触到这篇漫画时，觉得好牛皮啊，简直把漫画这种表现形式用活了！（当然也是因为我了解的少。</p><p>类似的，这部漫画里。</p><p><a href="https://manhua.dmzj.com/jiduantiantang/86814%E3%80%82shtml#@page=139" target="_blank" rel="noopener">极端天堂</a></p><p>即便啥都不懂，也能直观感受到牛皮（至少冲击）。</p><p>接下来就谈谈这类把创作形式用得出神入化的作品吧。</p><p>拿游戏作品黑魂系列举例，<s>宫崎老贼</s> 拿游戏的死亡机制做文章，把存档，复活引入游戏设定。游戏中简单的存档-复活操作，一下子就成了宿命感浓厚的不死人世界观。</p><p>继续谈游戏。每次随着游戏机的面世，都会有些能完全榨出机器性能的作品首发护航。而除了把机能发挥到极致，有些游戏甚至利用硬件特性来创作游戏的世界观。</p><p>比如掌机 NDS 上的极限逃出。</p><p>// 剧透 Tag</p><p>NDS 是一款双屏掌机，在极限逃出这款密室逃脱类的解密游戏里，上屏展示画面，玩家可以触控下屏来控制游玩……</p><p>在游戏的过程中，会有各种不影响游戏进程的别扭之处。比如上屏里人物 A 对人物 B 说「你左手拿的是什么」，而下屏却显示人物 B 的右手拿着某样东西。</p><p>最后结局揭晓，上屏和下屏其实不是一个时间线……</p><p>哇哦，超酷的。</p><p>// end Tag</p><p>在小说里的也有这类表达形式——比如推理小说常用的诡叙。</p><p>影视作品则有打破第四堵墙这类手法。</p><p>这些算是把形式利用到了极致。</p><p><strong>不过说起来，一种创作媒介，自身本就会需要多种手段配合，每种手段也有很大的发挥空间。</strong></p><p>讽刺漫画的出现，就是创作者看中了漫画的特点——能灵活地使用夸张来直白地表现氛围，人物性格与情绪。</p><p>某些作品，比如 钢炼FA，虽然整体氛围沉重，但是平时会通过把角色绘制成更卡通的形象来调节气氛。</p><p><strong>充分地利用表达形式便是一种创新。</strong></p><p>不过这只能开阔思路，想要用好，甚至被人接受，还需要考虑历史的进程……比如环形叙事很早就有实验性短片使用过，但这种叙事方式真正被用起来，与上个世纪量子理论等现代科学理论的普及有密切的关系。</p><p><strong>再反过来思考一下，如果说动画，漫画的特点在于不受拘束，那么反其道而行之，用他们来写实呢?</strong></p><p>不久前看过高畑勋的一段采访，当时正在制作 岁月的童话 这部动画，他对记者说道，「希望不要再犯上次的错误了。」</p><p>上次的错误指的是他上部作品《萤火虫之墓》中的一个场景。在这段动画里，男孩用切豆腐的方式来切西瓜——左手拿着西瓜，右手用刀轻而易举地划开，分成数瓣。</p><p>在《岁月的童话》中，也有一段切凤梨的动画。高畑勋老师所指的「不要再犯上次那种错误」就是指不想再在这段动画里出现上面提到的那种错误。</p><p>很完美地，在切凤梨的这段动画中，细节表现精致到令人咂舌。</p><p>这部动画里除了有切凤梨这种非常真实的细节，人物形象也向真实世界靠拢，但是也有角色跑着跑着就就突然跑上天这种天马行空。</p><p>而且一旦开始展现主角的童年，画面里的水彩就表现得褪色一般，如同记忆斑驳。（或许是我过度解读了</p><p>这样灵活利用形式来表达，真厉害啊……</p><p><strong>再谈谈更甚者，放弃创作媒介的表达形式。</strong></p><p>比如新房昭之和几原邦彦都在动画里使用过这种操作：直接用文字来代替人物和场景。</p><p>EVA 的结局，用大量文字空镜头来灵魂质问……</p><p>富坚义博直接骚操作，漫画变小说……</p><blockquote><p>……详情可以搜索一下或者直接观看这些作品。</p></blockquote><p>也许就是没钱，也许就是偷懒。但是效果到位啊！</p><p>好了好了。回过头来，其次<strong>创新也可以通过借鉴别的艺术形式的表达方式。</strong></p><p>接下来谈谈各类创作的互相借鉴。</p><p>比如之前提到过手冢治虫引入电影语言来改善连环画。</p><p>而金敏一方面吸收了许多电影的精髓到动画，另一方面又启发了许多电影导演的创作。</p><p>去年玩得很开心的长篇动画《蜘蛛侠 平行宇宙》，把漫画里的对白框，拟声词，使用到动画里，这种形式上的混搭——或者说突破，嗯……怎么夸奖好呢?简直是独具一格，别树一帜……牛皮啊！！！！</p><p>还有电影《明日边缘》，当然，这种设定并不新鲜。但是与其说它是部科幻电影，不如说它借鉴了 RPG 游戏的设定……做了部大片。</p><p>还有各种 3A 大作游戏以好莱坞的方式做音乐，剧情……</p><p>还有许许多多有趣的脑洞，比如动画里通过不同的画风的人物来展现人物心理活动，电视剧引入黏土动画……</p><p>比如之前最新的黑镜「交互式电影」的概念，其实不就是 AVG 嘛……</p><p>总之，通过嫁接探索形式上的突破还是有用……</p><p>也很有趣啊。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 观与感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么现在动画里的 PK 不好看了？</title>
      <link href="/2019/05/18/why-animation/"/>
      <url>/2019/05/18/why-animation/</url>
      
        <content type="html"><![CDATA[<p>接上一篇 <a href="/2019/05/18/ONE-PUNCH-MAN">为什么一拳超人第二季不好看了？</a>。</p><p>首先定义一下，故事总是需要在角色间建立竞争或矛盾，角色之间解决冲突的过程都算作 PK。</p><p>不过这里先不谈情感类作品里解决复杂的人际关系纠纷这些东西……就简单谈谈热血作品里的 PK 吧！</p><p><strong>在热血作品里，PK 按形式大概能分为两种，智斗和打斗。</strong></p><p>比如赌博默示录，斗牌传说，这类逻辑上的对决，就算是智斗吧。</p><p>至于打斗的话，除了字面意义上的打，体育竞技也大概归类于打斗……</p><p>但是这两类并非泾渭分明的，很多打斗作品里也有谋略和布局。</p><p>比如火影忍者前期的 PK，不仅仅是忍术的对决，还涉及到忍术的组合，场地的利用等。很有趣啊！！</p><p><strong>可以尝试下按读者掌握的信息量来分类。</strong></p><p>一种是双方明牌，然后作者尝试使读者跟随角色一起思考，如何利用有限的资源与对方战斗。</p><p>比如《我的英雄学院》里，角色的能力是预先都知道的，如何利用能力来 PK 便成了看点所在。要是故事以各种能力的组合来战斗为看点发展的话就好了……</p><p>《重启咲良田》就是类似这样操作的超能力作品，而且尊重智商，逻辑严谨。不过动画前两集做得实在是烂……</p><p>另一种就是作者事先故意隐瞒部分信息，然后在角色 PK 中不断抛出某些信息——比如我知道你要这么做所以我这么做，我就知道你知道我要这么做，所以我偏偏要这样做。</p><p>比如在角色面临困境时不断抛出《其实我早有准备》杀手锏……古龙就爱在小说里用。不过有时候前面根本啥都没铺垫，突然就掏出一个大招，这就很无趣了……</p><p>《火凤燎原》这部漫画算是这样的作品吧……</p><p>我说不出自己喜欢怎样的 PK 方式，但是我能肯定的是，我对那种完全靠你打我一拳，我打你一拳的作品不太感兴趣……</p><p>它们也都挺好，有自己的受众，但是我 get 不到……</p><p>当然也是有例外的，凡事都有例外。当 PK 不是这部作品的核心时，我就觉得无所谓了。</p><p>比如一拳超人第一季，我不是来看老师打怪的，我就是来享受老师打败了别人都打不了的怪还风轻云淡那种高手寂寞的快落。</p><p>我发现运动番确实能把 PK 搞得热血沸腾……</p><p>大多数的角色都有自己的个性，这种个性间的摩擦组合成一个队伍……然后稍微再加点队伍之间 PK 时的心理活动，战术布局……完美！！</p><p>话说某些战斗番就不能参考下体育竞技吗……</p><p>大概就说到这，我得走了。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 观与感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 看片所想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>是非</title>
      <link href="/2019/04/16/true-false/"/>
      <url>/2019/04/16/true-false/</url>
      
        <content type="html"><![CDATA[<p>信息检索的第一堂课，讲到日本石油机械生产企业通过中国相关报纸上的油田照片，分析出炼油厂的规模和能力，推断中国将会因炼油设备不足购买日本的相关设备，因此提前准备，大赚一笔。</p><p>由于信息的重要性，信息公开的尺度便成了一个不好区分的边界。不过我没有讨论尺度以及利弊的想法，也没这个能力。倘若我在这里乱吹牛皮，除了自娱自乐外还有其它打算，那我就是沙雕中的沙雕。</p><p>我提及这个，是因为信息的中立性以及重要性，刚好可以引出是非与好坏这个命题。</p><p>王小波说理性就是不管三七二十一，把事情往明白了弄，而不管好坏。大概是说对事情追问为什么，而不问为什么追问。秦晖老师把这称为「价值中立的求知欲」。</p><blockquote><p>2019-06-15</p><p>读王小波先生的杂文，觉得这个观点大概来自罗素先生对求知欲的讨论。</p></blockquote><p>就我经历来看，「是非」这个词往往就带有「善恶」的意味。比如别人要求你「明辨是非」，潜意思似乎是在讲「你知道什么该做什么不该做」。这个什么该什么不该就又有点模糊，有的「是」似乎又「不该」，有的「该」，似乎又「不是」。</p><p>上面这段话有点绕。简而言之，我觉得，事物一旦套上一层价值尺度，就可爱不起来了。这话得悄咪咪地说，对于正直的人来讲，我是你非，你是我非，这不过是主义之争。如果非得把人的思想用多个坐标轴来表示，大多数人也应该表现得偏左偏右，有左有右。但是，也会有人觉得立场绝对不能歪。这里放下不表。</p><p>而人一旦有了立场，基于同为追求真理之人这一共性，也许还能对持以反对观点的对方以尊重。但是对于「价值中立的求知欲」这玩意，就实在是难以容忍。因为这类人不但不追求真理，还不断挑两方的错，似乎是为了故意挑起争斗看戏一般。</p><p>有观点认为，表达注定是会被误解的，所以表达就没有面面俱到的必要——尊重事物的多样性就是在自卸铠甲。我同意前半句，而且我现在的观点比这前半句还要偏激一些。我觉得所有的理解都是误解，没有谁能真正理解谁。语言和文字不过是信息的载体，谁到保证解码信息的双方能持以相同的解码器呢？</p><p>除非是传递 「1+1=2」，「因为……所以……」这类信息。话说回来，如果世界上还有什么是准确的，那就是数学。</p><blockquote><p>不过 哥德尔 证明了在算术中总是存在一些定理，它们到底是正确的还是错误的，永远不能从算术公理得到证明。这就是说，数学是不完备的。</p></blockquote><p>但是我并不认为表达的唯一目的就是作为武器。充满好奇的人对于触发思考的东西，总是试图力所能及地传递出去。所以回到上面关于是非的讨论，我觉得个人首先需要做的事情，并非去信仰什么，而是建立起自己的一套体系。为人处世体系，道德观念……</p><p>而且话说回来，很多的理论，不也是作者自己的总结吗。</p><p>选取一套，甚至不加辨别地选取一套别人的体系（为人处世，道德观念），然后按着条条框框去生存，这样其实还蛮高效的——假如人生除了死亡还有其他什么唯一的终点的话。</p><p>但是话又说回来，反正需要这么一套体系，别人给的和自己经历得来又有什么差别呢？有优劣之别吗？</p><p>按照我的事物判断标准，结论自然是没啥好坏之分，只有针对个人合不合适。</p><p>其实又有啥是自己得来的？不过是自己的情绪和某个规则达到了共鸣，便把它纳入了自己的体系。</p><p>闭门造车什么都得不到。所以人们才去经历，阅读……</p><blockquote><p>I can’t learn anything from you I can’t read in some fuckin’ book。</p></blockquote><p>我所谓的自己得来，举个可操作的例子，就比如行为前再进行一次质问，质问自己的目的，质问自己的动机。硬要说的话，这其实是有科学依据的。人在作出判断时往往根据的是自己的记忆，而非理性。比如看到一个类似苹果的物体，做出了这是苹果的判断。同理，平时有很多判断都是这样想当然（中性）得出的。</p><p>先进行一次质问，就可以把许多理所应当通过理性来解释。把许多模糊的事情，通过理性来快刀斩乱麻。</p><p>比如在弗洛德依的体系下，心理医生对患者的某些行为进行深挖，得出结论其实这种行为是由于患者 balabala……</p><p>也可以尝试对自己质问一下，想想某些行为是不是有着什么深层次的原因。</p><p>这就像编程概念中的 AOP，在做判断前加上这么一层质问的逻辑。</p><p>因为我从小就是个爱钻牛角尖的人。大人们总说「别胡思乱想」，我怎么做得到？不想通我就不舒服。</p><p>而这种做法就可以说服我，不让我离正常人太远。真棒。</p><p>上面这段话有点胡说八道，而且我还把道德标准也纳入其中。这太危险了。我觉得人要有自己的道德准则——就不继续往下吹了。</p><p>再回到上面「为人处世体系，道德观念最好自己在思辨中形成而不是一味接受。」这个问题。在这简单留下我现在的两点想法。</p><p>一，人只有一生，总得多经历，多思考。（参考各种鸡汤文学）</p><p>二，如果按着别人灌输的规则行动，那不成了机器人了嘛。行为不管多诚恳也只是虚假的真实。</p><p>想起王小波某篇杂文里谈到，他的一位老师说对于普通人，有信仰比无信仰要好。刚开始他反对，后来他同意了这个说法。</p><blockquote><p>十年前，我在美国，和我的老师讨论这个问题，他说：对一般人来说，有信仰比无信仰要好。起初我不赞成，后来还是被他说服了。</p></blockquote><p>如果非得照应一下前文，那么总结起来，我觉得人应当在辨别是非的过程中总结出自己的善恶标准。</p><p>不过明辨是非总不能一无所知吧，那又得学习。</p><p>然后很快你就陷入犬儒。</p><p>我觉得这是好事，毕竟没有纹理两片相同的树叶——这才能体现出物种的多样性嘛，思想也应该多样才对。不论鸡汤还是毒鸡汤，都在灌输「你是独一无二」这个概念。如果你和周围人讨论着一样的电影，读一样的书，对一只曲子在同一个小节感叹，这又怎么能体现出「独一无二」呢。外形由于基因，从小就能和别人区分，追求同样的审美，又造就了所谓的网红脸。而思想倘若要达到独一无二，难度就更大了。</p><p>但是，思想的目的并非是达到独一无二。目的是形成自己的体系。（重复好多次了）独一无二（也许达不到）只是一个结果而已。</p><p>至今，我从未依靠兴趣交过什么朋友，由于我一直不肯承认自己性格的缺陷，我把这归咎于思想的独特。</p><p>我只能和心智上的同龄人（7-12 周岁）交朋友，我们吹牛皮，造梗，有不同的价值观，明明知道自己无知，仍毫无畏惧地对一切持以质疑。</p><p>[update-2019-04-30-17:37]</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue CLI3 使用 Marked 渲染 Markdown 格式数据</title>
      <link href="/2019/04/02/marked/"/>
      <url>/2019/04/02/marked/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h2><p>需求是需要把 Markdown 格式的内容解析为 HTML，于是使用 Marked.js 完成该操作。</p><p>仓库：<a href="https://github.com/markedjs/marked" target="_blank" rel="noopener">Marked.js</a> ，引入使用之类的不提。</p><p>默认解析出来的内容不大美观，所以需要再渲染一下。</p><p>下面提供了我尝试过的三种引入方式，主要是渲染样式的使用方式不同。</p><p>按渲染方式分：方式一和方式二都是使用 Marked 自己的功能实现的。而 <strong>方式三只是粗暴地用 CSS 覆盖了默认样式。</strong></p><p>方式一对每个展示的 Vue 文件都需要引入一次样式，而方式二和方式三用了 <code>main.js</code> 引入的方式实现了全局样式。但是方式二只能全局，方式三则用 CSS 覆盖实现了自定义样式。</p><p><strong>其实主要就分为方式一和方式二，分别对应单独配置与全局配置。方式只不过是在方式二全局配置的基础上，使用 CSS 为单独组件覆盖了全局配置。</strong></p><p><strong>一般来说大家都是全局统一渲染样式吧？所以我推荐使用方式二。</strong></p><p>下文以引入渲染样式 <code>github-markdown.css</code> 为例。</p><h2 id="方式一"><a class="markdownIt-Anchor" href="#方式一"></a> 方式一</h2><p>单个 Vue 文件即可实现.</p><h3 id="indexvue"><a class="markdownIt-Anchor" href="#indexvue"></a> index.vue</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; index.vue</span><br><span class="line">&#x2F;&#x2F; 只需要这个文件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;post&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;title&quot;&gt;</span><br><span class="line">      &lt;h2&gt;&#123;&#123;this.article.title&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;markdown-body&quot;&gt;</span><br><span class="line">        &lt;div v-html&#x3D;&quot;compileMarkdown&quot; v-highlight&gt;&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;ecmascript-6&quot;&gt;</span><br><span class="line">import Marked from &quot;Marked&quot;;</span><br><span class="line">&#x2F;&#x2F; 这里引入想要的样式</span><br><span class="line">import &quot;..&#x2F;..&#x2F;..&#x2F;node_modules&#x2F;github-markdown-css&#x2F;github-markdown.css&quot;;</span><br><span class="line">let renderMd &#x3D; new Marked.Renderer();</span><br><span class="line">Marked.setOptions(&#123;</span><br><span class="line">  renderer: renderMd,</span><br><span class="line">  gfm: true,</span><br><span class="line">  tables: true,</span><br><span class="line">  breaks: false,</span><br><span class="line">  pedantic: false,</span><br><span class="line">  sanitize: false,</span><br><span class="line">  smartLists: true,</span><br><span class="line">  smartypants: false,</span><br><span class="line">  &#x2F;&#x2F; 引入样式</span><br><span class="line">  highlight: function(code) &#123;</span><br><span class="line">    return require(&quot;highlight.js&quot;).highlightAuto(code).value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      article: &#123;</span><br><span class="line">        content: &quot;加载中……&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    compileMarkdown() &#123;</span><br><span class="line">      return Marked(this.article.content, &#123; sanitize: true &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created: function() &#123;</span><br><span class="line">    this.$ajax(&#123;</span><br><span class="line">      url: &quot;&#x2F;api&#x2F;article&#x2F;id&quot;,</span><br><span class="line">      method: &quot;get&quot;,</span><br><span class="line">      params: &#123;</span><br><span class="line">        id: this.$route.params.id</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(res &#x3D;&gt; &#123;</span><br><span class="line">      if (res.status &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class="line">        this.article &#x3D; res.data;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F;报错</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped &gt;</span><br><span class="line">.post .title &#123;</span><br><span class="line">  margin-top: 50px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  font-size: 24;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="方式二"><a class="markdownIt-Anchor" href="#方式二"></a> 方式二</h2><p>方式二、方式三都需要三个文件。</p><p>方式二是全局定义渲染样式，方式三则可以覆盖全局渲染样式。</p><h3 id="indexvue-2"><a class="markdownIt-Anchor" href="#indexvue-2"></a> index.vue</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; index.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;post&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;title&quot;&gt;</span><br><span class="line">      &lt;h2&gt;&#123;&#123;this.article.title&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;markdown-body&quot;&gt;</span><br><span class="line">        &lt;div v-html&#x3D;&quot;compileMarkdown&quot; v-highlight&gt;&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;ecmascript-6&quot;&gt;</span><br><span class="line">import Marked from &quot;Marked&quot;;</span><br><span class="line">&#x2F;&#x2F; 不用下面这种引入样式了</span><br><span class="line">&#x2F;&#x2F; import &quot;..&#x2F;..&#x2F;..&#x2F;node_modules&#x2F;github-markdown-css&#x2F;github-markdown.css&quot;;</span><br><span class="line">let renderMd &#x3D; new Marked.Renderer();</span><br><span class="line">Marked.setOptions(&#123;</span><br><span class="line">  renderer: renderMd,</span><br><span class="line">  gfm: true,</span><br><span class="line">  tables: true,</span><br><span class="line">  breaks: false,</span><br><span class="line">  pedantic: false,</span><br><span class="line">  sanitize: false,</span><br><span class="line">  smartLists: true,</span><br><span class="line">  smartypants: false,</span><br><span class="line">  &#x2F;&#x2F; 这个配置实际放到 highlight.js,然后在 main.js 引入</span><br><span class="line">  &#x2F;&#x2F;highlight: function(code) &#123;</span><br><span class="line">  &#x2F;&#x2F;  return require(&quot;highlight.js&quot;).highlightAuto(code).value;</span><br><span class="line">  &#x2F;&#x2F;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      article: &#123;</span><br><span class="line">        content: &quot;加载中……&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    compileMarkdown() &#123;</span><br><span class="line">      return Marked(this.article.content, &#123; sanitize: true &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created: function() &#123;</span><br><span class="line">    this.$ajax(&#123;</span><br><span class="line">      url: &quot;&#x2F;api&#x2F;article&#x2F;id&quot;,</span><br><span class="line">      method: &quot;get&quot;,</span><br><span class="line">      params: &#123;</span><br><span class="line">        id: this.$route.params.id</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(res &#x3D;&gt; &#123;</span><br><span class="line">      if (res.status &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class="line">        this.article &#x3D; res.data;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F;报错</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped &gt;</span><br><span class="line">.post .title &#123;</span><br><span class="line">  margin-top: 50px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  font-size: 24;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h3 id="highlightjs"><a class="markdownIt-Anchor" href="#highlightjs"></a> highlight.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; highlight.js</span><br><span class="line">import Hljs from &#39;highlight.js&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 这里引入css</span><br><span class="line">import &#39;highlight.js&#x2F;styles&#x2F;github.css&#39;</span><br><span class="line"></span><br><span class="line">let HighLight &#x3D; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">HighLight.install &#x3D; function (Vue) &#123;</span><br><span class="line">     Vue.directive(&#39;highlight&#39;, function (el) &#123;</span><br><span class="line">        let blocks &#x3D; el.querySelectorAll(&#39;pre code&#39;);</span><br><span class="line">        blocks.forEach((block) &#x3D;&gt; &#123;</span><br><span class="line">            Hljs.highlightBlock(block)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default HighLight;</span><br></pre></td></tr></table></figure><h3 id="mainjs"><a class="markdownIt-Anchor" href="#mainjs"></a> main.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; main.js</span><br><span class="line">……</span><br><span class="line">&#x2F;&#x2F; highlight.js 路径相应更改</span><br><span class="line">import HighLight from &#39;@&#x2F;utils&#x2F;highlight.js&#39;</span><br><span class="line">Vue.use(HighLight);</span><br><span class="line">……</span><br></pre></td></tr></table></figure><h2 id="方式三"><a class="markdownIt-Anchor" href="#方式三"></a> 方式三</h2><p>在 <code>highlight.js</code> 中定义的实际上是全局的 Markdown 解析样式，如果其他地方需要自定义渲染样式，引入 Vue 就行。</p><h3 id="indexvue-3"><a class="markdownIt-Anchor" href="#indexvue-3"></a> index.vue</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; index.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;post&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;title&quot;&gt;</span><br><span class="line">      &lt;h2&gt;&#123;&#123;this.article.title&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;markdown-body&quot;&gt;</span><br><span class="line">        &lt;div v-html&#x3D;&quot;compileMarkdown&quot; v-highlight&gt;&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;ecmascript-6&quot;&gt;</span><br><span class="line">import Marked from &quot;Marked&quot;;</span><br><span class="line">&#x2F;&#x2F; 不用下面这种引入样式了</span><br><span class="line">&#x2F;&#x2F; import &quot;..&#x2F;..&#x2F;..&#x2F;node_modules&#x2F;github-markdown-css&#x2F;github-markdown.css&quot;;</span><br><span class="line">let renderMd &#x3D; new Marked.Renderer();</span><br><span class="line">Marked.setOptions(&#123;</span><br><span class="line">  renderer: renderMd,</span><br><span class="line">  gfm: true,</span><br><span class="line">  tables: true,</span><br><span class="line">  breaks: false,</span><br><span class="line">  pedantic: false,</span><br><span class="line">  sanitize: false,</span><br><span class="line">  smartLists: true,</span><br><span class="line">  smartypants: false,</span><br><span class="line">  &#x2F;&#x2F; 这个配置实际放到 highlight.js,然后在 main.js 引入</span><br><span class="line">  &#x2F;&#x2F;highlight: function(code) &#123;</span><br><span class="line">  &#x2F;&#x2F;  return require(&quot;highlight.js&quot;).highlightAuto(code).value;</span><br><span class="line">  &#x2F;&#x2F;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      article: &#123;</span><br><span class="line">        content: &quot;加载中……&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    compileMarkdown() &#123;</span><br><span class="line">      return Marked(this.article.content, &#123; sanitize: true &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created: function() &#123;</span><br><span class="line">    this.$ajax(&#123;</span><br><span class="line">      url: &quot;&#x2F;api&#x2F;article&#x2F;id&quot;,</span><br><span class="line">      method: &quot;get&quot;,</span><br><span class="line">      params: &#123;</span><br><span class="line">        id: this.$route.params.id</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(res &#x3D;&gt; &#123;</span><br><span class="line">      if (res.status &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class="line">        this.article &#x3D; res.data;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F;报错</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped &gt;</span><br><span class="line">  &#x2F;&#x2F; 直接引入样式覆盖。</span><br><span class="line"> @import &quot;..&#x2F;..&#x2F;..&#x2F;node_modules&#x2F;github-markdown-css&#x2F;github-markdown.css&quot;;</span><br><span class="line">.post .title &#123;</span><br><span class="line">  margin-top: 50px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  font-size: 24;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h3 id="highlightjs-与-mainjs"><a class="markdownIt-Anchor" href="#highlightjs-与-mainjs"></a> highlight.js 与 main.js</h3><p>同方式二。</p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 配置与操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置与操作 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 项目打包为 Docker 镜像</title>
      <link href="/2019/04/02/springboot-docker/"/>
      <url>/2019/04/02/springboot-docker/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h2><p>先提一下整个流程。</p><p>Spring Boot 项目构建 jar 包，Docker 再把 jar 包打包为 Docker image。</p><p>流程是这样，再提一下细节。</p><ul><li>jar 包可以在 java 环境直接执行 <code>java -jar appname.jar</code> 启动。而 Docker 的任务就相当于封装 jar 包，java 环境， 以及 <code>java -jar appname.jar</code> 这条指令。</li><li>Docker 打包 jar 包需要一个 Dockerfile 文件，这个文件相当于一个配置，告诉 Docker 应该如何打包，如何启动 jar 包。</li><li>本地生成了 Docker image，想要把这个镜像部署到服务器，需要把 image 导出。这属于 Docker 命令了，这里不提。</li></ul><p>既然知道流程了，怎么实现呢?</p><p>两种方式，第一种很直观，自己构建 jar 包，然后在本地手动打包镜像。</p><p>第二种，则是通过配置（这里使用 Gradle），实现整个打包的流程。</p><h2 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意</h2><p>流程大致可以分为两步，生成 jar 包，生成镜像。每一步都会遇到坑，慢慢来……</p><p>首先确保生成的 jar 包可以通过 <code>java -jar appname.jar</code> 执行。</p><blockquote><p>可能会遇到 找不到主类等错误……</p></blockquote><h2 id="方式一"><a class="markdownIt-Anchor" href="#方式一"></a> 方式一</h2><h3 id="一-构建-jar-包"><a class="markdownIt-Anchor" href="#一-构建-jar-包"></a> 一 构建 jar 包</h3><p>首先构建 jar 包，</p><p>可以 build artifacts。</p><p>建议在根目录下执行 <code>gradle build</code> 或者 <code>gradlew build</code> 。</p><p>先测试一下 jar 包能不能正常运行。</p><p><code>java -jar appname.jar</code></p><p>可能会出现找不到主类之类的问题。</p><h3 id="二-创建镜像"><a class="markdownIt-Anchor" href="#二-创建镜像"></a> 二 创建镜像</h3><p>然后把 jar 包与 Dockerfile 放在同一目录下</p><p>如</p><p>docker/blog.jar</p><p>docker/Dockerfile</p><p>执行</p><blockquote><p>docker build -t [要生成的镜像名] .</p></blockquote><p>注意哈，后面有个点「.」。</p><p>Dockerfile 是打包 docker image 所需的配置文件</p><p>比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">## Dockerfile</span><br><span class="line">FROM aglover&#x2F;java8-pier</span><br><span class="line">VOLUME [&quot;&#x2F;tmp&quot;]</span><br><span class="line">ADD blog.jar app.jar</span><br><span class="line">## blog.jar 是目录下的 jar 包</span><br><span class="line">## app.jar 是 jar 包存放在 Docker 里的名字</span><br><span class="line">ENTRYPOINT [&quot;java&quot;, &quot;-Djava.security.egd&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom&quot;, &quot;-jar&quot;, &quot;app.jar&quot;]</span><br><span class="line">## 这一条就是 Docker 里执行 jar 包，相应的 后面的 app.jar 就是 Docker 内 jar 包名</span><br><span class="line">EXPOSE 8082</span><br><span class="line">## 暴露端口 无所谓吧，Docker 启动容器可以自定义</span><br></pre></td></tr></table></figure><p>这里很明显也能看出 Docker 内部还是用的 <code>java -jar appname.jar</code> 来运行。</p><h3 id="三-运行"><a class="markdownIt-Anchor" href="#三-运行"></a> 三 运行</h3><p>注意，运行需要指明 REPOSITORY TAG，</p><p><code>docker run -p 8082:8082 -t REPOSITORY:TAG</code></p><p>如</p><p><code>docker run -p 8082:8082 -t cn.hqweay/blog-backend:1.0</code></p><blockquote><p>注意啊，不这样会启动失败……这问题搞了好久。</p></blockquote><h3 id="疑问"><a class="markdownIt-Anchor" href="#疑问"></a> 疑问</h3><p>我在操作过程中去除了创建 Spring Boot 项目时自带的 Tomcat 依赖，不去不知道能不能行。</p><h2 id="方式二"><a class="markdownIt-Anchor" href="#方式二"></a> 方式二</h2><h3 id="springboot-gradle-docker-配置"><a class="markdownIt-Anchor" href="#springboot-gradle-docker-配置"></a> springboot + gradle + docker 配置</h3><h3 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h3><p><a href="https://juejin.im/post/5b27b7ac51882574c32c6588" target="_blank" rel="noopener"><a href="https://juejin.im/post/5b27b7ac51882574c32c6588" target="_blank" rel="noopener">https://juejin.im/post/5b27b7ac51882574c32c6588</a></a></p><h3 id="说明-2"><a class="markdownIt-Anchor" href="#说明-2"></a> 说明</h3><p>这里配置可以根据项目信息自动生成 Dockerfile，也可以指定本地 Dockerfile。</p><p>配置的主要目的是解决了手动把 jar 包打包为镜像。</p><h3 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h3><p>见仓库配置文件 <a href="https://github.com/hqweay/blog-backend/blob/master/build.gradle" target="_blank" rel="noopener">https://github.com/hqweay/blog-backend/blob/master/build.gradle</a></p><p>根目录执行</p><p><code>./gradlew clean build dockerBuilder --info</code></p><p>即可打包。</p><p><code>./gradlew build</code> 这条命令是构建 jar 包。</p><p>能看出，整条命令就是先打 jar 包，再执行 dockerBuilder 生成 Dockerfile 文件（或者使用指定的 Dockerfile 文件），再打包为 Docker image。</p><p>当然，本地安装了 Docker，就会使用本地 Docker 来完成打包。</p><p>如果本地没有 Docker ，idea 可能会自动引入吧。我没试过……</p><h3 id="注意-2"><a class="markdownIt-Anchor" href="#注意-2"></a> 注意</h3><p>理解打包的这个流程，配置中的各项就很清晰了……照搬配置会出很多问题的……</p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 配置与操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置与操作 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电影需要讲好一个故事吗？</title>
      <link href="/2019/02/12/fxxk-int/"/>
      <url>/2019/02/12/fxxk-int/</url>
      
        <content type="html"><![CDATA[<p>表达欲突然冒出来了，就忍不住想编凑些口水话。</p><p>上下文没什么联系，全是我的主观感受与认知，充满了偏见 —— 就当为我现在的所思所想存个档吧……</p><p>而重点在于 —— 那些侃侃而谈让我觉得非常牛皮的人，有时触碰到我比较了解的领域，就表现得偏执还携带着做作的幽默，且没有基本常识。</p><p>我对自己并未系统了解过的东西指手画脚，胡说八道的时候，大概也愚蠢如此吧……（但我还是要吹牛）</p><hr><p>电影有很多可能性，不仅仅在于「至少讲好一个故事」。小说可以讲故事，漫画也可以讲故事……电影和其他艺术一样，它的特点在其他东西表达不出来的那部分。电影的发展搞不好就是这部分东西的发展。比如说电影发展过程中，众多大师对剪辑技巧的鼓捣 —— 只要你用心找，总能对一部近些年出品的电影做出这样的评论 ——「不过是对 XXX 拙劣的模仿」。</p><p>漫画发展也是如此。从连环画这种东西，发展到现在分镜头式的漫画，这种形式上的革命，大大促进了漫画的繁荣。甚至有评论「一切日本漫画都是抄袭手塚治虫」……</p><p>由此，也很容易发现，形式这种东西，难以达到革命性的突破……所以对形式做文章的创作者更容易受到尊重，也更容易翻车……</p><p>有的观点认为，这些镜头语言也终究是为故事服务的。但是我觉得，故事，其实也不过是某种东西的载体 —— 比如说情绪，意识形态……早年有很多电影，构图模仿名画，也许可以这样比喻 —— 它和绘画这类东西一样，直接触碰人（观赏者）的内心。不过「触碰内心」这种说法有点讨巧且含糊。我把它理解为共鸣。就像夜晚瞭望星空，也许想到了宇宙辽阔人类之小，也许啥都没想到，突然就感觉内心翻涌。</p><p>大多数做影视的自媒体，几乎都离不开把故事复述一遍这一套路。自然，这类自媒体挑选的本就是故事性较强的片子。但是如果在它们的评论中出现了「用镜，构图……」这类名词，一定得谨慎。这些名词，就算现在立马花一大段时间去搜索引擎搜索，也很难明明白白地界定它们指的是哪些内容，又应当如何去评价他们的好坏。</p><p>这样的评价，要么基于一定的基准，可以是众所周知的。比如一篇介绍诺兰碎片化剪辑的文章对比 20 世纪前期的很多电影，评价后者剪辑「太过工整」—— 拍人进屋，一定会给开门一个镜头。要么，应当拿出评价者自己的理解。说到底，这种东西太私人了。即便行业内有一定的潜认知，我相信，也一定有各种流派……</p><p>有些自媒体自喻普及优秀电影、面向大众，却总是用着一些暧昧的专业名词却不加解释。直接评价「……好」、「……牛皮」，这没什么意义嘛……</p><blockquote><p>或许现在需要一个普及电影基础知识的自媒体。（油管上挺多电影论文这类视频</p></blockquote><p>而故事，我认为评判故事好坏的一个重要标准在于，世界观可以虚构，但是角色在这个世界观下的反应一定要真实。反面例子，很多鬼片的主人公完全违背观众意愿做一些沙雕行动。</p><p>日漫经常这样操作，给一个很扯的设定，比如各种「吃人」的世界观之类的……即便这个世界观圆不回来，只要角色的反应真实，故事就能吸引人 —— 而之后，会有大量的观众帮创作者脑补，圆回去。话说回来，在虚构的设定里寻找真实，不瞎胡闹嘛……</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 观与感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活记录 </tag>
            
            <tag> 看片所想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这些内容是不是谬传的啊？</title>
      <link href="/2019/02/07/book/"/>
      <url>/2019/02/07/book/</url>
      
        <content type="html"><![CDATA[<p>今天其实还是干了点正事的，不过一如既往，想等到完成了再炫耀。所以，所以今天本来不打算来这吹牛皮的……</p><p>但是但是，刚刚读完库切的《青春》，没有发现那段:</p><blockquote><p>是不是每个人年轻的时候都有这样一段日子，鸿鹄志高却难遂，迷茫地过着，昏昏噩噩地耗，最终不是妥协泯然众人，就是找不到出口被生活围困。这时候家人朋友，看在眼里，哪怕不说，心里想的也是“小镇青年何必心怀远方”这样的想法吧。</p></blockquote><p>之前读《月亮与六便士》也没读到那句「满地都是六便士……」，搜索引擎查了下，大多解释说这是别人的评论……</p><p>不过一个爱读书的朋友说 ta 读到过，还专门找原文对比了……</p><p>然后我打算全文搜索下。</p><p>《青春》读的 mobi 电子档，专门转换成 txt，用自带编辑器打开搜索了一下「小镇」，没搜到……</p><p>顺手又找来《月亮与六便士》的文本，搜索「六便士」，这个词唯一一次出现是在标题……</p><p>要是真的有，也应该在原文，或者被删减了吧……又或者出现在序言——这个概率也还蛮大的……</p><p>不过我倾向于认为来自评论，被人因为某种原因以谬传谬……</p><p>真是的，我之前在 <a href="/2018/12/16/monthly-diary/">月记</a> 这篇博文引用了前面那段，自己也是因为觉得这段话写得挺好才去读这本书，没想到……</p><p>这种谬误不仅存在于书籍吧，各种环境都有……</p><p>之前也遇到一部电影的评论被当做台词用于自媒体的营销文中……</p><blockquote><p>某些营销号的素质啊……</p></blockquote><p>虽然某种意义上吸引了读者（观众），也算是好处……</p><p>这种好处作用域有限……</p><p>呀呀，睡觉了，现在已经 8 号凌晨 00 : 07 了！！不过这篇口水文的日期还是设置为 7 号好了……</p><p>PS，过年去了，明天开始又断更……</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日记</title>
      <link href="/2018/11/28/diary/"/>
      <url>/2018/11/28/diary/</url>
      
        <content type="html"><![CDATA[<p>「虽然开玩笑说每天要说够一定量的废话，谁说不够谁不开心。其实我并不太适合靠和朋友谈天说地来缓解压力，尤其是一直以来都是靠着自己调整情绪在过活。情绪交换势必会让自己的时间向别人妥协，没得法。即便每个人都在妥协。有可能吧，因为种种原因，比如对别人不信任，死读卡耐基，精神不对等什么的……有的人就放弃了自己吐槽的权利，在一段关系中变成了一个单向垃圾桶。这种人表现得精力充沛的样子，其实维持这种样子就得消耗大量精力。成年以前，在一个封闭的环境，我还可以每天冷脸三点一线，并且享受这种效率带来的快感。可是现在刚刚成年，要忙着为未来做准备吧，要玩耍吧，要谈恋爱吧，还要建立自己的道德体系……」</p><p>「我似乎就是这样的矛盾体。刚来学校时，社团招新，我准备告别中学时的郁郁不得志，于是毫无准备就投身到各个报到点。面试的时候那个学长问我哦，说你觉得你是一个什么样的人？」</p><p>「哪有这样的问题啊！我是怎样的人，不就是你看到的这样一个人吗？可是当时我萌新嘛，于是就仔细斟酌了一下，告诉他说，我是一个挺矛盾的人吧。当时说出这个答案把我自己吓了一跳，就急忙解释，可能我这样说有点奇怪……」</p><p>「没想到那个学长说，这完全不奇怪哦！大家都是这样的。然后吧，当时我就震惊地看着他，脸都红了，尴尬地不得了。同时内心也很高兴，原来大家都是这样，真好啊，我终于不是异类了，我终于来到充满了爱和包容的大人世界了！」</p><p>「哎，我那时真是一个无可救药的傻瓜。这样的言语其实不过是骗新生交部门建设费用的安慰剂而已。当时实在太年少了，一直觉得这些大我们一两岁的年轻人比我们懂得更多一些。其实单纯的年龄增长在人格健全方面根本毫无贡献嘛！」</p><p>「那个时候的我却感动得不行，立马交了十块钱的社团经费。不过那已经不是我了哦，而是一个被情绪驱使的我，情绪这种诡异的东西占据了我的躯体，我才会做出交钱这种不含蓄的事。」</p><p>「然后他拉我进了一个叫做『XX 猫粮销售 XX 地区代理』的 QQ 群。还催促着我改群名片。我愣了一下，说我们不是『保护小动物协会』吗？他说那种事我们有空了也做，不过你难道不想在大学赚点零花钱用吗？我们去年是 XX 地区的销售冠军哦！」</p><p>「我期待中温柔的学姐照顾小兔子的场景就这样在我眼前变成泡沫。」</p><p>「这太让人失望了吧！」</p><p>「我就是这样的人啊。倾向于坦诚的关系，有效率的交流。即便是对那种在心灵鸡汤上被划分为弱关系的人。」</p><p>「这样的代价就是有可能会失望啊。对于他们来说，做人好像就是一场零和游戏，与人建立关系就是为了在这段关系能达到顶峰时抛售，然后获取利益。可是我不想这样啊，如果每个人都能坦诚的话……这当然不可能，不过为什么我都把自己的底牌亮在自己脑门上了，他们还是不愿意对我坦诚呢。甚至还觉得我已经暴露底线了，我完蛋了。」</p><p>「你听说过那个形容吗？『房子好像突然变得不高兴。』我当时情绪就是有这么低落。」</p><p>「像一条狗一样。」她加了一句。她的意思似乎是，她离开了，但是被戏弄的感觉久挥不去。</p><p>我看着她在我的面前进行情绪表演，心里产生了一种令人作呕的快意。我对她的厌恶似乎是与生俱来的。有些时候就是这样，你都不知道自己为什么会对一个人没来由的生厌。她似乎行为得体，其实也说的上是作风优良了，处事都是三好青年的风范，可我就是对她产生不了好感。她的言行在我看来都是做作——特别是言，每当她充满感情地向我喋喋不休地倾诉那些我并不感兴趣的东西，每一帧都让我感到生理上的不适。</p><p>「就是呢。」我笑着回答她。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 故事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 故事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat 配置 HTTPS 证书</title>
      <link href="/2018/11/25/Tomcat-SSL/"/>
      <url>/2018/11/25/Tomcat-SSL/</url>
      
        <content type="html"><![CDATA[<h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="https://www.jianshu.com/p/282a02238f5chttps://www.jianshu.com/p/282a02238f5c" target="_blank" rel="noopener">Tomcat使用key和pem配置HTTPS证书</a></p><h2 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h2><h3 id="前提"><a class="markdownIt-Anchor" href="#前提"></a> 前提</h3><p>有个域名</p><p>部署了 Tomcat 的服务器</p><h3 id="申请证书"><a class="markdownIt-Anchor" href="#申请证书"></a> 申请证书</h3><p>网址 ：<a href="https://freessl.org" target="_blank" rel="noopener">https://freessl.org</a></p><p>申请过程不提。</p><p>注意，验证的时候需要域名进行 TXT 解析。</p><h3 id="tomcat-部署证书"><a class="markdownIt-Anchor" href="#tomcat-部署证书"></a> Tomcat 部署证书</h3><p>最后下载证书，得到一个以域名为名的压缩包。里面有两个文件：一个 <code>full_chain.pem</code> ，一个 <code>private.key</code> 。</p><p>将这两个文件上传到服务器，记住路径就行。</p><p>执行下面两条命令。</p><p><code>openssl pkcs12 -export -inkey private.key -in full_chain.pem -name tomcat -out tomcat.p12</code></p><p><code>keytool -importkeystore -srckeystore C:\tomcat.p12 -srcstoretype pkcs12 -destkeystore C:\tomcat.jks</code></p><p>注意上面命令的路径。</p><p>配置需要修改 <code>tomcat/conf/server.xml</code>，添加下面的代码。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8443"</span> <span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11Protocol"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">maxThreads</span>=<span class="string">"150"</span> <span class="attr">SSLEnabled</span>=<span class="string">"true"</span> <span class="attr">scheme</span>=<span class="string">"https"</span> <span class="attr">secure</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">clientAuth</span>=<span class="string">"false"</span> <span class="attr">sslProtocol</span>=<span class="string">"TLS"</span> <span class="attr">keyAlias</span>=<span class="string">"tomcat"</span> <span class="attr">keystoreFile</span>=<span class="string">"/home/tomcat.jks"</span> <span class="attr">keystorePass</span>=<span class="string">"104207"</span>  /&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>按原文那样配置不行，还要加一个 <code>keyAlias=&quot;tomcat&quot;</code> 。</p><p>keyAlias 值对应第一个命令 <code>……full_chain.pem -name tomcat……</code> 这里的 tomcat。</p></blockquote><p>访问 <code>https://域名:8443</code> 即可，如果想要用其他端口，则对应修改配置文件……</p><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><p>为了解决小程序需要 https 访问的问题……</p><p>还需要腾讯云的服务器，一个备案过的域名……不过开发时可以选择不效验域名安全性……</p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 配置与操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置与操作 </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科普谈起</title>
      <link href="/2018/10/06/October/"/>
      <url>/2018/10/06/October/</url>
      
        <content type="html"><![CDATA[<p>前阵子一时兴起，读了几本简单的科普书籍，特别有意思。三体里质子封锁人类基础科学研究，科学家们惊呼「物理已死」，但是现实中似乎是物理不断发展，宣判哲学的死刑。从物理上看，某些哲学的时空观是有一定道理的（对的）。惊叹怪不得好多天才后来都寄希望于上帝。</p><p>优秀的科普书籍有一点不足之处，它把那个领域的知识讲解的太过透彻明了容易理解，但是又不深入。容易让读者产生原来如此，不过，也不过尔尔嘛的心情。譬如看了一点哲学就觉得活着也就这样了，读了一点政治又认为生存就是谎言，了解到宇宙之大便认命于自己的渺小。</p><p>不过在迷茫中自己瞎几把分析正是乐趣所在。譬如一部电影，你正解读地高兴，导演突然跳出来说我这样是为了表达如此如此……兴致全无啊！</p><p>罗素在《权威与个人》中说「真理总会打败迫害」—— 这只是一个人类代代重复的善意的谎言之一。只不过总有明智的人会发现真理，而他们恰好生活在一个能接受这些真理的时代。</p><p>挺有意思的。人在面向公众发言的时候总是追求客观，所以大部分的言论下都是「人之初，性有善有恶」。我们好像「性本善」的观点传播得更广泛一些，但是有些地方却相反。有「政府的存在就是为了组织大家往尽量善的方向发展」的观点，又或者以另一种方式表达，「民主制度是仅比暴君制度好的一种制度」。</p><p>突然有点明白为核武器的诞生做出过贡献的科学家们为什么又如此讨厌它。伤害了太多的生命，更主要的是武器实在是一个反人类的东西，虽然它在无形之中促进了人类的科学发展，但是也拖延了人类的后腿。它为人类提供了生存保障，但当它转向人类自身时，就只有贪婪与猜疑。这是胡言乱语，扩展开来，监控，安检，不也是如此？</p><p>在脑海里一片空白的时候，非常容易被别人引导情绪，有了一点概念，就会好一些。<strong>比起「脑袋变成别人思想的跑马场」，更可怕的应该是嘴巴变成别人思想的扩音器。</strong></p><p>不过比起广泛地接触，还是建立自己的知识归纳体系效率更高一点。</p><p>建立自己的道德准则与审美标准大概挺重要的。不过义务教育与生存所需，这两者的交集实在太小。很多东西都是言传身教自我摸索，像我这种长期不练习抬头以至于得了颈椎病的人，面对生活，总会惊叹人类活动的复杂与无规则。但是平时观察别人做事，似乎都遵循着某种规则。这时才明白本应在幼时学得的察言观色，遵守规则，全然不会。总结起来，就是思维说服我们，或者我们说服自己的良心，以此确保自己行为的正当性。</p><p>唉。虽然表达欲无限，内容其实没什么突破，不过是一团乱麻换了一件又一件的花衣。充满恶意地揣度，大概都是这样，只不过有的在修辞上丰富一些。其实不是这样，总有人看得更透彻，观点直指核心。话说网络上热衷于吵架的这群人大概是最公正的网民朋友，他们又不针对哪个人，只是发现不和自己心意的观点，就开始狂喷。他们并不在乎别人看不看得到 —— 这也是表达欲的体现嘛，与我现在的行为类似。（蹭热度了。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 观与感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读所思 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于成长他唯一记得的是</title>
      <link href="/2018/08/08/grow/"/>
      <url>/2018/08/08/grow/</url>
      
        <content type="html"><![CDATA[<p>在网络时代以前，名言警句还大多来源于名著，这些隽语里，「人」这个字似乎出现得要更频繁些。如果把现在的所有名言统计下来，「人生」这个词的出现频率一定远远大于其他词汇短语。这当然是信口开河，我没有做过统计，也不打算深究，只是想当然觉得好像是这么回事。</p><p>人生的终点是时间不确定的唯一项，可路上还有许许多多其他的终点等待着我们去攀登或者路过，倒也不会寂寞。每结束一段路程，心情总是会低落一阵子。如果有一个开心测量仪，平时的开心指数会在 0 到 0.5 之间徘徊，而这段时间的开心指数会突破 -1。</p><p>时间回到一年前，我在差不多的时间开始折腾这个博客，一年不过是转眼间的事，没意外的话，校园生活也进入了倒计时，这种被时间追赶的感觉我还没适应过来，身边的一切事物就开始已不可见的震动发出声波传送至我的耳朵，内容翻译成中文的大意是「抓紧扶牢，时间它要加速了。」</p><p>我在这个博客的第一篇博文提到刚结束一门课程，今年也是如此。说出来可能有点搞笑，我的情绪低落来源于今天结束了课程，明天，终于要迎来暑假。我怀疑自己是不是过于早熟，以至于提前开始怀念自己的校园时光。大概不是这个原因。但我确实在象牙塔感受到安全感，在朝九晚五的日子感受到充实。</p><p>宫崎骏里的台词说就像一趟车，陪伴你的人会不断地下车。我不怎么讲命运这个词，但是人能够相聚到一起，确实是一个很了不起的概率。</p><p>当我下车的时候，总有一种双手无处安放的局促。好像突然从某天开始，就从一个无忧无虑的小孩坐到了宇宙管理委员会会长的座位上，每天都得签署一堆关乎宇宙命运的文件。</p><p>纠结于下车的时机，在终点间奔波。突然意识到所谓的成长，已经不再是装作很喜欢喝啤酒，而是不得不独自做出各种决定，并且承担它带来的任何后果。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发与部署前后端分离项目（主要解决跨域问题）</title>
      <link href="/2018/07/25/web/"/>
      <url>/2018/07/25/web/</url>
      
        <content type="html"><![CDATA[<h2 id="changelog"><a class="markdownIt-Anchor" href="#changelog"></a> ChangeLog</h2><p>[2020-03-03-update]：项目使用的是 Vue CLI 3（Vue CLI 2 的配置也有提及），现在已经更新到 Vue CLI 4，部分内容可能已过时。</p><p>Spring Boot + Gradle 打包为 Docker 可以查看： <a href="/2019/04/02/springboot-docker/">Spring Boot 项目打包为 Docker 镜像</a></p><p>Tomcat 配置 HTTPS 可以看：<a href="/2018/11/25/Tomcat-SSL">Tomcat 配置 HTTPS 证书</a></p><h2 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h2><p>后端采用 Spring Boot 开发，部署在 Tomcat；前端采用 Vue CLI3 开发，部署在 nginx；</p><p>在开发过程中，前端访问后端提供的 API 会遇到跨域的问题，<strong>Vue CLI 里可以直接配置代理解决</strong>。</p><p>但是当项目部署到服务器端，比如把后端放在 Tomcat，前端放在 nginx，又会遇到跨域问题。而此时，开发环境的配置就不起作用了。</p><p>该如何解决部署时的跨域问题呢？</p><p><strong>可以通过配置 nginx 的代理，使前端正常访问后端提供的 api。</strong></p><p>所以问题大致分为三块：Tomcat 部署项目、nginx 部署项目、服务器端配置解决前端访问后端 api 出现的跨域问题。</p><p>当然，项目部署前还需要构建。本文不涉及 Vue CLI 如何 build 项目、但是提到了 Spring Boot 构建包以及部署，包括 Spring Boot 直接打 jar 包执行，Spring Boot + Gradle 如何打 war 包，部署 war 包至 Tomcat，以及通过 Docker 构建部署。</p><p>其它一些细节方面，本文没有提及 Tomcat 的安装、但是提到了 Vue CLI 在开发环境配置代理解决跨域问题。</p><p>还有<strong>腾讯云</strong>的一些问题，遇到的端口、防火墙等问题，项目如何从本地上传到服务器……</p><h2 id="为什么会跨域"><a class="markdownIt-Anchor" href="#为什么会跨域"></a> 为什么会跨域</h2><p>前后端分别开发的时候，前端使用了 Vue CLI，用 Node.js 模拟了一个服务器环境。而后端开发使用 Spring Boot，用的 Tomcat 做服务器。</p><p>这样导致一个问题 —— 前后端不在同一个服务器环境中。所以前端访问后端的 api 就会产生<strong>跨域问题</strong>。</p><p>在开发环境解决跨域问题，Vue CLI 已经提供了解决方案，进行相应配置即可。</p><p>[Vue CLI3 与 Vue CLI 2 在开发环境解决跨域问题](# Vue CLI3 与 Vue CLI 2 在开发环境解决跨域问题)</p><p>而我在部署前后端分离项目时，将后端项目放在 Tomcat，前端项目部署在 nginx……又会遇到跨域问题。而此时，之前开发环境的配置就无效了。</p><p>但也可以在 nginx 配置代理。</p><p><a href="#%E9%85%8D%E7%BD%AE%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98">nginx 配置代理解决跨域问题</a></p><p>所以解决跨域问题的大概原理就是做个代理，假装前端是在自己的服务器环境下访问后端的 API……</p><h2 id="spring-boot-后端项目的部署"><a class="markdownIt-Anchor" href="#spring-boot-后端项目的部署"></a> Spring Boot （后端）项目的部署</h2><p>Spring Boot 自带了 Tomcat 容器，所以想要部署到外部容器，需要做点改动。</p><p>改动见下文：[去 Spring Boot 自带容器](#去 Spring Boot 自带容器)</p><p>不改动就部署的话，访问会报错 404。</p><h3 id="直接-jar-包部署"><a class="markdownIt-Anchor" href="#直接-jar-包部署"></a> 直接 jar 包部署</h3><p>Idea 使用 Spring Boot 默认方式初始化项目时，在 Gradle 中的配置是默认打包为 jar 包。</p><p>也可以把 jar 包放服务器上直接运行，执行 <code>java -jar [project_name].jar</code> 就阔以了。</p><p>不过这样运行的程序，关闭终端，程序就停止了。</p><p>我们可以通过 Docker 来打包部署，也可以打 war 包部署到外部容器（通常是 Tomcat）。</p><h3 id="去-spring-boot-自带容器"><a class="markdownIt-Anchor" href="#去-spring-boot-自带容器"></a> 去 Spring Boot 自带容器</h3><p>在 Gradle 中把默认的 Tomcat 设置为仅仅在生产环境使用。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">       providedRuntime(<span class="string">'org.springframework.boot:spring-boot-starter-tomcat'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 Spring Boot 的入口类，实现 SpringBootServletInitializer 接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatroomApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(ChatroomApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现SpringBootServletInitializer可以让spring-boot项目在web容器中运行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> builder.sources(<span class="keyword">this</span>.getClass());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spring-boot-gradle-打包为-docker"><a class="markdownIt-Anchor" href="#spring-boot-gradle-打包为-docker"></a> Spring Boot + Gradle 打包为 Docker</h3><p>Spring Boot + Gradle 打包为 Docker 可以查看： <a href="/2019/04/02/springboot-docker/">Spring Boot 项目打包为 Docker 镜像</a></p><h3 id="spring-boot-gradle-打-war-包部署到外部容器"><a class="markdownIt-Anchor" href="#spring-boot-gradle-打-war-包部署到外部容器"></a> Spring Boot + Gradle 打 war 包部署到外部容器</h3><p>设置打包为 war，在 Gradle 里配置：</p><p><code>apply plugin: 'war'</code></p><p>再构建包就行啦！</p><p>war 包部署至 Tomcat 见：[Tomcat 部署（后端）项目](#Tomcat 部署（后端）项目)</p><h2 id="tomcat-部署后端项目"><a class="markdownIt-Anchor" href="#tomcat-部署后端项目"></a> Tomcat 部署（后端）项目</h2><p>Tomcat 的运行没什么说的，将项目打包为 war，放在目录 <code>/webapps</code> 下，启动 Tomcat 后，会自动解压 war 包。</p><blockquote><p>Tomcat 的安装不提。</p><p><strong>Spring Boot 项目打 war 包部署到外部容器见文章末。</strong></p></blockquote><p>比如有个包 etob.war ，把它放在 <code>/webapps</code> 下，运行 Tomcat 后，<code>/webapps</code> 下会有一个 war 包解包后的 <code>etob/</code> 文件夹。</p><p>此时如果没有修改配置文件，我们就已经可以通过 <code>公网ip:8080/etob</code> 来访问我们的项目了。</p><blockquote><p>项目默认运行在 8080 端口，要用别的端口可以在 <code>conf/server.xml</code> 里修改。</p></blockquote><p>当然，想要通过 <code>ip:8080</code> 直接访问项目，而不是通过 <code>id:port/project_name</code> 来访问的话，也可以进行配置。</p><h3 id="上传项目"><a class="markdownIt-Anchor" href="#上传项目"></a> 上传项目</h3><p>可以通过 ftp 上传，也可以 ssh 直接上传。</p><p>终端下 ssh 上传本地文件服务器。</p><p>安装 scp。</p><p>执行 <code>scp 本地文件地址 用户名@ip:/服务器存放文件的文件夹</code>。</p><p>如 <code>scp /home/etob.war hqweay@192.xxx.26.21:/src/local/tomcat/webapps</code>。</p><h3 id="可能过时配置"><a class="markdownIt-Anchor" href="#可能过时配置"></a> 【可能过时】配置</h3><h4 id="方式一"><a class="markdownIt-Anchor" href="#方式一"></a> 方式（一）</h4><p>把 war 包放在 <code>/webapp</code> 下，执行 <code>./start.sh</code> 即可。</p><blockquote><p>Tomcat 会自动解压 war 包。不过这样，Tomcat 只能部署一个项目。</p></blockquote><h4 id="方式二"><a class="markdownIt-Anchor" href="#方式二"></a> 方式（二）</h4><p>删除原 <code>webapps/ROOT</code> 目录下的所有文件，修改文件 <code>conf/server.xml</code>，在 Host 节点下增加如下 Context 的内容配置：</p><pre><code>&lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;xmlValidation=&quot;false&quot; xmlNamespaceAware=&quot;false&quot;&gt;…………&lt;Context path=&quot;&quot; docBase=&quot;C:/apache-tomcat-6.0.32/myapps/bc.war&quot;&gt;&lt;/Context&gt;&lt;/Host&gt;</code></pre><p><strong>注意</strong></p><p>[复制于网络，忘记来源了。]</p><ul><li>1）path 的值设置为空。</li><li>2）应用不要放到 Tomcat 的 webapps 目录下（如上述配置是放到自定义的文件夹 myapps 内的），否则访问时路径会有问题。</li><li>3）docBase 指定到绝对路径。</li></ul><p>这样配置后重启 Tomcat，如果 docBase 指向的是 war 文件，则会自动将 war 解压到 webapps/ROOT 目录。</p><p>如果 docBase 指向的是应用已解压好的目录，如 <code>docBase=&quot;C:/apache-tomcat-6.0.32/myapps/bc&quot;</code>，则 Tomcat 不会在 webapps/ROOT 目录下继续生成目录。（这种情况下，这样就可以不用删除 webapps/ROOT 目录，但 webapps/ROOT 目录内的内容是无法访问的），访问时将直接使用docBase指定的目录。</p><h4 id="建议使用方式三"><a class="markdownIt-Anchor" href="#建议使用方式三"></a> 【建议使用】方式（三）</h4><p>与方法二类似，但不是修改全局配置文件 <code>conf/server.xml</code>，而是在 <code>conf/Catalina/localhost</code> 目录下增加新的文件 <code>ROOT.xml</code> （注意大小写），文件内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version='1.0' encoding='utf-8'?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">docBase</span>=<span class="string">"/usr/local/src/java/tomcat/apache-tomcat-8.0.48/test"</span> <span class="attr">debug</span>=<span class="string">"0"</span> <span class="attr">privileged</span>=<span class="string">"true"</span> <span class="attr">reloadable</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="nginx-部署前端项目"><a class="markdownIt-Anchor" href="#nginx-部署前端项目"></a> nginx 部署（前端）项目</h2><p>安装与使用不提。</p><h3 id="配置解决跨域问题"><a class="markdownIt-Anchor" href="#配置解决跨域问题"></a> 配置解决跨域问题</h3><p><strong>使用前需要配置防火墙，以开放端口。</strong></p><p>nginx 进行相关配置，需要修改 <code>/nginx/conf/nginx.conf</code> 文件（<strong>版本：nginx-1.15.2</strong>，不同版本配置文件路径不同 ）。</p><p>我这样配置的，先看配置，再解释。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">## （省略其他）</span><br><span class="line">http&#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        location / &#123;</span><br><span class="line">          root /home/hqweay/etob/dist;</span><br><span class="line">          index index.html;</span><br><span class="line">        &#125;</span><br><span class="line">        location /api &#123;</span><br><span class="line">                add_header 'Access-Control-Allow-Origin' '*';</span><br><span class="line">                proxy_pass http://localhost:89/etob/api;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意下面的 <code>location /api</code> 这一项是配置代理的后端接口。</p><h3 id="配置说明"><a class="markdownIt-Anchor" href="#配置说明"></a> 配置说明</h3><h4 id="路径重写"><a class="markdownIt-Anchor" href="#路径重写"></a> 路径重写</h4><p>我的后端项目为 <code>api.war</code> ，项目内的 <code>api</code> 又是 <code>api/getXXX</code> 这样的格式。所以后端项目部署后，访问的项目根目录是 <code>ip:port/api</code>。（当然可以用 ip 直接当根，不过我没配置……）</p><p>而访问 <code>api</code> 则需要用 <code>ip:端口/api/api/xxxx</code> ……</p><p>所以在 nginx 配置中有这么一行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_pass http:&#x2F;&#x2F;localhost:89&#x2F;api&#x2F;api;</span><br></pre></td></tr></table></figure><p>就是用 <code>/api</code> 替换了 <a href="http://localhost:89/api/api" target="_blank" rel="noopener">http://localhost:89/api/api</a> 。（部署在 tomcat 的后端项目）</p><h4 id="请求头"><a class="markdownIt-Anchor" href="#请求头"></a> 请求头</h4><p>至于上面的 <code>add_header 'Access-Control-Allow-Origin' '*';</code> ，是据说 Vue 项目必须的配置。我按照别人说的加了，没有测试过不加会是什么情况。（也许不影响）</p><h4 id="项目路径"><a class="markdownIt-Anchor" href="#项目路径"></a> 项目路径</h4><p>其他没什么说的了，再解释下下面这个。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">          root &#x2F;home&#x2F;hqweay&#x2F;etob&#x2F;dist;</span><br><span class="line">          index index.html;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>root 后面是前端代码所在的文件夹（随便放在服务器的哪里都可以，因为是绝对路径嘛……）。index 就是根文件（访问时默认打开的文件）。</p><h2 id="vue-cli3-与-vue-cli-2-在开发环境解决跨域问题"><a class="markdownIt-Anchor" href="#vue-cli3-与-vue-cli-2-在开发环境解决跨域问题"></a> Vue CLI3 与 Vue CLI 2 在开发环境解决跨域问题</h2><p>后端环境：<a href="http://localhost:8089" target="_blank" rel="noopener">http://localhost:8089</a></p><p>后端接口：<a href="http://localhost:8089/api/xxxx" target="_blank" rel="noopener">http://localhost:8089/api/xxxx</a></p><p>前端环境：<a href="http://localhost:80" target="_blank" rel="noopener">http://localhost:80</a></p><p>在 <strong>vue.config.js</strong> 中配置：</p><p>PS：Vue CLI 2 是修改 <code>config/index.js</code> 的配置项 dev（开发环境）中的 ProxyTable（代理）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">proxyTable: &#123;</span><br><span class="line">      <span class="string">'/api'</span>: &#123;  <span class="comment">//使用"/api"来代替"http://localhost:8089" </span></span><br><span class="line">        target: <span class="string">'http://localhost:8089'</span>, <span class="comment">//源地址 </span></span><br><span class="line">        changeOrigin: <span class="literal">true</span>, <span class="comment">//改变源 </span></span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">'^/api'</span>: <span class="string">'/api'</span></span><br><span class="line">           <span class="comment">// 路径重写。因为原来的 api 路径含有 /api</span></span><br><span class="line">          <span class="comment">// 如 http://localhost:8089/api/chatRoom/addMessage</span></span><br><span class="line">           <span class="comment">// 若不重写，因为使用了 "/api" 来代替 "http://localhost:8089"</span></span><br><span class="line">          <span class="comment">// 前端使用的 api 就类似：/api/api/chatRoom/addMEssage</span></span><br><span class="line">          <span class="comment">// 重写后，路径就类似这样：/api/chatRoom/addMEssage</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置后，前端就可以直接用 <code>api/xxxxx</code> 作为接口访问。</p><p><strong>但是，这样只是解决了开发环境的问题。</strong></p><p><strong>前端项目部署到服务器环境（线上），开发环境的配置就失效了嘛。</strong></p><p>所以需要在 nginx 上配置一下代理！而配置，就是上面那样啦！</p><blockquote><p><s>阔不阔以把前后端都放在 Tomcat ？</s></p></blockquote><h2 id="过时关于端口的一些沙雕问题"><a class="markdownIt-Anchor" href="#过时关于端口的一些沙雕问题"></a> 【过时】关于端口的一些沙雕问题</h2><h3 id="0x01-腾讯云"><a class="markdownIt-Anchor" href="#0x01-腾讯云"></a> 0x01 腾讯云</h3><p><strong>腾讯云要开启端口，首先需要到官网控制台修改权限组！！</strong>（没注意到这个问题折腾了很久）</p><p>然后设置开启端口就好了。</p><h3 id="0x02-防火墙"><a class="markdownIt-Anchor" href="#0x02-防火墙"></a> 0x02 防火墙</h3><p>处理中遇到一个特别诡异的问题，只有 8080 端口可以在公网访问……</p><p>但是其他端口可以在内网访问，比如设置 nginx 在 89 端口，在服务器内用<code>curl localhost:89</code>，可以收到返回信息。</p><p>扫描公网 ip，发现只开放了 8080、22（ssh）端口。</p><p>因为安全组再三确认已经搞了，怀疑是防火墙问题，但是自认为已经把防火墙关了，还是不行。</p><p>防火墙，安全组……翻来覆去地确认，不知问题在哪。</p><p>最后执行 <code>iptables -F</code> （清空防火墙规则），其他端口就能用了……现在还是不知所以然。</p><blockquote><p>PS: <strong>firewalld</strong> 服务与 <strong>iptables</strong> 服务都不是真正的防火墙，它们都只是用来定义防火墙规则功能的防火墙管理工具。将定义好的规则交由内核中的 <strong>netfilter</strong> 即<strong>网络过滤器</strong>来读取，从而真正实现防火墙功能，所以其实在配置规则的思路上是完全一致的。</p><p>来源： <a href="https://blog.csdn.net/sinat_32079337/article/details/70239713" target="_blank" rel="noopener">Centos 7禁用firewalld安装iptables防火墙</a></p></blockquote><h4 id="猜测原因"><a class="markdownIt-Anchor" href="#猜测原因"></a> 猜测原因</h4><p>我发现自己上装了 <code>firewalld</code> ，<code>iptables</code> 两个服务，猜测是不是这个原因造成了上面的问题，总之先关闭一个。决定关闭 <code>iptables</code> 。</p><p><a href="https://blog.csdn.net/osfipin/article/details/54405445" target="_blank" rel="noopener">怎么关闭和卸载iptables？小心了！！</a></p><p>不要用 <code>remove</code> 命令，用停用。</p><p>停用 <code>chkconfig iptables off</code></p><p>开启 <code>chkconfig iptables on</code></p><p>**我怀疑是百度 「端口操作」 时，网上的文章没有区分 iptables，firewalld 两种不同环境，直接给出命令，然后我就面向搜索引擎编程（copy，paste），把两个服务都搞上了……**然后关闭了这个防火墙那边仍开着，关闭了那个，这边又开启了，辗转反复，所以一直没能成功……</p><h3 id="firewalld-与-iptables"><a class="markdownIt-Anchor" href="#firewalld-与-iptables"></a> firewalld 与 iptables</h3><p>注意区分 firewalld 与 iptables。</p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 配置与操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 配置与操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6 月 9 日</title>
      <link href="/2018/06/09/nothing/"/>
      <url>/2018/06/09/nothing/</url>
      
        <content type="html"><![CDATA[<p>前几日正值高考，可惜我的人际范围里已经没有高三党了，满腹祝福无人可倾，只好修改下遣词造句以备将来。</p><p>其实当时还是有不少遗憾的，有时候甚至还会把自己现在的不如意甩锅给从前。不过毕竟是个过来人了，似乎已经领取到了讨论这件全国性的大事件的资格证。而常言道，拥有的东西总是不过尔尔。千言万语也就化为无法免俗的客套。</p><p>六月总体来说是个伤感的月份，虽然比起六月的炎热，情绪的变化有些微不足道。有时候想些莫名其妙的东西，常怀疑身处其间时的感情和之后的回忆是两回事。看着过去在社交软件留下的动态，觉得当时过得似乎挺开心的，但不知为何，这些年回想起来，总是几件不那么愉快的事情占据脑海。以前看到一个说法，青春就是回忆过滤掉愁苦与纠结。可能我太幼稚了，有那么一段时间心智还停留在童年。只有小孩会为不值得的事浪费时间。</p><p>父打电话说旁边的高中因为高考放假了，问我放了没。母上周周末和我对话，埋怨我放假怎么都不往家里打电话。我安慰自己不要把假期当做思念的借口，把与家人联系当做一件很正常很普通的事 —— 我对人与人之间关系的定义大多如此，即真正的感情不需要刻意的维护。但是仪式感还是很重要的。很重要。</p><p>上周在图书馆外面遇到拍毕业照的青年，和别人谈起来都觉得时间真是越来越快，似乎花了中学时的一学期就过完了两年。谈起两年后，又都是玩笑。就像关于离别的话题本该这样。</p><p>我有时在操场上排泄盐分，回想人类的情绪表演，便展现出惊人的共情天分，表情像是可以随时替他们流泪。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>真相不重要</title>
      <link href="/2018/05/27/truth/"/>
      <url>/2018/05/27/truth/</url>
      
        <content type="html"><![CDATA[<p>直觉大部分的争论在于对话双方对自己结论的深信不疑，不过也有人是对自己结论的来源深信不疑。</p><p>交流是建立在对自己的想法存疑这个前提上的。否则就会陷入「没有一张嘴能说服谁的耳朵」的状态。或者一方以退让作为回应，而另一方还沾沾自喜。</p><p>就我自己经验，很多事情都没有一个是非黑白，所以便觉得真相不重要了。</p><p>情绪被媒体左右，随着新闻不断反转而不断打自己的脸——慢慢觉得自己离真相其实很遥远。毕竟是信息时代了，现在有爆炸的资讯。以前人家通过创造信息来忽悠，现在人家通过筛选信息来忽悠。</p><p>不管是没有确定的事实，还是难以抵达真相。不如把这些东西当做细枝末节抛开，比起是什么，专心于为什么。</p><p>对事件本身没有想法，几千字的论证只记住了最后的结论。面对墙外的广阔天空，不加辨别的全篇接受。都不好。</p><p>不过这都是作为吃瓜群众来讲。作为当事人（特别是新闻里的），那这就是事实，没什么说的。当事人最好还得尽力发声并维护使事实不跑偏——「跑偏的事实」太可怕了。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我理解的预测与推荐</title>
      <link href="/2018/05/27/recommendation/"/>
      <url>/2018/05/27/recommendation/</url>
      
        <content type="html"><![CDATA[<h2 id="推荐"><a class="markdownIt-Anchor" href="#推荐"></a> 推荐</h2><p>怎么做推荐呢？实际开发过程中，我们一边学习推荐相关的知识，一边先按直觉做了几个 demo。</p><p>在第一个版本中，用模糊查询实现。根据用户的相关信息到数据查询。大概是因为逻辑判断太多了，速度非常慢。</p><p>第二个版本，尝试优化查询语句，建立索引。</p><p>第三个版本。因为前面已经通过多元回归计算出了用户的工资区间（虽然很不准确就是了），我们拍脑袋觉得对于一份工作来说，工资是很重要的，于是直接按工资区间到数据库查询…</p><p>前两个版本，模糊查询的推荐结果还不错，至少能一眼看出与用户的信息有关。但是速度实在太慢了。</p><p>第三个版本，因为前面做的预测结果本来就不准，所以效果更差劲…而且这个思路太想当然了。</p><p>但至少现在已经有这样一个功能模块了!!于是接着尝试真正的推荐。</p><h2 id="我理解的推荐"><a class="markdownIt-Anchor" href="#我理解的推荐"></a> 我理解的推荐</h2><p>因为水平不到位，不能从比较宏观的角度解释，下面都只是我在这个项目中的感受。所以，推荐以「推荐 Job」为例…</p><p>我理解的推荐，就是为用户建立一个模型——「我最喜欢的 Job」。系统不断优化这个模型，试图找到用户心中最中意的那个 Job。（这只是个理想化的模型，实际的系统当中可能并不存在）然后从系统中找出与这个模型最匹配的 Job，推荐给用户。</p><p>那么问题来了，计算机怎么判断用户是不是中意某个 Job 呢？</p><p>我们看看协同过滤算法中的基于用户的推荐算法。</p><h3 id="基于用户的推荐算法"><a class="markdownIt-Anchor" href="#基于用户的推荐算法"></a> 基于用户的推荐算法</h3><p>最简单的一种，如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">小明 喜欢 A、B、C。</span><br><span class="line">小红 喜欢 A、B、C、D。</span><br></pre></td></tr></table></figure><p>我们发现小红的喜欢和小明的喜欢重叠度很高，小明可能也会喜欢 D，所以把 D 推荐给他。</p><p>但是这种判断的粒度太大了，再细一点可以这样:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">小明 非常喜欢 A</span><br><span class="line">小明 有点喜欢 B</span><br><span class="line"></span><br><span class="line">小红 非常喜欢 B</span><br><span class="line">小红 有点喜欢 A</span><br></pre></td></tr></table></figure><p>在计算机中，可以简化为这样的三元组 <code>&lt; 用户 ID， 物品 ID， 用户偏好 &gt;</code> 表示:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">用户   JobID   偏好值(权重)</span><br><span class="line">小明    001    15</span><br><span class="line">小明    002     0</span><br><span class="line"></span><br><span class="line">小红    001     0</span><br><span class="line">小红    002     15</span><br></pre></td></tr></table></figure><p>那么这个偏好值怎么来呢？</p><p>肯定需要严格的算法…</p><p>我们可以粗略举个例子来理解，比如用户点击一次某个职位，我们假定他是被这个职位所吸引，把他与这个职位的权重相应增加。</p><p>这样在计算机内部就得到用户与 Job 的关系。</p><p>用这样的数值来量化之后，我们就可以通过做一些矩阵运算，根据用户自己的列表和别的用户的列表，把口味相似的用户关注的职位推荐给用户。</p><p>好了！暂且到这一步。</p><p>我们回过头来看，基于用户的推荐算法，需要满足两项。</p><ol><li>用户（使用推荐功能的用户）的喜好</li><li>别的用户的喜好</li></ol><p><strong>这就是冷启动需要解决的问题。</strong></p><p>它不仅需要用户自己有信息，还需要别的用户有信息…</p><p>考虑到我们做的这个小项目根本不可能有那么多用户，测试起来也麻烦，看来这个方式不合适…</p><h3 id="基于内容的推荐算法"><a class="markdownIt-Anchor" href="#基于内容的推荐算法"></a> 基于内容的推荐算法</h3><p>基于用户的推荐算法，是通过比较各个用户的喜好，把别的用户关注的东西推荐给有共同喜好的用户。</p><p>而基于内容的推荐算法，就是把用户的喜好直接与 Job （物品）比较。</p><p>还是看个最简单的:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">小红       喜欢 哲学书籍</span><br><span class="line">《大问题》  是   哲学书籍</span><br></pre></td></tr></table></figure><p>所以把《大问题》推荐给小红。</p><p>同样，我们可以更细粒度一点:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">小红       非常喜欢   哲学书籍</span><br><span class="line">小红       有点喜欢   小说</span><br><span class="line"></span><br><span class="line">《大问题》   是       哲学书籍</span><br><span class="line">《爱的教育》 是       小说</span><br></pre></td></tr></table></figure><p>我们优先推荐《大问题》给小红…</p><p>而在计算机内，可能是这样表示的:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">用户标签权重</span><br><span class="line">小红Java 10</span><br><span class="line">小红Web  9</span><br><span class="line"></span><br><span class="line">Job标签权重</span><br><span class="line">001Java 0</span><br><span class="line">001Web10</span><br><span class="line">002Java10</span><br><span class="line">002Web9</span><br></pre></td></tr></table></figure><p>通过计算向量距离，得出用户和 Job 的相似度，生成推荐。</p><p>基于内容的推荐需要解决两个问题。</p><p>第一个仍然是<strong>冷启动</strong>，用户需要打上标签。我们考虑过根据用户的行为——历史记录，点击记录等来生成用户标签。</p><p><strong>不过都没时间做…</strong>（太真实了）</p><p>其实提到这个场景，我想到的是各种信息流 app，注册时让用户选择一堆感兴趣的话题，相当于打上标签。于是我也模仿这样做了个…</p><p>我们只做到了用户和某个标签产生联系，如标签 <code>Hadoop</code> ， <code>Java</code> …</p><p>存在数据库里 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用户 ID标签Id有无 // 标志用户有没有选择某个标签。。。</span><br><span class="line">0010010</span><br><span class="line">0010021</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>第二个问题就是提取出 Job 的标签，并且提取权重。</p><p>这个是重点也是难点…</p><p>从抽象的角度来看，Job 其实也只是一串文本描述的一样物品。</p><p>粗略地做，我们可以进行简单的词频统计…</p><p><strong>常用的更标准的方式是使用 TF-IDF。</strong></p><h3 id="比较"><a class="markdownIt-Anchor" href="#比较"></a> 比较</h3><p>SQL 模糊查询是基于元数据的推荐。比如推荐书，紧紧按出版年份来推荐是不太合适的。(大多数情况下)</p><p>而协同过滤，是基于标签，更合理些(理论上)。</p><p>我们做出来的效果，感觉模糊查询似乎看起来科学点…至少能在推荐的结果找到我们的输入的信息。</p><p>通过后面的方式得到的推荐结果（因为我们技术不到位的原因）看起来有点没头没脑…</p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 自己浅见 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性格</title>
      <link href="/2018/03/26/character/"/>
      <url>/2018/03/26/character/</url>
      
        <content type="html"><![CDATA[<p>一个人突然性情大变是可能的。</p><p>前几天吹牛，波波老师说他年长我好几岁，因为当初经常转学，留了几次级。我打趣说大家都是这样，前二十多年的人生，不断地和一群熟悉的人分开，奔向另一个地方重新开始。</p><p>我用了「重新开始」这个词，因为当时想到了上面的那个问题。到了一个新的地方，换个性格重新开始。</p><p>我觉得性格就是一套与人相处培养出来的行为准则。我不改变是因为处于这种舒适区并且觉得改变带不来什么好处（好处的定义由三观决定）。要是有人改变了性格并且不断地从中获取正反馈，不就一直这样下去咯。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 的简单使用</title>
      <link href="/2018/02/01/git/"/>
      <url>/2018/02/01/git/</url>
      
        <content type="html"><![CDATA[<h2 id="changelog"><a class="markdownIt-Anchor" href="#changelog"></a> changelog</h2><p>[update-2019-08-10]</p><p>[update-2020-02-29]</p><p>[update-2020-08-01]</p><h2 id="前戏"><a class="markdownIt-Anchor" href="#前戏"></a> 前戏</h2><p>下载安装 Git。</p><p>PS：Gitee、Github、Coding 这类 Git 协作管理工具原理都一样。</p><h2 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h2><h3 id="全局配置"><a class="markdownIt-Anchor" href="#全局配置"></a> 全局配置</h3><p>该配置是全局配置，对于不同的管理工具，只要用的一套邮箱和密码，都可以使用。</p><blockquote><p><code>git config --global user.name &quot;在 Github 等站的名字或昵称&quot;</code><br><code>git config --global user.email &quot;在 Github 等站注册使用的邮箱&quot;</code></p></blockquote><h3 id="针对项目配置"><a class="markdownIt-Anchor" href="#针对项目配置"></a> 针对项目配置</h3><p>需要在项目根目录下进行配置。</p><blockquote><p><code>git config user.name &quot;Your Name&quot;</code></p><p><code>git config user.email &quot;Your email&quot;</code></p></blockquote><p>注意：如果你配置了全局的用户名和邮箱，仍可以针对项目进行配置，Git 会优先考虑针对项目的配置，找不到才会去使用全局的配置。</p><h3 id="查看当前配置"><a class="markdownIt-Anchor" href="#查看当前配置"></a> 查看当前配置</h3><blockquote><p><code>git config --list</code> 查看当前配置</p></blockquote><h2 id="本地生成-ssh-公钥并在-github-等站配置"><a class="markdownIt-Anchor" href="#本地生成-ssh-公钥并在-github-等站配置"></a> 本地生成 SSH 公钥，并在 Github 等站配置</h2><p>在配置好用户名和密码后，可以进行生成公钥。</p><h3 id="为什么要配置-ssh-公钥"><a class="markdownIt-Anchor" href="#为什么要配置-ssh-公钥"></a> 为什么要配置 SSH 公钥</h3><p>配置 SSH 公钥后，本地仓库与远程仓库可以通过 SSH 链接进行交互（pull，push 等操作）。</p><blockquote><p>SSH 链接示例： <code>git@github.com:hqweay/MarkAll.git</code></p></blockquote><p>反过来说，如果你通过 SSH 链接关联远程仓库与本地仓库，就必须配置 SSH 公钥，才能进行 Git 操作。</p><p>另一方面，如果你通过 HTTPS 链接进行关联，你就无需配置 SSH 公钥。</p><blockquote><p>HTTPS 链接示例：<code>https://github.com/hqweay/MarkAll.git</code></p></blockquote><p>若你通过 HTTPS 链接对本地仓库和远程仓库进行关联，在进行 push 操作时，Git 将会提示你手动输入密码以验证权限。</p><p>所以通过 SSH 与 HTTPS 链接关联远程仓库库与本地仓库的区别就显而易见了，通过 SSH 链接，一次配置后以后就无须重复输入密码，同时，不必输入密码，也在一定程度上保证了安全。</p><h3 id="生成公钥"><a class="markdownIt-Anchor" href="#生成公钥"></a> 生成公钥</h3><blockquote><p><code>ssh-keygen -t rsa -C &quot;xxxxx@xxxxx.com（你的邮箱）&quot;</code></p><p>连续按三次回车，使用默认配置即可</p></blockquote><h3 id="查询公钥"><a class="markdownIt-Anchor" href="#查询公钥"></a> 查询公钥</h3><blockquote><p><code>cat ~/.ssh/id_rsa.pub</code></p></blockquote><p>这一步是查询公钥，把显示的东西全复制下来即可。</p><p>如果操作系统是 Windows，可以打开 <code>C:\用户\Users\.ssh\id_rsa.pub</code> 文件查看公钥。</p><h3 id="配置-2"><a class="markdownIt-Anchor" href="#配置-2"></a> 配置</h3><p>然后把公钥粘贴到 Github 这类网站配置 SSH 公钥的的对应位置即可。</p><h2 id="基本操作"><a class="markdownIt-Anchor" href="#基本操作"></a> 基本操作</h2><ul><li><p>git clone</p><p>git clone <a href="mailto:git@github.com">git@github.com</a>:hqweay/MarkAll.git&lt;仓库链接&gt;</p></li><li><p>git pull</p><p>git pull orign<remote>master<branchname></branchname></remote></p></li><li><p>git push</p><p>git push origin<remote>heng<branchname></branchname></remote></p></li></ul><p><strong>PS：了解下 rmeote 概念就行了。</strong></p><ul><li><p>git merge</p><p>git merge &lt;想要合并到当前分支的分支名&gt;</p></li></ul><h3 id="其它"><a class="markdownIt-Anchor" href="#其它"></a> 其它</h3><ul><li>git init</li><li>git remote</li><li>git branch</li></ul><h3 id="提交"><a class="markdownIt-Anchor" href="#提交"></a> 提交</h3><ul><li>git add .</li><li>git commit -m&quot;&quot;</li><li>git push</li></ul><h2 id="常用命令"><a class="markdownIt-Anchor" href="#常用命令"></a> 常用命令</h2><h3 id="将本地库与远程库关联"><a class="markdownIt-Anchor" href="#将本地库与远程库关联"></a> 将本地库与远程库关联</h3><p><code>git remote add origin git@github.com:hqweay/MarkAll.git</code></p><p>origin 为本地库的关联名</p><p>一个本地库关联多个远程库，就是通过更改 origin 这一项的名字实现的。</p><p>比如：</p><p><code>git remote add One git@github.com:hqweay/MarkAll.git</code></p><p><code>git remote add Two git@github.com:hqweay/MarkAll.git</code></p><p>就实现了一个本地库关联两个远程项目，需要进行操作时便分别通过名称One，Two来操作。</p><h3 id="关联其它操作"><a class="markdownIt-Anchor" href="#关联其它操作"></a> 关联其它操作</h3><p>删除关联 <code>git remote rm origin</code></p><p>查询关联 <code>git remote -v</code></p><h3 id="clone-某分支"><a class="markdownIt-Anchor" href="#clone-某分支"></a> clone 某分支</h3><p>默认克隆 master 到本地：<code>git clone git@github.com:hqweay/MarkAll.git</code></p><h3 id="回退到某版本"><a class="markdownIt-Anchor" href="#回退到某版本"></a> 回退到某版本</h3><ol><li>使用 <code>git log</code> 命令查看所有的历史版本，获取某个历史版本的 id，假设查到历史版本的 id 是 139dcfaa558e3276b30b6b2e5cbbb9c00bbdca96。</li><li><code>git reset –hard 139dcfaa558e3276b30b6b2e5cbbb9c00bbdca96</code></li><li>把修改（强制）推到远程服务器<code>git push -f origin master</code></li></ol><h3 id="强制-push"><a class="markdownIt-Anchor" href="#强制-push"></a> 强制 push</h3><blockquote><p><code>git push -f origin master</code></p></blockquote><h3 id="设置默认仓库"><a class="markdownIt-Anchor" href="#设置默认仓库"></a> 设置默认仓库</h3><p>以命令 <code>git push -f -u origin master</code> 为例。</p><p>其中 <code>-f</code> 是命令 <code>--force</code> 的缩写，意味着忽略冲突，将本地的内容强制推送，覆盖远程仓库。</p><p><code>-u</code> 的意思是把当前使用的仓库 <code>origin master</code> 设置为默认仓库。</p><p>设为默认仓库后，下次就只需要操作 <code>git push</code> 而无需输入全部命令 <code>git push origin master</code> 达到推送的效果。</p><h3 id="同步云端代码至本地"><a class="markdownIt-Anchor" href="#同步云端代码至本地"></a> 同步云端代码至本地</h3><blockquote><p><code>git pull origin 分支名</code></p></blockquote><h3 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h3><ul><li>删除本地某次 commit(比如最近一次不小心把 密码 add 了)</li><li>删除线上某次 commit</li><li>…</li></ul><h2 id="merge-操作"><a class="markdownIt-Anchor" href="#merge-操作"></a> Merge 操作</h2><h3 id="场景"><a class="markdownIt-Anchor" href="#场景"></a> 场景</h3><p>假如本地仓库有一个分支 master 对应远程仓库的一个分支 master。</p><p>现在需要将远程仓库的另一个名为 master-new 的分支 merge 到本地分支 master。</p><h3 id="操作"><a class="markdownIt-Anchor" href="#操作"></a> 操作</h3><p>// 新建分支</p><p><code>git branch add master-new</code></p><p>// 切换到该分支</p><p><code>git checkout master-new</code></p><p>// 此时新建的分支还未与远程分支关联</p><p>// 把远程分支 pull 回来 默认就关联了</p><p><code>git pull origin&lt;remote&gt; master-new&lt;远程仓库名&gt;</code></p><p>// 切回原分支</p><p><code>git checkout master</code></p><p>// 把新分支的内容 merge 回来</p><p><code>git merge master-new</code></p><p>// 然后按照冲突进行解决即可</p><h3 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意</h3><p>如果要将远程仓库的一个分支 merge 到本地，需要保证远程分支的 commit 是较新的版本。</p><p>新到那种程度？</p><p>新于本地分支和被 merge 的分支的主干分支。</p><h3 id="其他命令"><a class="markdownIt-Anchor" href="#其他命令"></a> 其他命令</h3><p>查看项目的分支们(包括本地和远程)<br><code>命令行 : $ git branch -a</code></p><p>删除本地分支</p><p><code>$ git branch -d &lt;BranchName&gt;</code></p><h2 id="fetch"><a class="markdownIt-Anchor" href="#fetch"></a> fetch</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch origin master:temp</span><br><span class="line">$ git diff temp</span><br><span class="line">$ git merge temp</span><br><span class="line">$ git branch -d temp</span><br><span class="line"></span><br><span class="line">$ git fetch origin master</span><br><span class="line">$ git <span class="built_in">log</span> -p master..origin/master</span><br><span class="line">$ git merge origin/master</span><br></pre></td></tr></table></figure><h2 id="submodule"><a class="markdownIt-Anchor" href="#submodule"></a> submodule</h2><h3 id="添加"><a class="markdownIt-Anchor" href="#添加"></a> 添加</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add &lt;url&gt; &lt;path&gt;</span><br></pre></td></tr></table></figure><h3 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h3><p>克隆父项目后，默认子模块目录下无任何内容。需要在项目根目录执行如下命令完成子模块的下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure><h3 id="更新"><a class="markdownIt-Anchor" href="#更新"></a> 更新</h3><p>进入子模块的目录下 <code>git pull</code>。</p><h3 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h3><p>有时子模块的项目维护地址发生了变化，或者需要替换子模块，就需要删除原有的子模块。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm -rf 子模块目录 <span class="comment"># 删除子模块目录及源码</span></span><br><span class="line">vi .gitmodules <span class="comment"># 删除项目目录下.gitmodules文件中子模块相关条目</span></span><br><span class="line">vi .git/config <span class="comment"># 删除配置项中子模块相关条目</span></span><br><span class="line">rm .git/module/* <span class="comment"># 删除模块下的子模块目录，每个子模块对应一个目录，注意只删除对应的子模块目录即可</span></span><br></pre></td></tr></table></figure><p>执行完成后，再执行添加子模块命令即可，如果仍然报错，执行如下：</p><blockquote><p>操作完在执行git rm --cached 子模块名称 前，需要先提交一下更新。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached 子模块名称</span><br></pre></td></tr></table></figure><h2 id="使用-github-的网络问题"><a class="markdownIt-Anchor" href="#使用-github-的网络问题"></a> 使用 GIthub 的网络问题</h2><h3 id="科学上网"><a class="markdownIt-Anchor" href="#科学上网"></a> 科学上网</h3><h3 id="使用镜像"><a class="markdownIt-Anchor" href="#使用镜像"></a> 使用镜像</h3><ul><li><p><a href="https://github.com.cnpmjs.org/" target="_blank" rel="noopener">https://github.com.cnpmjs.org/</a></p><p>如命令 <code>git clone https://github.com/hqweay/MarkAll.git</code> 可以用 <code>git clone https://github.com.cnpmjs.org/hqweay/MarkAll.git</code> 代替。</p></li></ul><h3 id="改-dns"><a class="markdownIt-Anchor" href="#改-dns"></a> 改 DNS</h3><h3 id="骚操作"><a class="markdownIt-Anchor" href="#骚操作"></a> 骚操作</h3><p>使用 Gitee 等将 Github 的仓库同步过来，然后通过 Gitee 等提供的链接 clone 仓库。</p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 配置与操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置与操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《来自新世界》</title>
      <link href="/2018/01/17/lai-zi-xin-shi-jie/"/>
      <url>/2018/01/17/lai-zi-xin-shi-jie/</url>
      
        <content type="html"><![CDATA[<p>本来想看动画来着，觉得读原著可能更节约时间，所以找来小说阅读。说起来之前一直以为这是部轻小说 —— 没想到居然是正经的严肃文学（如果可以这么称呼的话）。</p><p>三口气读完，非常畅快，在这里写下自己的一点感想。</p><p>提示：以下可能包含剧透。</p><h2 id="反乌邦托"><a class="markdownIt-Anchor" href="#反乌邦托"></a> 反乌邦托</h2><p>至此时我仍然不能好好地理解「乌邦托」这个词，因为我想像不出这个词描绘的是怎样一个世界，或者说怎样维持这样一个理想世界……就像想像不出宇宙的边界那样……太费脑子了，我就不多说了……</p><p>在我看过的为数不多的科幻作品里有两部通过设定「生物之间的相互信任」来搭建故事。比如《三体》中三体人通过特殊方式交流，思想对同类是透明。而《来自新世界》设定了「愧死机制」和「攻击抑制」避免同类间相互伤害。所以三体人表示「不能理解」什么是「欺骗」。这部书的主角在听说古人类（相对于他们来说）会说谎时惊叹「不可能！」。</p><p>几千年后的新人类拥有着超能力（念力），但是却发展出了一个限制使用念力的社会。这点非常有趣，第一，如今的人类都拥有念力，是因为淘汰了那些没有念力的人，而淘汰的方式 —— 异常血腥。第二，反过来又要限制念力（对同类的使用）。</p><p>发展到现在这个社会是很不容易的，管理层想要维持，而主角一行人受好奇心的驱使，不断探索，便展开了这个世界的原貌。</p><p>原貌自然是黑到发紫。</p><p>我觉得这里出现了一个问题，这群新人类这样表示：你知道真相了吧，真相就是这么黑暗。我们好不容易才发展出了现在的社会体系……所以我们一起维持现状吧！</p><p>可是……地球终究有一天是会毁灭的……你们应该考虑地球外面的星辰大海啊！</p><blockquote><p>超能力漫画作品《我的英雄学院》也有类似的观点，大意是：「如果没有超能力，我们现在应该已经住在太空了吧。」</p></blockquote><h2 id="主角"><a class="markdownIt-Anchor" href="#主角"></a> 主角</h2><p>在我看来，主角并不是很讨喜。</p><p>在结局打 Boss 时，主角团的觉准备与 Boss 同归于尽拯救世界，但是女主同情心爆发阻止了觉，于是最好的机会浪费了……然后女主「想出了一个办法」，让旁边的化鼠奇郎丸去送死激发 Boss 的愧死机制……</p><p>很干脆地说，我对女主的反感大部分都来源于这家伙让奇郎丸送死……</p><p>我还以为会有什么不会牺牲的完美解决方案……没想到还是会有牺牲啊……虽然是牺牲化鼠……</p><p>在这部小说的世界观里，化鼠类似于现实里的蚂蚁……可是即便是蚂蚁，你们好歹是同行战斗过的伙伴（日漫之类的不是最讲究伙伴什么的吗）啊！女主至始至终都觉得「化鼠嘛，死了就死了。」。虽然在小说的描写屠杀化鼠的文字里也产生过同情心，但是还是认为「化鼠嘛，死了就死了……」。</p><p>我对女主另外的反感就来源于此——因为这种行为像极了我自己，或者说人类自己也不为过。即便我们接受的教育是爱护动物之类的，偶尔会产生怜悯，但是在面对蚂蚁死了，猪被杀了这类事时还是会觉得「死了就死了」。</p><p>小说的高潮在化鼠的真实身份揭露时产生了一个高潮。其实化鼠是之前没有超能力的人被超能力拥有者转化的……</p><p>女主在了解到这一点后杀掉了化鼠斯奎拉（应该说给他一个解脱） —— 之前 Boss 小真里亚的死已经证明愧死机制的发动是针对执行者所认同的同类来讲，而女主却没事，这说明即便女主知道了化鼠其实就是人类，但是已经并不认为他们是人类了。</p><p>毕竟从很久以前开始就只有能使用念力的人才算是人类。</p><h2 id="化鼠"><a class="markdownIt-Anchor" href="#化鼠"></a> 化鼠</h2><p>即便化鼠不是人类，这场战争在化鼠的立场也没什么错，为了自由而战嘛。化鼠想要存活必得看人类心情，这多糟糕。新人类的立场认为，我们拥有秒秒钟毁灭你们的能力，但是我们没有，我们只杀了你们当中那些不听话的化鼠，这真是太善良了！但是在化鼠看来：「……」</p><p>斯奎齐很厉害。</p><p>奇郎丸只是忠于女王罢了。</p><p>想想，几位主角，村子的管理层，大家在各自的立场都挺「正义」的。</p><h2 id="其它"><a class="markdownIt-Anchor" href="#其它"></a> 其它</h2><p>一部小说要吸引人，重要的是让读者对角色产生同情，之前读者随着几位主角探索，描绘的世界缓缓展开。知道了真相后可能会对化鼠产生同情，觉得化鼠失败了很可惜。可是之前超能力者刚被发现的时候，超能力者也属于弱势群体，被研究啊什么的都会有，而且有的人类认为超能力会影响社会稳定甚至准备了各种武器想要消灭掉所有的超能力者。（想起了《亚人》的故事情节，拥有不死能力的亚人作为弱势群体……本作大概就相当于亚人故事里反抗派最后统治了世界并且把普通人类灭绝了……）</p><p>所以成王败寇啊成王败寇……只不过超能力者在当初那场战争中赢了而已……</p><p>不过超能力会影响社会稳定这点在本作中确实没错，在这个故事中超能力者掌管世界后经历了好几个时代（黑的不行），最后才发展出故事发生的这个社会（通过限制使用超能力，进行愚民教育等维持稳定）。</p><p>我对化鼠的同情来源于想到自己如果在这种社会下一定是化鼠阶级……要是我能在这样的世界里当一个普通人，那还不错。不过村子会对念力掌控不合格的小孩进行排除……想要安稳成年当个普通人也不容易啊。</p><h2 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h2><p>想起之前读的一个短篇，一个人发现自己生活的地方有点不对劲，然后尝试逃离这里……说到这里就能想到很多的类似作品了，楚门的世界，黑客帝国，异次元骇客……这个小说让我记忆深刻之处在于主人公从这个不太对劲的世界逃离出去后，发现自己其实在末世，靠营养液和休眠过活——也就是靠着技术手段做白日梦。真实的世界并不是那么有趣，主角反到希望自己能够再次进入休眠状态。可是这时如果清除主角记忆让他再次进入催眠状态，太危险了……谁知道主角会不会又对这个世界产生怀疑，然后为了逃离这个虚拟世界大肆破坏一番……但是让他不清除记忆再次休眠……已经知道了真相，还能沉浸于虚拟的世界吗？</p><blockquote><p>2019-09-28</p><p>剧透，剧透注意！！今年的动画《爱，死亡和机器人 第一季 Love, Death &amp; Robots Season 1》里就有一个这种结构的故事。</p><p>PS：虽然这种故事结构的内核并不新鲜，主角探索真相，真相揭露后觉得还不如不知道……</p></blockquote><p>即便如此我还是觉得人应该追求真相……这样的世界下面，死亡就其实也不过如此了，或者说正是因为死亡也不过如此，追求真相更显得可贵，并且……有意思些。</p><p>以上，至于对现实的警示什么的就不多提了。</p><p>PS：有个脑洞……未来的世界人类已经进化成可以随时更换身体活下去了，对于他们来说，换身体就像和现在换衣服一样方便……其实未来世界已经被机器人统治了，不过普通的机器人都认为自己是人类。所谓的换身体不过是给储存器换一个机器身体而已……</p><p>友人觉得可以这样：未来的人类已经能与机器结合了……</p><p>但是我觉得机器人统治世界，真正意义上的人类已经灭绝了这种设定更能让人绝望……</p><p>不过仅限于故事啊，我还是希望生活中能多点充满希望的事……</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 观与感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读所思 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>波波老师</title>
      <link href="/2017/12/30/xiao-bo/"/>
      <url>/2017/12/30/xiao-bo/</url>
      
        <content type="html"><![CDATA[<p>「我现在软件写得出神入化，大概 8088 上能做到的一切，我都做到了。自己觉得该告一段落，去写小说了。」</p><p>你说，世上怎么有这么可爱的人？</p><p>这阵子沉迷于王小波无法自拔，读杂文时了解到他为了写小说，自己编了一个码字软件。这让我在满篇的共鸣中又对他添加了一心脏的好感。「今天要是不把那段 C++ 程序调通，老子就不睡了……」类似的句子总让我脑补出他坐在一台老式 PC 前抓耳挠腮的画面，似乎下一步就要开始挠挠脚趾头。</p><p>这家伙对电影极其热爱，观影量 1000+，而且大部分都是留学时看的原声。有篇杂文他提到了 3D 动画电影，大概内容说可惜现在做一部3d动画需要很多人，以及很高性能的电脑，他是一个喜欢编故事的人，要是以后技术更好了就可以考虑自己做部出来。当时读到这有点难过，想到他如果还在的话，现在说不定会就有个互联网大佬王小波，或者搞独立动画的王小波之类的。</p><p>王小波的文章里多次提到伍迪艾伦，我觉得他要是拍电影一定也会和后者的片子一样有趣。他经常借伍迪艾伦来批评美国的商业片——读到这些，我感叹，「好莱坞的套路这么多年都没变过嘛。」</p><p>他写过不少关于影视的文章，其中像是「电视上全是『太君好』……」这类的又让人忍俊不禁起来。真想告诉他，二十多年来，这种情况都没啥改变。</p><p>很喜欢他的杂文。读起来有一种「卧槽这个念头以前也有人想过」的感觉，要是共鸣就意味着高潮，那我简直是在他的文字里高潮不断。</p><p>不过他自己也提到，比起杂文，更喜欢编故事。</p><p>「我觉得自己是个忠厚的人，但是不知道为什么，满脑子都是尖酸刻薄的想法。」我想这就是他幽默的笔触下的故事却几乎都是悲剧的原因吧。</p><p>王小波的人生信条是追求有趣，「有趣」这个词倒是经常在日剧里看到。日剧有很多片子都是讲成年人的婚姻，据说这是因为日本社会结婚率越来越低，所以放些电视剧试图潜移默化来鼓励大家结婚。经常看到这样的台词，找对象的条件，温柔就好，有趣就好。要是像是王小波这种有趣，确实很好。</p><p>据说——唉，又是据说，我写文章真是没有一点考据求实的精神。据说「咪蒙」在写毒鸡汤之前也是个以「有趣」为人生信条的青年，在韩寒那部只发了一期的《独唱团》等刊物写过确实有趣的文章，据说——又是据说，据说那篇文章和现在的风格迥乎不同。</p><p>我想说「有趣又不能当饭吃」这种话来着，可是转念一想还真有不少人拿有趣来赚钱。果然这些话还是自己偷偷想想就好了，别说出来，免得挨打。</p><p>我恰好是个无趣至极的人，倒也正好，可以追求有趣嘛。</p><p>不过要是成天把「有趣」这个词放在嘴里的话，不仅对我起不到半点好处，反而与我另一人生信条相违背了。我还是做一个无趣的人好了，这样，我就是一直在追求有趣的路上。</p><p>2017-12-30-0:50</p><hr><p>Ps：本来想从最近读的东西开始写总结一下这段日子的，一不小心就又放飞情绪胡乱感叹了一番。也罢也罢。</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 观与感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读所思 </tag>
            
            <tag> 人物 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>碎碎念</title>
      <link href="/2017/11/15/sui-sui-nian/"/>
      <url>/2017/11/15/sui-sui-nian/</url>
      
        <content type="html"><![CDATA[<p>在双十一的当天以及次日，我两次收到校内邮政包裹揽收点的消息，「请务必于当日 21 点前取走您的包裹。」「务必」这词显得有点庄重，让我感觉不去取可能会有什么不好的后果——也许当日不取，次日包裹就会被退回。因为我当时并没有在网上购买过任何东西，而且寄件方式是「邮政」（我向来对邮政快递略有成见），总觉得应该是广告之类的东西，毕竟我之前就收到过。那是一本从沿海城市发来的广告册子，推销了不少保健用品，我对此实在是兴趣寥寥，甚至有点心疼该司的邮寄费。</p><p>所以第一天我并没有去取。不过第二天同一时间又收到了揽收点的信息，我那个点正好准备吃饭，就顺便去了趟取件处，然后 —— 轻而易举的取到了包裹，签收处的信息却差点让我笑出声（认真的，那时我的嘴角已经裂到能看见我补过的大牙）。寄件信息下打印着这样的文字，「小学生举一反三应用题一年级」。</p><p>尴尬之后求证母上，果然是她买给家里熊孩子的作业，填错了收件地址。母上在电话另一边做出恍然大悟状，「我说怎么物流显示跑 C 市去了。」</p><p>每天的日子就这样平淡又时不时穿插着些有意思的事情慢慢过着。</p><p>周日下午是「某某杯」的答辩，群里通知下午两点半到答辩地点，我按时到了后发现说好的那间教室没有开门，便去楼外呼吸新鲜空气，等了阵子才看到群里有人说下午三点开始。基本上过了这么久我也明白了校内各种组织的套路，「因为总有人会迟到，不如把通知时间提前到正式开始时间的前半个小时，这样即便大家都迟到，我们还是能正常举办活动。」道理我都懂，不过为什么受伤的总是守时的人呢？几乎每次活动都不必准时到，也根本不需要提前准备，在约定的时间开始系鞋带，就已经能准时参与了。聪明的有关部门早已经考虑到了各种因素。我在某社交平台吐槽说，「就是因为约定时间的人都不准时，这个世界才变得越来越不值得信任。」大家越来越宽容，憋着好人都不得不学坏。</p><p>这个比赛是之前在团队报名参加的，分配了我和两位学长搞一个项目。我们院有好几个团队，都有一个老师带领，其余几个团队差不多就是学生自治，此团队老师带领多点，运作方式就是老师接项目，分给学生做，有什么比赛就组织用已有项目报名。这其中道道大家都心知肚明，不过要是能完整做出一个项目，其实也能收获不少。不过就我来看大多数项目的完成度都很低，也是，一方面水平达不到，另一方面不愿钻研，再者对手头的项目没什么兴趣 —— 本来就是个创新比赛。</p><p>这就出现了一批诡异的安卓项目，只需要用网上的工具花一个原型，截几张图。</p><p>能理解，很多人参与只是为了评奖学金时能加点综测。不过，也有很多完成度较高的作品，非常惊艳。而我参与的这个项目，大四的学长G之前已经写好了前端，大三的学长L实现了部分功能。我这几个月就划划水，跟着写文档。惭愧，汗颜。</p><p>学长 G 已经实习了，这次没来，答辩则全靠学长 L，我虽然跟着来了，但是没什么事，就开始读图书馆借来的杂志。Lens，很有趣的的杂志，这几天时间我读了两本以前的「视觉」刊，想买本最新刊，但是小贵，作罢。</p><p>当晚又读了加缪的《异乡人》，只记得后记的一句**「尊重别人生活方式的正当性」**。尊重，很有感触的词汇。这意味着即便我不喜欢，但是只要不影响我，我就不会反对你。还看到过一段话，大概可以作为扩充。「你分享的东西，我不喜欢，但我绝对不会扫兴。」前者为人，后者处事。</p><p>这阵子读了三本小说，其中两本主角坐了牢，其中两本结局以一个人物的死亡结尾，还有一本书里的主角应该也要死了，但作者没有再写。最近心情也许是受此影响，有点不知所以，还有点空虚。想来也是，本来我就是把看书，特别是读小说当作一件消遣的事来做（专业类除外）。消遣之后进入贤者时间 —— 人之常情。</p><p>对我来说，看书其实和打游戏类似，是一种娱乐活动。经常看到有人说读书改变人生，或者提升人之类的东西。我有点好奇，不知道是专指技能类书籍还是广义的读书。</p><p>我之前有一段时间沉迷于网络小说，无法自拔。这件事情除了让我的镜片加厚还导致看文字的时候总是自动略去人名，地名等东西，带来的唯一好处是看《百年孤独》时对情节理解毫无压力。当时借我这本书的同学吐槽说看着长长的人名就头晕。</p><p>不过我倒是记得有这样的情报：人在阅读的时候其实会自动略去过长的人名等东西。大脑已经聪明地帮我们处理了很多工作，把一个长长的名字提取出其中的一两个字，再与人物性格联系，成为一个标志。下次在段落中扫描到，根本不会过多停留，大脑已经知道是谁了——就像生活中有时候会想起一个人，但是始终想不起TA的名字一样。虽然没有名字，但是大脑是知道TA的。</p><p>不过要是刻意去记忆的话，岂不是有点舍本逐末？为了掉书袋而去记一些东西，简直是对我脑袋的摧残（一直深受记忆太差的困扰）。话说以前一直以为那些引经据典的大神都是记忆力特别的好，后来读到钱钟书有积累素材的本子，李敖直接把书里有价值的页面撕下来粘贴到素材本——所以他买书总是买两本，有的页面正反两面都有价值。一方面感到有趣，另一方面又有点失望，什么呀，原来是小学就学过的东西。我震惊于发现了精巧事物后面简单到不可思议的原理，然后，对自己更加的失望。</p><p>到了星期二，没有早课，那天我是被一个诡异的梦惊醒的。梦中的我对现在的本科教育失望透顶，觉得周围所有人都是满嘴现在不一样了大家要走出之前的学习方式全靠自己自学了的瞎话，其实是教不了什么东西。于是怒而返回原来的高中复读。某天语文早自习，我始终背不住那些诗词，愤怒的语文老师骂我这个样子还回来干什么。我也感到奇怪，我回来干什么？于是我就找班主任说我不复读了，我要回去。班主任就笑着说，哪能你想干嘛就干嘛，你之前的学籍已经被注销了，你不能回去了，安心复习。然后我就好伤心好伤心，上半身一挺，醒来了。</p><p>醒来后，我感到庆幸。「还好只是个梦」，这个念头在我脑子里不断地飘。</p><p>庆幸，庆幸就对了。</p><p>另外最近真的是做了好多有意思的梦，其中一个是这样的，我当时记在便签上，直接复制过来吧。</p><blockquote><p>最近做了个梦，大概内容是走在路上，前面有两个妹子拉着手走在前面，我满面无奈，便偷听她们的谈话——实在是那些话挡不住要飘进我耳朵的。我抱着这样的想法心安理得，结果被剧透了正准备看的电影。重点在这部电影，片头出现了一只手移近屏幕，然后摸到主角的头。片尾的时候又出现一只手，似乎要伸出来抓观众。有种打破第四面墙的感觉。</p></blockquote><p>有趣。</p><p>这天下午在某节课开小差想要实现白日做梦，胡思，乱想。我想到了很多东西，而且感觉句句都是真知灼见，这些真知灼见像是食堂里番茄炒鸡蛋里的番茄，不断地冒，就像我现在无聊时的碎碎念。我想到了什么，就立马打开某社交平台分享 —— 或者说记录。我说我终于想明白了人性的本质——自私。可我又想到就算自己搞明白了世界的本质，也不能对现在的生活产生任何积极的影响，就又把那条状态删了。</p><p>我又说，一个人的真实往往存在于他在社交平台秒删的状态中。因为ta发现了自己在状态中展现出来的真实。</p><p>感觉有点蠢，我又删了。</p><p>一思考，猪都发笑。</p><p>之后放学，我便去图书馆还书（借的第二本Lens）。再回寝，在离寝室还有50米左右的时候，下起了阵雨，我被淋成了一个傻子。之前一直在书包里揣着伞，某天晒起了大太阳，那时面对着太阳，想起包里的伞，我也觉得自己是个傻子。</p><p>路上一群排着队打卡健身跑的少年们做鸟兽散，我也跑了起来，跑啊跑，直接跑进了宿舍楼下的理发店。等前面两位完成后，到我了，小哥问我怎么理，我说「剪短点」，然后又说，「平头吧。」小哥说，「平头？」我确定地说，「嗯」。然后我就一直闭着眼，小哥也没在中途问我「这样可以吗」。</p><p>「这样可以吗？」取了眼镜，我哪知道是什么情况啊。</p><p>出去的时候，外面还在下雨，头发才刚刚吹干，感觉自己又多此一举了。我当时就决定以后不管刮风下雨，都要带上伞。所以我今天就带了伞。</p><p>从此这里对我来说就只有雨天和不打伞的晴天。（友人说可以遮阳。做不到，太骚了。另：今后要学着注意天气预报。）</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《流星 蝴蝶 剑》简记</title>
      <link href="/2017/09/29/wuxia/"/>
      <url>/2017/09/29/wuxia/</url>
      
        <content type="html"><![CDATA[<p>上午去图书馆找 TP- 类书籍，顺便在小说区逛了好一阵子，最后借了本古龙的《流星 蝴蝶 剑》。午睡完开始偷闲阅读，一下子就沉迷其中，掩卷时天已漆黑，时针指向 8 点。</p><p>看完这本，突然觉得武侠不是种分类，而是一种载体。作者通过武侠这个载体可以表达的东西有很多很多。本来看过的武侠小说就不多，再加上看过的武侠电视剧，电影也有限，所以之前就狭义地认为武侠只是打打杀杀快意恩仇。这本书则打破了我这种被禁锢的思维，让我感到新奇。</p><p>一，故事充满反转，情节紧张，让我有种在读悬疑小说的错觉，十分刺激。</p><p>二，反转总是伴随着背叛，这让人防不胜防。不断的背叛，让人感到非常致郁。</p><p>三，写故事，也写情绪。说起来，小说从头到尾都带着一股悲伤。看这部小说，我觉得似乎在看王家卫的片子，脑补时总不禁想给孟星魂加上墨镜王那独特的镜头。虽然这样想，但哪有时间。阅读时沉浸其中，总感觉压抑的很，难受的很，而故事又发展的那么紧凑，催着人不停翻页。</p><p>故事结束了，读者却还没走出那个江湖。仿佛自己就是那男主角，忧伤又寂寞。</p><p>唉，想什么呢。现实也不比书中好过多少，还是要继续学习呀。</p><blockquote><p>「很静，静得几乎听得见花瓣开放的声音。」</p><p>「蝴蝶永远只活在春天里。」</p><p>「她是宁可忍受寂寞？还是来独自享受寂寞？」</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 观与感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读所思 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>与格式化相关</title>
      <link href="/2017/09/16/about-format/"/>
      <url>/2017/09/16/about-format/</url>
      
        <content type="html"><![CDATA[<p>今天看的 CS50 课程里简要说明了硬盘的运作，并且讲到了硬盘的格式化。有同学提到一个问题，当我点击格式化的时候，发生了什么？</p><p>略去电流传输，把信号送达到硬盘等流程，我们仅仅关注硬盘是怎么进行格式化的。当硬盘进行格式化操作的时候，它实际上只是修改了开头的分区表上的几千个字节的信息。这些信息起着一个目录的作用，让你的电脑知道文件和文件夹被储存在哪里。所以当你格式化你的硬盘，所做的只是在为新数据的储存做准备。这种格式化可能并没有除去你的旧数据。</p><p>既然说的是可能，那自然有会除去你的数据的情况。</p><p>其实这里提到的格式化只是比较常见的一种，也是普通用户会用到的一种。硬盘的格式化分为高级格式化和低级格式化。每块硬盘在出厂时，已由硬盘生产商进行低级格式化，因此通常使用者无需再进行低级格式化操作。（你当然可以自己进行低级格式化操作，但这种操作并不被建议——即便现在硬件的发展程度已经足够高了，但过多地进行低级格式化操作仍然会损害你的硬盘。）</p><p>而高级格式化则可以分为快速格式化和普通格式化，前文中所提到就是快速格式化。</p><p>快速格式化并没有完全清除你的旧数据。同时，如果知道了硬盘中0和1的排列规则，你甚至能恢复大量的数据。（前提是你还没有写入的数据覆盖掉它们所储存的区域）这也是所有的数据恢复软件的工作原理。</p><p>值得一提的是，快速格式化虽然带来了巨大方便，特别是对那些误删文件的人群来说。但同时也会有隐私安全的问题。你删除了某些私密文件，别人又给你恢复了，那多可怕呀。好在对于这种情形，我们还有普通格式化。</p><p>普通格式化会将硬盘上的所有磁道扫描一遍，清除掉硬盘上的所有内容。这种操作下的数据会完全删除，不可恢复。当然，因为要从头到尾扫描硬盘，所以时间花费会长一点。但是更长的时间消耗带来的不仅是完全删除数据，还可以检测出硬盘上的坏道。所以如果你怀疑自己的硬盘有坏道，那么也可以尝试普通格式化。</p><h4 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h4><ul><li>快速格式化，可恢复文件。只是删除了硬盘上的分配表文件，耗时短，一般建议使用该操作。</li><li>普通格式化，不可恢复文件。如果你需要完全删除硬盘上的文件或者怀疑硬盘有坏道，可以进行该操作。</li><li>低级格式化，不建议使用。</li></ul><h4 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h4><p><a href="http://blog.sina.com.cn/s/blog_59a245dc0100idh7.html" target="_blank" rel="noopener">快速格式化与普通格式化与低级格式化，及恢复</a></p><p><a href="https://www.zhihu.com/question/38408332" target="_blank" rel="noopener">电脑硬盘格式化数据能恢复吗？</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习折腾 </category>
          
          <category> 简单总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈到过往</title>
      <link href="/2017/08/19/past-time/"/>
      <url>/2017/08/19/past-time/</url>
      
        <content type="html"><![CDATA[<p>2017-08-19-22:00</p><p>逛到新浪博客，兴起，寻来许嵩十年前的文字开始阅读。页卷不停，时间跑了起来，思绪也回到从前。年幼的时候总是满怀憧憬，却又觉得日子还长，不肯把心思放在未来。如今又总是念旧，念在旧时有梦。虽然现在看来都是遗憾。</p><p>回忆是作家的灵感库。每个人都有独特的经历，收获的感悟也不尽相同，写出来更是花样百出。曾经的日子不总是美好的，但我偏向于认为它更好。时常节约一段安静的时光出来细数从前，用无数个表示假定的词汇畅想自己本该拥有的无数个未来。直到有一天，我突然对这种强加的美好感到厌倦。我知道自己并不是个想象力丰富的人，这样做，只不过是借此宣泄对现状的不满。</p><p>我没能活成自己曾期望的样子，这个念头让我感到无奈又悲伤。</p><p>日剧《求婚大作战》讲述了一个男人不停穿越，尝试挽回年少时的遗憾的故事。我作为一个旁观者，无力看着已经成人的主角一次次地穿越，又一次次地犯着和以前一样的的错误。主角改变不了自己。「<strong>自己的心意，考虑问题的方式等，在短时间内是不会改变的。</strong>」</p><p>我知道，像我这种毫无趣味的理性的人来说，即便再来一次，也还是会做出一样的决定。</p><p>那些选择，都是我当时认为的最优解啊。</p><p>和刚高考完的友人谈到了选择专业的问题，他从小热爱编程，但又有点担心把兴趣作为职业。我对他说，「做决定前，想想自己以后会不会后悔。」他看了我一眼，说道「我也这么觉得」。我们相视而笑。</p><p>这句话像是一句鸡汤似的废话，毕竟对部分人来说，不管做了什么决定，只要不顺利，都会后悔。但是有些后悔我们是能提前预知的，不是吗？常有人开玩笑说自己现在流的泪，都是当初做决定时脑子里进的水。也偶有人像我一般把希望寄托于自己别的可能性这种虚无缥缈的东西之上。也许不管我们做了什么决定，都会变成现在这种样子呢？唉，这种事情也无人可知。</p><p>北岛说，<strong>那时我们有梦，关于文学，关于爱情，关于穿越世界的旅行</strong>。我尝试回忆自己的「那时」，「那时」的我是怎样的样子呢？我能记起一堆做过的事，像是夜里窝在被子下打开手电筒看小说，像是放学后总要在路上玩一阵子才回家，但我却只能以第三人称的视角观望，难以回忆起当时的心情。遗忘是怎样一回事呢？大概像是我在路上留下的脚印，后来那条路被填上沙浆和水泥，铺上了柏油。我找不到自己的脚印，甚至难以想象曾在那里走过。</p><p>不过敢肯定的是，我在以前绝对没有思考过以后会怎么看待那时候的自己。仔细回想，身边确实不断地有人提醒我，你应该如何如何做，这样做对你的未来没有好处。但当时的我乐在其中，着实难以听进别人的意见。充满向往的少年，一心只想往未来跑。而大家都知道，奔跑是一件特别费时费力的事，我正全力以赴呢，哪还能挤出时间和精力用来思考？</p><p>00:35</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的好友说他要卸载QQ</title>
      <link href="/2017/08/14/Inner-activity/"/>
      <url>/2017/08/14/Inner-activity/</url>
      
        <content type="html"><![CDATA[<p>2017-08-14-22:55</p><p>打开一个网站，在访问某些内容的时候被告知：您必须注册账号。于是我不得不开始进行繁杂的操作 —— 填写一大堆资料，最后再做一个验证确保自己不是机器人。做完上述步骤后，点击确定，又被告知：抱歉，您的邮箱已被注册。我恍然大悟，返回尝试登录，却发现自己常用的密码根本登录不上。我紧张地点向旁边的「忘记密码」，还好，可以修改。输入了两遍我的新密码，点下最后一个确认键。正准备要松一口气，却再次被警告：修改的密码不能和以前一样。</p><p>什么鬼！</p><p>这是刚刚我在访问一个网站时面临的糟糕情形。</p><p>密码越来越多，秘密却越来越少。这总让我回想起以前网络还没普及到如此完善的日子。那阵子总希望自己能在网上拥有一席之地。感谢祖国的飞速发展，如今的我拥有了一堆账号密码，甚至不得不准备好几种密码来应对不同的保密机制。</p><p>一次又一次的注册，在网络的世界里便有了一个又一个不同的身份。</p><p>我在一些社交平台上的好友要是听到这句歌词，一定会有所触动。</p><p>前些天，QQ 上的一个好友在空间说到：我要卸载 QQ 了，有事电话联系。</p><p>我从内心欣赏那些真的能从网络社交中脱身而出的人，他们一定有着常人不能及的毅力。我以前也做过这样的事。但是在我卸载后，事情却有点不一样。我发现一个问题——并没有人会电话联系我。所以我又决定清理一次手机上的联系人。之后没过多久我就把 QQ 又安装上了。很奇怪，明明在 QQ 上几个月也不会和谁联系一句，但当我卸载了它，心中还是空落落的。内心隐隐期待，患得患失。</p><p>装上 QQ 后，迫不及待地发表说说：自从卸载了 QQ，才发现手机原来还有打电话的功能。</p><p>我试图用这种暧昧的言语假装自己已经卸载了一段时间。然后等着别人来点赞，获得极大满足。</p><p>唉，有些事情明明大家都心知肚明，但就是心照不宣。</p><p>00:15</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观关动物</title>
      <link href="/2017/08/13/watch-animals/"/>
      <url>/2017/08/13/watch-animals/</url>
      
        <content type="html"><![CDATA[<p>2017-08-13-22:30</p><p>前些天和班上的小伙伴被院里安排去参加一个「增加团队凝聚力」的活动，地点位于一个很洋气的基地。</p><p>午饭后，负责人告诉我们，还有两个小时才开始下午的活动，大家自由活动一下吧。然后用手指向门外说，顺着这条路往上走能看到不少动物，有孔雀哦。我和几个小伙伴顺着他的手指向外望去，只见密集的竹子夹着一条小路延向远处。大家没有犹豫，怀着期待开始行动。</p><p>顺着小道走了半天也没有发现任何孔雀的踪迹。我是最容易半途而废的那个人，呼吁着大家别找孔雀了，去找个有空调的地方坐一下吧。没空调，找个阴凉的地方一坐，休息休息也好哇。我虽然一路劝慰大家，不知不觉中却也走到了终点。远远地就闻到一股臭味，顺着这略刺鼻的味道来到一个不大的铁笼子。靠近看，里面原来关着两只鸵鸟。那浓厚的味道大概就是这俩家伙的排泄物发出的了。其中一只靠着笼子，似乎想把头伸出来。有人就开始对着鸟头拍照。友人介绍说北京有的人家四合院里就养着鸵鸟。我突然想起一个场景 —— 一只大鸵鸟在马路上狂奔。这是电影《老炮儿》里的场景，地点就在北京。冯小刚把圈养在四合院的鸵鸟放出来，然后喊道「撒丫子跑吧您内！」</p><p>记得鸵鸟害怕的时候，会把头埋在地上的沙子里。这只大鸟面对着我们，昂扬着头，丝毫没有害怕的意思。大概是知道有一个笼子把这群人围着，它安全的很，也自由的很。</p><p>看完大鸵鸟，满足了不少。但有人还想找孔雀，我们便随意走。</p><p>一路上自然又看见一些动物。</p><p>有两条狗也被关在笼子里，笼子只有不到三平方米。笼子外挂着牌子，写着狗的简介。狗狗是外国的品种，它的名字里有它的国籍。看着这个名字我眼前就浮现出了以前看的那些视频里狗狗奔跑的样子。我盯着它看了好一阵子，它没打算理我。只是自顾自地躺在笼子里。天热的紧，我心里也一紧。我想看它接飞盘的样子，可惜在这个圈里打个盹都费劲。</p><p>三只雪狐被锁在一个稍微凉快点的地方。铭牌上同样是简单的介绍，其中一句说雪狐能耐零下几十度的低温。我们一行人里有人便开始笑，我也苦涩地笑。这几只雪狐这辈子怕是没有用武之地了。</p><p>再走了段路，发现一个供人休息的地方，摆着好几把椅子。我找了一把，坐上去就不想再起来。</p><p>「还没看到孔雀呢。」</p><p>可是我一点也不想看到孔雀了。心里甚至还有点期望这里根本没有孔雀。</p><p>23:40</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从写什么开始写起</title>
      <link href="/2017/08/11/start-with-what-i-write/"/>
      <url>/2017/08/11/start-with-what-i-write/</url>
      
        <content type="html"><![CDATA[<p>2017-08-11-22:20</p><h2 id="一"><a class="markdownIt-Anchor" href="#一"></a> 一</h2><p>虽然标题给人一种随性的感觉，但它也不是我拍脑袋想出来的。我打算为自己的学习生涯开个好头，所以前晚设好了闹钟，今天也很到位地早早醒来。躺在床上，费了九牛二虎之力，我终于想到这个超级厉害的标题。但是当我起床并敲下这行字准备作文一番时，我的大脑很没有志气地开始短路了。从这写起 —— 好像也没什么写的嘛。</p><p>看来坚持写博客这件事对我来说，最难的不是「坚持」，而是无话可说。</p><h2 id="二"><a class="markdownIt-Anchor" href="#二"></a> 二</h2><p>刚开始的话，就随性写吧。像我这样的人，保持热枕是最重要的事情。很多像我一样的新手常常询问大神们怎样才能保证每天写一篇博客。大神们表示菜鸟还是慢慢打好基础吧，花一个月写三十篇口水话不如花一星期写一篇有水平的东西。</p><p>大神们的建议自然有其价值。我甚至可以体会大神们的心情。刚开始的时候因为水平不够花费了很多时间，走了很多弯路。后来水平提上去了就会觉得，要是当初把那些走弯路的时间都用在正确的方向就好了。虽然时光无法回头，但是他们可以把这些经验传授给后来人。部分热心的人会有这样的念头，我不会骗你，这条路是错的，我走过，你回去吧。但是对于很多如我愚昧的菜鸟来说，不自己踩一遍坑，而仅仅是听别人的言语，绝对不会信邪。</p><p>另外，我觉得不管在哪方面，学习的初期，保持练习是非常有效的手段。好也罢，坏也罢，至少我写下去了。坚持做这件事，把它做成一种习惯（当然，得排除自我感动，欺骗自己的大脑那种。），慢慢从这段不适应阶段度过去。很多时候，作文并不是一件有趣的事。不过令我高兴的是，我正在尝试把它做的有趣。</p><h2 id="三"><a class="markdownIt-Anchor" href="#三"></a> 三</h2><p>写什么呢？</p><p>内容尽量写一个主题，这一点我一定要坚持。曾翻到过以前写的文章，都是随心写，想到哪写到哪。老实说今天写这篇博客时，几次我都想把话题带歪……在这一点上，宁可少写，也得做到。</p><p>再写点自己的点子吧。</p><ul><li>多学习别人的文章。看书不要再流于故事，多学习写作技巧，多感受别人的作品。</li><li>尝试写书评，影评。写写自己喜欢的人物。</li><li>尝试写编程中的经验，浅薄见解。</li><li>尝试不同的风格。</li><li>偶尔也可以试试随心写作。</li><li>坚持下去。学习是件孤单的事。</li></ul><p>23:17</p>]]></content>
      
      
      <categories>
          
          <category> 生活志 </category>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客记录 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
